# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graph.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from graph1011 import Graph1011
from graph1101 import Graph1101
from graph1111 import Graph1111
from filter import FilterWindow

from customization import Customization

from PyQt5.QtWidgets import QApplication, QWidget

from helper import show_error_message,collect_data


class Graph(QWidget):
    def __init__(self,fields=None,prev_win=None,db_name=None,field_str=None,app_tabs=None):
        super().__init__()
        self.y_axis = 0
        self.fields = fields
        self.prev_win = prev_win
        self.db_name = db_name
        self.field_str= field_str
        self.app_tabs = app_tabs
        self.tab_dict = {}
        self.filter_window_dict = {}
        self.selection_characters = {}
        self.selection_numbers = {}
        self.selection_dates = {}
        self.range_character = {}
        self.range_number = {}
        self.range_date = {}

    def setupUi(self, MainWindow):
        # self.prev_win.hide()
        # MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(1300, 800)
        self.centralwidget = MainWindow#QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = self.prev_win#QtWidgets.QTabWidget(self.centralwidget)
        # self.tabWidget.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        # self.tabWidget.setObjectName("tabWidget")
        # MainWindow.setCentralWidget(self.centralwidget)
        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #if self.field_str not in self.app_tabs:

        self.create_tab(self.field_str)
                                                                                                                                                          
    def create_tab(self,tab_label):
        def creating_name(field_arr,db_name1):
            tab_value=''
            i=0
            for key,value in field_arr.items():
                print(key,value,"tab value in loop")
                for tab_name in value:
                    if(i==0):
                        tab_value=tab_name
                        i=1
                    elif(tab_name=="None"):
                        continue
                    else:
                        tab_value=tab_value+"-"+tab_name
            return str(db_name1)+" "+tab_value
        # self.tab = self.centralwidget#QtWidgets.QWidget()
        # self.tab.setObjectName(tab_label)
        # self.centralwidge.setGeometry(QtCore.QRect(0, 0, self.tabWidget.width(), self.tabWidget.height()))
        # self.tabWidget.addTab(self.tab, tab_label)
        # self.tabWidget.setCurrentIndex(self.tabWidget.currentIndex()+1)#setCurrentWidget(self.tab)
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab),tab_label)
        self.setup_graph(self.centralwidget)
        self.prev_win.setCurrentWidget(self.centralwidget)
        name_of_tab=creating_name(self.fields,self.db_name)
        self.prev_win.setTabText(self.prev_win.currentIndex(),name_of_tab)
    
                                                                                                                                                                   
    def create_filter_tab(self,filter_title,df=None,
                db_name=None,fields=None,kind=None,
                title=None,sql_func=None,graph_function=None,
                sql_data =None):
        # if filter_title not in self.tab_dict:
        self.tab_dict[filter_title] = QtWidgets.QWidget()
        self.tab_dict[filter_title].setObjectName(filter_title)
        self.tab_dict[filter_title].setGeometry(QtCore.QRect(0, 0, 1300, 800))
        index = self.tabWidget.addTab(self.tab_dict[filter_title], "")
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_dict[filter_title]),filter_title)
        
        self.selection_characters = self.data_screen.selection_characters
        self.selection_numbers = self.data_screen.selection_numbers
        self.selection_dates = self.data_screen.selection_dates
        self.range_character =  self.data_screen.range_character
        self.range_date = self.data_screen.range_date
        self.range_number =self.data_screen.range_number
        self.filter_window_dict[filter_title] = Customization(df,db_name,fields,kind,title,sql_func,graph_function
                                                                ,self.selection_characters,self.selection_numbers,self.selection_dates
                                                                ,self.range_character,self.range_date,self.range_number,sql_data)
        self.filter_window_dict[filter_title].setupUi(self.tab_dict[filter_title])
        collect_data('Select Graph',graph_function.__name__,self)
        self.tabWidget.setCurrentIndex(index)
                           
    def setup_graph(self,tab):
        # self.window = QtWidgets.QWidget()#QMainWindow()
        try:
            module = __import__('graph'+self.field_str)
            graph_class = getattr(module, 'Graph'+self.field_str)  
            self.data_screen=graph_class(self.fields,self.prev_win,self.db_name,self.field_str,self)
            self.data_screen.setupUi(tab)
        except Exception as e:
            print("############### ERROR ON GRAPH ######################")
            print(e)
            show_error_message('Those are advanced graphs! Update to Pro to see advanced graphs')


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QWidget()
    ui = Graph()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
