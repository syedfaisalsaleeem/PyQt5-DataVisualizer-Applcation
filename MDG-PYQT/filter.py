# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'filter.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from helper import ExtendedTextBox,BoxStyle,run_query,where_function
from range_slider import QHSpinBoxRangeSlider
from checkable_combobox import CheckableComboBox
import PIL
from PIL import Image
import numpy as np
import datetime
from helper import show_success_message,show_error_message,data_label_format
import threading 
import multiprocessing
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import * 

BoxStyle._style_list["ext"] = ExtendedTextBox

class LoadThread(QtCore.QThread):
    signal = QtCore.pyqtSignal(object,object)

    def __init__(self,dropdowns_data,dropdown):
        QtCore.QThread.__init__(self)
        self.dropdowns = dropdown
        self.dropdowns_data = dropdowns_data
        self.is_working = True

    def stop(self):
        self.terminate()
        print("QThread terminated")
    # run method gets called when we start the thread
    
    def run(self):
        while self.is_working:
            if len(self.dropdowns_data.keys()) == 0:
                self.is_working=False
            for key in self.dropdowns.keys():
                try:
                    print(key)
                    #self.dropdowns[key].clear()
                    data = self.dropdowns_data[key][:500]
                    del self.dropdowns_data[key][:500]
                    if data != []:
                        self.signal.emit(key,data)
                    else:
                        del self.dropdowns_data[key]
                except Exception as e:
                    print(e)
            import time
            time.sleep(5)
        print('done')

def generate_character_filter(self,field_arr,data_type):
    '''
        This function is responsible to create widgets for character field
    '''
    # intialize for the list to save labels
    self.character_dict['label'] = []
    # to save the value
    self.character_dict['value'] = []
    # initialize the x axis to zero to position the 
    x_axis = 0
    # count also used for the position
    count = 0
    # create a label
    self.labelh = QtWidgets.QLabel(self.frame)
    # set position
    self.labelh.setGeometry(QtCore.QRect(35+x_axis, 20+self.y_axis, 100, 25))
    self.labelh.setObjectName("label")
    # set object name
    self.labelh.setText(data_type)
    # create a font widget
    font = QtGui.QFont()
    # set font size
    font.setPixelSize(17)
    # set font to label
    self.labelh.setFont(font)
    # itertte over the field
    for i in field_arr:
        print(i)
        # if count == 5 meaning 5 widgets are drawn on the sreen increase y axis to come on the next line
        if count % 5 == 0 and count != 0:
            # increas the y axis by 50
            self.y_axis += 60
            # set x axis to zero
            x_axis = 0
        # create a dropdown
        self.comboBox = CheckableComboBox(self.frame)
        # set position of the the dropdpwn
        self.comboBox.setGeometry(QtCore.QRect(30+x_axis, 60+self.y_axis, 180, 31))
        self.comboBox.setObjectName("comboBox")
        # crete a label 
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(35+x_axis, 40+self.y_axis, 90, 13))
        self.label.setObjectName("label")
        # set label text
        self.label.setText(i)
        # append the label in the list for later use
        self.character_dict['label'].append(self.label)
        # append the widget object for later use
        self.character_dict['value'].append(self.comboBox)
        # iterate the range character field  to populate the 
        if len(self.range_character[i]) <= 1000:
            for j in self.range_character[i]:
                if j != '':
                    self.comboBox.addItem(j)
        else:
            self.dropdowns[i] = self.comboBox
            self.dropdowns_data[i] = self.range_character[i]
        # increase the xaxis
        x_axis+=200
        #increase the count
        count +=1



def generate_number_filter(self,field_arr,data_type):
    # intialize the label list
    self.number_dict['label'] = []
    # initialiw the value list
    self.number_dict['value'] = []
    # x axis to be 0
    x_axis = 0
    # count to be zero
    count = 0
    # create a labale set the text
    self.labelh = QtWidgets.QLabel(self.frame)
    self.labelh.setGeometry(QtCore.QRect(35+x_axis, 100+self.y_axis, 80, 13))
    self.labelh.setObjectName("label")
    self.labelh.setText(data_type)
    font = QtGui.QFont()
    font.setPixelSize(17)
    #set the font in the label
    self.labelh.setFont(font)
    # iterate over the field list
    for i in field_arr:
        # if the range is not empty or list set it to min_ variable
        if self.range_number[i][0] != '' and self.range_number[i][0] != 'nan':
            min_ = int(float(self.range_number[i][0]))
        #else set min_ 0
        else:
            min_ = 0
        # if the range is not empty or list set it to max_ variable
        if  self.range_number[i][1 ]!= '' and self.range_number[i][1] != 'nan':
            max_ = int(float(self.range_number[i][1]))
        # else set he max_ 0
        else:
            max_= 0
        # if the max_ is greater than zero than proceed
        if max_ > 0:
            # checking the cound for 5 widgets per row
            if count % 2 == 0 and count != 0:
                # increas the y axis by 50
                self.y_axis += 80
                # set x axis to zero
                x_axis = 0
            # create a range slider and pass the min max variable and 1 is the amount of speed it increase the slider
            self.range_slider = QHSpinBoxRangeSlider([min_,max_,1],[min_,max_],self.frame)
            # set the position
            self.range_slider.setGeometry(QtCore.QRect(30+x_axis, 150+self.y_axis, 400, 40))
            # create a klabel and set text
            self.label = QtWidgets.QLabel(self.frame)
            self.label.setGeometry(QtCore.QRect(35+x_axis, 125+self.y_axis, 190, 13))
            self.label.setObjectName("label")
            self.label.setText(i)
            # append the label into the list
            self.number_dict['label'].append(self.label)
            # append the list into the label
            self.number_dict['value'].append(self.range_slider)
            x_axis+=600
            count +=1

def generate_date_filter(self,field_arr,data_type):
    # create a list for label
    self.date_dict['label'] = []
    # createa list for date from
    self.date_dict['date_from'] = []
    # create a list for date to
    self.date_dict['date_to'] = []
    x_axis = 0
    count = 0
    self.y_axis += 130
    # create a label set text
    self.labelh = QtWidgets.QLabel(self.frame)
    self.labelh.setGeometry(QtCore.QRect(35+x_axis, 100+self.y_axis, 80, 13))
    self.labelh.setObjectName("label")
    self.labelh.setText(data_type)
    font = QtGui.QFont()
    font.setPixelSize(17)
    #set the font in the label
    self.labelh.setFont(font)
                
    # iterate over the field_arr
    for i in field_arr:
        if count % 2 == 0 and count != 0:
            # increas the y axis by 50
            self.y_axis += 100
            # set x axis to zero
            x_axis = 0
        # set label and set text
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(35+x_axis, 125+self.y_axis, 110, 13))
        self.label.setObjectName("label")
        self.label.setText(i)
        font.setPixelSize(14)
        # there are two date formats one with / and one with - managing both
        try:
            field_date = self.range_date[i][0].split('/')
            # set the date widget to set the default date in the date edit widget
            d = QtCore.QDate(int(field_date[2]), int(field_date[0]), int(field_date[1]))
        except:
            field_date = self.range_date[i][0].split(' ')[0].split('-')
            # set the date widget to set the default date in the date edit widget
            d = QtCore.QDate(int(field_date[0]), int(field_date[1]), int(field_date[2]))
        print(field_date)
        print(d)
        self.label.setFont(font)
        # create a label widget  and set text
        self.labelf = QtWidgets.QLabel(self.frame)
        self.labelf.setGeometry(QtCore.QRect(35+x_axis, 150+self.y_axis, 70, 13))
        self.labelf.setObjectName("label")
        self.labelf.setText('from')
        # create a date widget
        self.dateEditf = QtWidgets.QDateEdit(self.frame)
        # set the position of the date
        self.dateEditf.setGeometry(QtCore.QRect(30+x_axis, 185+self.y_axis, 180, 31))
        self.dateEditf.setObjectName("dateEdit")
        # set the current date
        self.dateEditf.setDate(d)
        x_axis += 200
        # create a alabel and add text
        self.labelt = QtWidgets.QLabel(self.frame)
        self.labelt.setGeometry(QtCore.QRect(35+x_axis, 150+self.y_axis, 70, 13))
        self.labelt.setObjectName("label")
        self.labelt.setText('to')
        ## there are two date formats one with / and one with - managing both
        try:
            field_date = self.range_date[i][1].split('/')
            d = QtCore.QDate(int(field_date[2]), int(field_date[0]), int(field_date[1]))
        except:
            field_date = self.range_date[i][1].split(' ')[0].split('-')
            d = QtCore.QDate(int(field_date[0]), int(field_date[1]), int(field_date[2]))
        # create another date edit widhget for to 
        self.dateEditt = QtWidgets.QDateEdit(self.frame)
        self.dateEditt.setGeometry(QtCore.QRect(30+x_axis, 185+self.y_axis, 180, 31))
        self.dateEditt.setObjectName("dateEdit") 
        self.dateEditt.setDate(d)
        self.date_dict['label'].append(self.label)
        self.date_dict['date_to'].append(self.dateEditt)
        self.date_dict['date_from'].append(self.dateEditf)
        x_axis+=200
        count +=1
    
def apply_filter(self):
        #self.reset_button.show()
        print('########################Character##########################')
        # iterate over the character dict which label object and widget object
        try:
            for i in range(len(self.character_dict['label'])):
            # get the text from the label widget
                label = self.character_dict['label'][i].text()
            # get the updated data in the values
                values = self.character_dict['value'][i].currentData()
            # check if the data exist
                if len(values):
                # append the data in the selection character dict
                    self.selection_characters[label] = values
        except:
            pass
        print(self.selection_characters)
        print('##########################number##########################')
        #iterate over the number dict which label object and widget object
        try:
            for i in range(len(self.number_dict['label'])):
            # get the text from the label widget
                label = self.number_dict['label'][i].text()
             # get the updated data in the values
                value = self.number_dict['value'][i].getValues()
            #append the values in selection number dict
                self.selection_numbers[label] = value
        except:
            pass
        print(self.selection_numbers)
        print('##########################date##########################')
        #iterate over the date dict which label object and widget object
        try:
            for i in range(len(self.date_dict['label'])):
            # get the text from the label widget
                label = self.date_dict['label'][i].text()
            # get the updated data in the values
                values = ['{dt.year}-{dt.month:02d}-{dt.day:02d}'.format(dt=self.date_dict['date_from'][i].date().toPyDate()),'{dt.year}-{dt.month:02d}-{dt.day:02d}'.format(dt=self.date_dict['date_to'][i].date().toPyDate())]
            #append the values in selection dates dict
                self.selection_dates[label] = values
        except:
            pass
        print(self.selection_dates)
        # update the graph with update_graoh function
        self.update_graph()
        self.main_window.hide()
        
class FilterWindow(object):

    def __init__(self,selection_character=None,selection_numbers=None,selection_dates=None,db_name=None
                    ,update_func=None,range_character=None,range_number=None,range_date=None,
                    data=None):
        #Above alll the variables come from the previous class
        # created the datatypes
        super().__init__()
        self.data_types =["CHARACTER","NUMBER","DATE",]
        # set y axis to position the widgets
        self.y_axis = 0
        # set the data to none so we can query later
        ##########################
        self.character_dict = {}
        self.number_dict = {}
        self.date_dict = {}
        #Above variables store the widgets objects so we can later get the data from
        #Following variables are used in where functiion
        self.range_character = range_character
        self.range_number = range_number
        self.range_date = range_date
        self.selection_characters =selection_character
        self.selection_numbers = selection_numbers
        self.selection_dates = selection_dates
        self.parameter = None
        self.customizations = {}
        self.customization_features = []
        self.db_name = db_name
        self.update_graph = update_func
        self.data = data
        self.dropdowns = {}
        self.dropdowns_data = {}

            


    def setupUi(self, MainWindow):
        # mainw window setting size
        self.main_window = MainWindow
        MainWindow.setWindowTitle("VizPick")
        MainWindow.setWindowIcon(QtGui.QIcon('logo1.png'))
        MainWindow.setMinimumSize(1024, 468)
        MainWindow.resize(1258, 1000)
        self.create_area(self.main_window,MainWindow.width(), MainWindow.height())
        self.prepare_filters()
        self.t1 = LoadThread(self.dropdowns_data,self.dropdowns)
        self.t1.signal.connect(self.add_data)
        self.t1.start()

    def add_data(self,key,data):
        print(key)
        print(data)
        try:
            data = data.remove(' ')
        except:
            pass
        self.dropdowns[key].addItems(data)


    def create_area(self,tab,width,height):
        # self.v = QVBoxLayout()
        self.scrollArea = QtWidgets.QScrollArea()
        self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, 1008, 900))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0,  1258, 1000))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollAreaWidgetContents.setStyleSheet("background:white")
        self.vbox = QVBoxLayout() 
        self.vbox.setAlignment(Qt.AlignCenter)
        self.frame = QtWidgets.QWidget()
        self.frame.setStyleSheet("background:white")
        self.frame.setFixedSize(1061, 800)
        # self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.frame.setObjectName("frame")
        self.vbox.addWidget(self.frame)
        self.scrollAreaWidgetContents.setLayout(self.vbox)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setStyleSheet("QScrollArea {background: #fff}\n" 
                "QFrame {background: #fff}\n"
                "QPushButton {background:#85bb65}\n"
                "QPushButton {color:#fff}")
        self.main_window.setCentralWidget(self.scrollArea)
        # self.v.addWidget(self.scrollArea)
        # self.setLayout(self.v)
        # self.show()    

    def take_screenshot(self):
        '''
            This graph is responsible to save the screenshot of the widget
        '''
        screen = QtWidgets.QApplication.primaryScreen()
        screenshot = screen.grabWindow(self.scrollAreaWidgetContents.winId())
        screenshot.save('shot.jpg', 'jpg')
        print('Done')

                                                                                                  
    def prepare_filters(self):
        # query to bring fields and datatype from meta_data table
        data = self.data
        #run the filter data to get the dictionary of filtered fields data type
        new_data = self.filter_data(data,self.data_types)
        # iterate over the data 
        for i in range(len(self.data_types)):
            if len(new_data[self.data_types[i]]):
                if self.data_types[i] == 'CHARACTER':
                    # run this function if character
                    generate_character_filter(self,new_data['CHARACTER'],'CHARACTER')
                elif self.data_types[i] == 'NUMBER':
                    # rtun this function if number
                    generate_number_filter(self,new_data['NUMBER'],'NUMBER')
                elif self.data_types[i] == 'DATE':
                    # run this function if date
                    generate_date_filter(self,new_data['DATE'],"DATE")
        
        self.filter_btn = QtWidgets.QPushButton(self.frame)
        self.filter_btn.setGeometry(QtCore.QRect(35, 250+self.y_axis, 125, 31))
        self.filter_btn.setObjectName("pushButton")
        self.filter_btn.setText('Filter')
        self.filter_btn.setStyleSheet('''
        QPushButton
        {  
            color: white;
            background-color:#05B31C;
            border: 1.5px solid #05B31C;
            border-radius: 6px;

        }
        QPushButton:hover
        {
            background: #05B31C;
            color: white;
            
        }''')
        self.filter_btn.clicked.connect(lambda:apply_filter(self))
        self.reset_button = QtWidgets.QPushButton(self.frame)
        self.reset_button.setGeometry(QtCore.QRect(170, 250+self.y_axis, 125, 31))
        self.reset_button.setObjectName("pushButton")
        self.reset_button.setText('Reset')
        self.reset_button.setStyleSheet('''
        QPushButton
        {  
            color: white;
            background-color:#05B31C;
            border: 1.5px solid #05B31C;
            border-radius: 6px;

        }
        QPushButton:hover
        {
            background: #05B31C;
            color: white;
            
        }''')
        #self.reset_button.clicked.connect(self.reset_filter)
        self.reset_button.hide()
        self.y_axis += 50
        self.frame.setFixedHeight(250 + self.y_axis)
        self.y_axis += 300

        # on click run this function
        
    # def reset_filter(self):
    #     self.selection_characters.clear()
    #     self.selection_dates.clear()
    #     self.selection_numbers.clear()
    #     self.reset_button.hide()
    #     self.generate_graph(self.fields,self.y_axis,self.field_str,where_func=where_function(self),category=self.category)
        
        


    def filter_data(self,df,fields):
        '''
            Filter the data with acoriding to the type
        '''
        data = {}
        for field in fields:
            data[field] = df[df['data_type'] == field]['field'].values
        return data


    









    