# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graph.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

from graph1011 import Graph1011
from helper import ExtendedTextBox,BoxStyle,run_query,data_label_decimal,data_label_format
from super_graph import SuperGraph
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D
import matplotlib.cm
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import squarify
import helper
from data_format_round import DataLabelFormatter
from sklearn.linear_model import LinearRegression

import circle as circ


BoxStyle._style_list["ext"] = ExtendedTextBox
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from TopBar import TopLearningSection
import pandas as pd
import dateformater

import numpy as np

class ClickLabel(QtWidgets.QLabel):
    clicked = QtCore.pyqtSignal()

    def mousePressEvent(self, event):
        self.clicked.emit()
        QtWidgets.QLabel.mousePressEvent(self, event)

class Graph1101(SuperGraph):
    # constructor to intialize the variables
    def __init__(self,fields=None,prev_win=None,db_name=None,field_str=None,graph_class=None):
        SuperGraph.__init__(self)
        self.y_axis = 0
        self.fields = fields
        self.prev_win = prev_win
        self.db_name = db_name
        self.field_str= field_str
        self.graph_class = graph_class

    def setupUi(self, MainWindow):
        # close the previous window
        #self.prev_win.hide()
        self.main_window_layout = QVBoxLayout()
        self.main_window = MainWindow
        self.t = TopLearningSection()
        self.t.setup(self.main_window_layout )
        self.main_window_layout.setAlignment(Qt.AlignTop)
        # self.vbox.addLayout(self.hbox1)
        # self.vbox.addLayout(self.hbox)
        self.main_window.setLayout(self.main_window_layout)
        # self.centralwidget = MainWindow#QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        

        ## Adding top widget without scroll area
        self.fixedwidgettop = QWidget()
        self.fixedwidgettop.setStyleSheet('background:white')
        self.effect = QGraphicsDropShadowEffect(self.fixedwidgettop)
        self.effect.setOffset(0, 0)
        self.effect.setBlurRadius(10)
        self.fixedwidgettop.setGraphicsEffect(self.effect)
        self.fixedwidgettop.setFixedHeight(250)

        #THis is the main horizontal layout inside  fixed widget at the top
        self.hlayoutfixedwidgettop =  QHBoxLayout()
        self.hlayoutfixedwidgettop.setAlignment(Qt.AlignTop)

        self.smallwidgetinsidefixedwidgettop = QWidget()
        self.smallwidgetinsidefixedwidgettop.setStyleSheet("background:white")
        self.smallwidgetinsidefixedwidgettop.setFixedSize(1250,240)

        #Adding vertical layouts 4 columns inside small widget at top
        self.vlayoutfixedwidgettop = QVBoxLayout()
        self.vlayoutfixedwidgettop.setAlignment(Qt.AlignCenter)
        # self.vlayoutfixedwidgettop.setAlignment(Qt.AlignTop)
        self.smallwidgetinsidefixedwidgettop.setLayout(self.vlayoutfixedwidgettop)
        # self.smallwidgetinsidefixedwidgettop.setMinimumWidth(600)
        self.hlayoutfixedwidgettop.addStretch(1)
        self.hlayoutfixedwidgettop.addWidget(self.smallwidgetinsidefixedwidgettop)
        self.hlayoutfixedwidgettop.addStretch(1)
        self.fixedwidgettop.setLayout(self.hlayoutfixedwidgettop)
        
        self.hboxwidgetinsiderow3 = QHBoxLayout()
        self.hboxwidgetinsiderow3.setAlignment(Qt.AlignLeft)
        self.button3 = QWidget(self.smallwidgetinsidefixedwidgettop)
        self.button3.setFixedWidth(1250)
        
        self.button3.setLayout(self.hboxwidgetinsiderow3)
        self.pushButton_2 = QtWidgets.QPushButton(self.button3)
        self.pushButton_2.setStyleSheet('''
            QPushButton
            {
                padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
            }

            QPushButton::disabled
            {
                color: #acacac;
            }

            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }

            QPushButton:pressed
            {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            background: #6e98e0;
                color: white;

            }
            QPushButton:checked
            {
            padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
    background: #6e98e0;
                color: white;
            }
                ''')
        # self.pushButton_2.setGeometry(QtCore.QRect(10, 10, 150, 50))
        self.pushButton_2.setFixedSize(150, 40)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setText('Filter')
        self.pushButton_2.clicked.connect(self.open_filter)
        # self.vlayoutfixedwidgettop.addWidget(self.pushButton_2)

        ##Adding scrollablewidget with scrollarea

        self.main_window_layout.addWidget(self.fixedwidgettop)
        # self.mainwidget.setLayout(self.mainlayout)
        self.create_area(MainWindow,MainWindow.width(), MainWindow.height(),self.main_window_layout,self.fixedwidgettop,self.vlayoutfixedwidgettop,self.pushButton_2,self.smallwidgetinsidefixedwidgettop)



        self.get_data_from_table()
        
        self.run_spinner()
        # self.generate_graph(self.fields,self.y_axis,self.field_str)
        self.generate_top_text()
        self.vlayoutfixedwidgettop.addWidget(self.button3)
        self.hboxwidgetinsiderow3.addWidget(self.pushButton_2)
        self.generate_category_button()
        
        self.vlayoutfixedwidgettop.addStretch(1)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def create_sql_queries(self,flag=False, where_func=False):
        data = []
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        if flag:
            where_filters = where_func
        else:
            where_filters = ''
        where_sql = ''
        if self.fields['aggregate'][0] == 'Sum':
            if self.fields['date_level'][0] == 'Exact Date':
                min_max_sql=f'''select min(date({date_selection})) as min_date_level, max(date({date_selection})) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}) as {date_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection})'''
                order_sql=f''' order by date({date_selection})'''
            elif self.fields['date_level'][0] == 'Week':
                min_max_sql=f'''select min(date({date_selection}, 'weekday 1', '-7 days')) as min_date_level, max(date({date_selection}, 'weekday 1', '-7 days')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'weekday 1', '-7 days') as {date_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'weekday 1', '-7 days')'''
                order_sql=f''' order by date({date_selection}, 'weekday 1', '-7 days')'''
            elif self.fields['date_level'][0] == 'Month':
                min_max_sql=f'''select min(date({date_selection}, 'start of month')) as min_date_level, max(date({date_selection}, 'start of month')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'start of month') as {date_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'start of month')'''
                order_sql=f''' order by date({date_selection}, 'start of month')'''
            elif self.fields['date_level'][0] == 'Quarter':
                min_max_sql=f'''select min(date({date_selection}, 'start of month')) as min_date_level, max(date({date_selection}, 'start of month')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END as {date_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by (CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END)'''
                order_sql=f''' order by (CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END)'''
            elif self.fields['date_level'][0] == 'Year':
                min_max_sql=f'''select min(date({date_selection}, 'start of year')) as min_date_level, max(date({date_selection}, 'start of year')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'start of year') as {date_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'start of year')'''
                order_sql=f''' order by date({date_selection}, 'start of year')'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+= ''
            
            
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Average':
            if self.fields['date_level'][0] == 'Exact Date':
                min_max_sql=f'''select min(date({date_selection})) as min_date_level, max(date({date_selection})) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}) as {date_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection})'''
                order_sql=f''' order by date({date_selection})'''
            elif self.fields['date_level'][0] == 'Week':
                min_max_sql=f'''select min(date({date_selection}, 'weekday 1', '-7 days')) as min_date_level, max(date({date_selection}, 'weekday 1', '-7 days')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'weekday 1', '-7 days') as {date_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'weekday 1', '-7 days')'''
                order_sql=f''' order by date({date_selection}, 'weekday 1', '-7 days')'''
            elif self.fields['date_level'][0] == 'Month':
                min_max_sql=f'''select min(date({date_selection}, 'start of month')) as min_date_level, max(date({date_selection}, 'start of month')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'start of month') as {date_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'start of month')'''
                order_sql=f''' order by date({date_selection}, 'start of month')'''
            elif self.fields['date_level'][0] == 'Quarter':
                min_max_sql=f'''select min(date({date_selection}, 'start of month')) as min_date_level, max(date({date_selection}, 'start of month')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END as {date_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by (CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END)'''
                order_sql=f''' order by (CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END)'''
            elif self.fields['date_level'][0] == 'Year':
                min_max_sql=f'''select min(date({date_selection}, 'start of year')) as min_date_level, max(date({date_selection}, 'start of year')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'start of year') as {date_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'start of year')'''
                order_sql=f''' order by date({date_selection}, 'start of year')'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+= ''
            
            
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Count':
            if self.fields['date_level'][0] == 'Exact Date':
                min_max_sql=f'''select min(date({date_selection})) as min_date_level, max(date({date_selection})) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}) as {date_selection}, count(*) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection})'''
                order_sql=f''' order by date({date_selection})'''
            elif self.fields['date_level'][0] == 'Week':
                min_max_sql=f'''select min(date({date_selection}, 'weekday 1', '-7 days')) as min_date_level, max(date({date_selection}, 'weekday 1', '-7 days')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'weekday 1', '-7 days') as {date_selection}, count(*) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'weekday 1', '-7 days')'''
                order_sql=f''' order by date({date_selection}, 'weekday 1', '-7 days')'''
            elif self.fields['date_level'][0] == 'Month':
                min_max_sql=f'''select min(date({date_selection}, 'start of month')) as min_date_level, max(date({date_selection}, 'start of month')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'start of month') as {date_selection}, count(*) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'start of month')'''
                order_sql=f''' order by date({date_selection}, 'start of month')'''
            elif self.fields['date_level'][0] == 'Quarter':
                min_max_sql=f'''select min(date({date_selection}, 'start of month')) as min_date_level, max(date({date_selection}, 'start of month')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END as {date_selection}, count(*) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by (CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END)'''
                order_sql=f''' order by (CASE 
  WHEN cast(strftime('%m', {date_selection}) as integer) in (1,4,7,10) THEN date({date_selection}, 'start of month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (2,5,8,11) THEN date({date_selection}, 'start of month', '-1 month')
  WHEN cast(strftime('%m', {date_selection}) as integer) in (3,6,9,12) THEN date({date_selection}, 'start of month', '-2 month')
  ELSE 4 END)'''
            elif self.fields['date_level'][0] == 'Year':
                min_max_sql=f'''select min(date({date_selection}, 'start of year')) as min_date_level, max(date({date_selection}, 'start of year')) as max_date_level from {self.db_name}'''
                df_date_level_min_max=run_query(min_max_sql)
                #these will be used to filter the dataset after df is create when we do continuous dates (basically this will trim the ends)
                min_date_level=df_date_level_min_max['min_date_level'][0]
                max_date_level=df_date_level_min_max['max_date_level'][0]
                select_sql = f'''select date({date_selection}, 'start of year') as {date_selection}, count(*) as {number_selection} from {self.db_name}'''
                group_sql=f''' group by date({date_selection}, 'start of year')'''
                order_sql=f''' order by date({date_selection}, 'start of year')'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+= ''
            
            
            sql_statement = select_sql+where_sql+group_sql+order_sql
        df=run_query(sql_statement)
        data.append(df)
        return data
    def tick_degree(self,parameter):
        dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
        no=0
        for i in parameter['dataframe'][self.fields['date'][0]+ '_formatted'].unique():
            no+=len(i)
        if no>120:
            degree=90
        elif no>100:
            degree=45
        elif no>65:
            degree=45
        elif no>60:
            degree=0
        elif no>40:
            degree=0
        else:
            degree=0
        return degree
    
    def titles(self):
    #0=regular
    #1=averagge color
    #2=average line
    #3=gradient
    #4=median color
    #5=median line
    #6=regression
    #7=percent increase
    #8=runsum
        title_list=[]
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ')
            #parameter['title']= parameter['title'].title()
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ')
            #parameter['title']= parameter['title'].title()
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ')
            #parameter['title']= parameter['title'].title()
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - above or below average'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - above or below average'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - above or below average'
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - average line'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - average line'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - average line'
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - colored by ' + str(self.fields['number'][0]).replace('_',' ')
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - colored by ' + str(self.fields['number'][0]).replace('_',' ')
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - colored by ' + str(self.fields['number'][0]).replace('_',' ')
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - above or below median'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') +  ' - above or below median'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - above or below median'
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - median with quartiles'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') +  ' - median with quartiles'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - median with quartiles'
        title= title.title()
        title_list.append(title)

        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - with regression'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') +  ' - with regression'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - with regression'
        title= title.title()
        title_list.append(title)

        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - percent increase '
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') +  ' - percent increase '
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - percent increase '
        title= title.title()
        title_list.append(title)

        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - runsum '
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') +  ' - runsum '
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['date_level'][0]).replace('_',' ') + ' - runsum '
        title= title.title()
        title_list.append(title)
        return title_list

    def data_function_bar_1101(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median=df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average']=average
        parameter['median']=median
        df_with_extras=df
        df_with_extras['average']=average
        df_with_extras['median']=median
        parameter['df_with_extras']=df_with_extras
        if customizations != None:
            if 'title' in customizations:
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                
 
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
                
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[0]
            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d-max_d*0.2, max_d+max_d*0.2]
            else:
                parameter['y_limit'] = [0, max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
        print(parameter['date_format'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])        
        print("data function")
        return parameter

    def bar_1101(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:

            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        #date_selection = self.fields['date'][0]
        #date = pd.DataFrame(parameters['dataframe'][date_selection].unique(), columns=['date'])
        #dateformater.parse_date(date, 'date',
         #                           parameters['date_format'])
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0]+ '_formatted'], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on']) 
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig
    
    def data_function_bar_1101_test(self, data,customizations=None):
        customizations_transfer=customizations
        # flag_transfer=flag
        # where_func_transfer=where_func
        parameter = self.data_function_bar_1101()
        return parameter

    def bar_1101_test(self, parameters,kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        axis.set_ylim((0, parameters['y_limit']+parameters['y_zoom_margin']))
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=bar.get_height() + parameters['data_label_offset'],
                      s=label,
                      ha='center',
                      va='bottom',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['above_color'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'])
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        axis.set_ylabel(parameters['y_label'])

        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        title = self.ax1.set_title(parameters['title'],
                                   backgroundcolor=parameters['title_background'], 
                                   color=parameters['title_text_color'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.4, width=800)
        return axis, self.fig

# ----------------------- bar trending with median line

    def data_function_bar_1101_median_line(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df =data[0].copy()
        average = df[number_selection].mean()
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        parameter['Q1'] = q1
        parameter['Q3'] = q3
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[5]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[5]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]            
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['legend_placement']='best'
            parameter['title_background']='#555555'
            parameter['title_text_color']='white' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def bar_1101_median_line(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # draw median line
        x = axis.get_xlim()
        axis.plot(x, [parameters['median'], parameters['median']],
                  color=parameters['center_line_color'],label=None)
        axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                          color='#C0C0C0', alpha=0.8)
        axis.set_xlim(x)
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            median = dlf.data_label_formater(df=parameters['dataframe'], col='median',
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Median:" + median],loc=parameters['legend_placement'])
        else:
            axis.legend(labels=None)

        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# ----------------------- bar trending with median color

    def data_function_bar_1101_median_color(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['Q1'] = q1
        parameter['Q3'] = q3
        parameter['median'] = median
        parameter['df_with_extras'] = df_with_extras
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[4]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[4]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]            
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['legend_placement']='best'
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("Data function")
        return parameter

    def bar_1101_median_color(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['above_color'])
            # if the height of a bar is below median, color it with dark yellow
            if bar.get_height() < parameters['median']:
                bar.set_color(parameters['below_color'])
        # draw median line
        x = axis.get_xlim()
        axis.plot(x, [parameters['median'],
                      parameters['median']], color=parameters['center_line_color'],label=None)
        axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                                  color='#C0C0C0', alpha=0.8)
        axis.set_xlim(x)
        # legend
        if parameters['legend']:
            dlf = DataLabelFormatter()
            median=dlf.data_label_formater(df=parameters['dataframe'], col='median', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['above_color'], lw=4),
                     Line2D([0], [0], color=parameters['below_color'], lw=4),
                     Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ['Above median', 'Below median', "Median:" +median],
                        loc=parameters['legend_placement'])
        else:
            axis.legend(labels=None)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# ---------------------- bar trending with average line

    def data_function_bar_1101_average_line(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[2]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[2]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['legend_placement']='best'  
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'  
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def bar_1101_average_line(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # draw average line
        x = axis.get_xlim()
        axis.plot(x, [parameters['average'], parameters['average']], color=parameters['center_line_color'],
                  label=None)
        axis.set_xlim(x)
        if parameters['legend']:
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Average:" + average], loc=parameters['legend_placement'])
        else:
            axis.legend(labels=None)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig


# --------------------- bar trending with average color

    def data_function_bar_1101_average_color(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[1]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[1]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['legend_placement']='best' 
            parameter['title_background']='#555555'
            parameter['title_text_color']='white' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("Data function")
        return parameter

    def bar_1101_average_color(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['above_color'])
            # if the height of a bar is below average, color it with dark yellow
            if bar.get_height() < parameters['average']:
                bar.set_color(parameters['below_color'])
        # draw average line
        x = axis.get_xlim()
        axis.plot(x, [parameters['average'], parameters['average']], color=parameters['center_line_color'],
                  label=None)
        axis.set_xlim(x)
        # legend
        if parameters['legend']:
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['above_color'], lw=4),
                     Line2D([0], [0], color=parameters['below_color'], lw=4),
                     Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ['Above average', 'Below average', "average:" +average],
                        loc=parameters['legend_placement'])
        else:
            axis.legend(labels=None)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# ------------------- bar trending colored by measure

    def data_function_bar_1101_colored_by_measure(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'
            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
                
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='vertical'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[3]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['orientation']='vertical'
            parameter['legend_placement']='upper right'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("Data function")
        return parameter

    def bar_1101_colored_by_measure(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # find and assign maximum value of the first(values) column
        max_d = parameters['dataframe'][fields['number'][0]].max()
        min_d = parameters['dataframe'][fields['number'][0]].min()
        # color normalizer
        min_gradient = min_d - (abs(max_d - min_d)*.1)
        norm = matplotlib.colors.Normalize(min_gradient, max_d)
        # generates colors from color map
        c_map = plt.cm.get_cmap(parameters['gradient'])
        c_map.set_gamma(parameters['gamma'])
        color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
            parameters['dataframe'][fields['number'][0]])
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'],
                        color=color)
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])

        if parameters['legend']:
            color_bar_ticks = parameters['dataframe'].sort_values(by=fields['number'][0])['data_label']
            if parameters['orientation'] == 'horizontal':
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                label_rotation = 0
                axin.set_xticklabels(color_bar_ticks.iloc[i] for i in [0, -1])

            else:
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.05, 0.5, 0.03, 0.4),
                                  bbox_transform=axis.transAxes)
                axin.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                label_rotation = 90
            counter = len(parameters['dataframe'][fields['number'][0]])
            if counter == 1:
                cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                                orientation=parameters['orientation'], 
                                shrink=0.2,
                                ticks=[min_d],
                                ax=axis,
                                cax=axin, pad=0.5)
            elif counter==2:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
            else:
                cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                                  values=parameters['dataframe'][fields['number'][0]].sort_values(),
                                  ticks=[min_d, max_d],
                                  orientation=parameters['orientation'],
                                  shrink=0.2, ax=axis,
                                  cax=axin, pad=0.5)
            if parameters['orientation'] == 'horizontal':
                cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
            else:
                cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
            cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'], va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig


# ----------------- area graph trending

    def data_function_area_1101(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def area_1101(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.fill_between(x=parameters['dataframe'][fields['date'][0]], 
                              y1=0, 
                              y2=parameters['dataframe'][fields['number'][0]],
                              color=parameters['single_color'])
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                              parameters['dataframe'][fields['number'][0]],
                              list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation = rotation,fontsize=parameters['data_label_font_size' ])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# --------------------- area graph trending average line

    def data_function_area_1101_average_line(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[2]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[2]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['legend_placement']='best'  
            parameter['title_background']='#555555'
            parameter['title_text_color']='white' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def area_1101_average_line(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.fill_between(x=parameters['dataframe'][fields['date'][0]], 
                              y1=0,
                              y2=parameters['dataframe'][fields['number'][0]],
                              color=parameters['single_color'])
        # draw average line
        x = axis.get_xlim()
        axis.plot(x, [parameters['average'], parameters['average']], color=parameters['center_line_color'],
                  label=None)
        axis.set_xlim(x)
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label']))):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            if i==0:
                ha='left'
            else:
                ha='center'
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha=ha,
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Average:" + average], loc=parameters['legend_placement'])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# -------------------- area graph trending median line

    def data_function_area_1101_median_line(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['Q1'] = q1
        parameter['Q3'] = q3
        parameter['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[5]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[5]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['legend_placement']='best' 
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def area_1101_median_line(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.fill_between(x=parameters['dataframe'][fields['date'][0]], 
                              y1=0, 
                              y2=parameters['dataframe'][fields['number'][0]],
                              color=parameters['single_color'])
        # draw median line
        x = axis.get_xlim()
        axis.plot(x, [parameters['median'],
                      parameters['median']], color=parameters['center_line_color'],label=None)
        axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                          color='#C0C0C0', alpha=0.8)
        axis.set_xlim(x)
        
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label']))):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            if i==0:
                ha='left'
            else:
                ha='center'
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha=ha,
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            median=dlf.data_label_formater(df=parameters['dataframe'], col='median', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Median:" + median], loc=parameters['legend_placement'])
        else:
            axis.legend(labels=None)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

    def data_function_area_1101_percent_inc_dec(self, data, customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        # compare to previous value for % inc dec
        previous_value = None
        max_value = df[number_selection].max()
        y_zoom_margin = abs(max_value) * 0.1
        parameter['y_zoom_margin'] = y_zoom_margin
        df['percent_inc_dec_mdg'] = 0.0
        for index, row in df.iterrows():
            if previous_value == None:
                df.loc[index, 'percent_inc_dec_mdg'] = 0.0
                df.loc[index, 'arrow_flag_mdg'] = 'None'
                diff = 0
            else:
                diff = row[number_selection] - previous_value
                df.loc[index, 'percent_inc_dec_mdg'] = round(diff / previous_value, 3)
            previous_value = row[number_selection]
            if diff > 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Positive'
            elif diff < 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Negative'
            else:
                df.loc[index, 'arrow_flag_mdg'] = 'None'
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[7]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe'][number_selection].min()
                max_d = parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'arrow_color_down' in customizations.keys():
                parameter['arrow_color_down'] = customizations['arrow_color_down']
            else:
                parameter['arrow_color_down'] = '#ff684c'
            if 'arrow_color_up' in customizations.keys():
                parameter['arrow_color_up'] = customizations['arrow_color_up']
            else:
                parameter['arrow_color_up'] = '#8ace7e'
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None
            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None
            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_percent_font_size' in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[7]
            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['arrow_color_down'] = '#ff684c'
            parameter['arrow_color_up'] = '#8ace7e'
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_percent_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection,
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def area_1101_percent_inc_dec(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.fill_between(x=parameters['dataframe'][fields['date'][0]],
                          y1=0,
                          y2=parameters['dataframe'][fields['number'][0]],
                          color=parameters['single_color'])
        size = parameters['dataframe']['arrow_flag_mdg'].size
        dlf = DataLabelFormatter()
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_inc_dec_mdg',
                                                 format_=parameters['data_label_format_percent'],
                                                 frequency=parameters['data_label_frequency_percent'],
                                                 type_=parameters['data_label_type_percent'],
                                                 decimal=parameters['data_label_decimal_percent'])['data_label']
        for x, percent, flag in zip(range(size), percent_labels,
                                    parameters['dataframe']['arrow_flag_mdg']):
            if x==0:
                continue
            if flag == 'Positive' or flag == 'Negative':
                if flag == 'Positive':
                    text = parameters['y_limit'][1]
                    arrow = parameters['y_limit'][1] + parameters['y_zoom_margin']
                    color = parameters['arrow_color_up']
                elif flag == 'Negative':
                    text = parameters['y_limit'][1] + parameters['y_zoom_margin']
                    arrow = parameters['y_limit'][1]
                    color = parameters['arrow_color_down']
                axis.text(x=x,
                          y=parameters['y_limit'][1] + parameters['y_zoom_margin'],
                          s=percent,
                          color=color,
                          ha='center',
                          va='bottom',fontsize=parameters['data_label_percent_font_size' ])
                axis.annotate('',
                              xy=[x, arrow],
                              xytext=[x, text],
                              color=color, ha='center',
                              arrowprops=dict(fc=color, ec=color))
            else:
                axis.text(x=x,
                          y=parameters['y_limit'][1],
                          s=percent,fontsize=parameters['data_label_font_size' ])

        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1] + abs(parameters['y_zoom_margin'] * 2))
            else:
                axis.set_ylim(parameters['y_limit'][0],
                              parameters['y_limit'][1] + abs(parameters['y_zoom_margin'] * 2))
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, parameters['y_limit'][1] + abs(parameters['y_zoom_margin'] * 2)])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               parameters['y_limit'][1] + abs(parameters['y_zoom_margin'] * 2)])
        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# -------------------- line graph trending

    def data_function_line_1101(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def line_1101(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y=fields['number'][0],
                                     color=parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:

            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0,y_limit[1]+parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0]-parameters['data_label_offset'],
                               y_limit[1]+parameters['data_label_offset']])


        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# --------------------- line graph trending average line

    def data_function_line_1101_average_line(self, data,customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            date_selection = self.fields['date'][0]
            character_selection = self.fields['date'][0]
            df = data[0].copy()
            average = df[number_selection].mean()
            median = df[number_selection].median()
            parameter['dataframe'] = df
            print(parameter['dataframe'])
            parameter['average'] = average
            parameter['median'] = median
            df_with_extras = df
            df_with_extras['average'] = average
            df_with_extras['median'] = median
            parameter['df_with_extras'] = df_with_extras
            if customizations != None:
                if 'title' in customizations:
                    parameter['title'] = customizations['title']
                else:
                    parameter['title']=self.titles()[2]
                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d=parameter['dataframe'][number_selection].min()
                    max_d=parameter['dataframe'][number_selection].max()
                    if min_d<0:
                        parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                    else:
                        parameter['y_limit'] =[0,max_d+max_d*0.2]                    

                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = int(customizations['data_label_degree'])
                else:
                    parameter['data_label_degree'] = 0

                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = 'blue'
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0

                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'

                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = True

                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'

                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if  'legend_placement' in customizations.keys():
                    parameter['legend_placement']=customizations['legend_placement']
                else:
                    parameter['legend_placement']='best'
                if 'title_background' in customizations.keys():
                    parameter['title_background']=customizations['title_background']
                else:
                    parameter['title_background']='#555555'
                
                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color']=customizations['title_text_color']
                else:
                    parameter['title_text_color']='white'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None
                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None
                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None
                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'single_color' in customizations.keys():
                    parameter['single_color'] = customizations['single_color']
                else:
                    parameter['single_color'] = '#5FA2CE'
                if 'date_format' in customizations.keys():
                    parameter['date_format'] = customizations['date_format']
                else:
                    if self.fields['date_level'][0] == 'Exact Date':
                        parameter['date_format'] = 'short date'
                    elif self.fields['date_level'][0] == 'Week':
                        parameter['date_format'] = 'week'
                    elif self.fields['date_level'][0] == 'Month':
                        parameter['date_format'] = 'short month'
                    elif self.fields['date_level'][0] == 'Year':
                        parameter['date_format'] = 'year'
                    elif self.fields['date_level'][0] == 'Quarter':
                       parameter['date_format'] = 'short quarter'
                if 'label_font_size' in customizations.keys():
                    parameter['label_font_size']=customizations['label_font_size']
                else:
                    parameter['label_font_size']=12
                if 'tick_font_size' in customizations.keys():
                    parameter['tick_font_size' ] = customizations['tick_font_size']
                else:
                    parameter['tick_font_size' ] =12
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                    dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
                else:
                    parameter['x_tick_degree']=self.tick_degree(parameter)
            else:
                parameter['title']=self.titles()[2]
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['color_palette'] = 'blue'
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = True
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None                
                parameter['y_on'] = True
                parameter['legend_placement']='best' 
                parameter['title_background']='#555555'
                parameter['title_text_color']='white' 
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['single_color'] = '#5FA2CE'
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
                parameter['label_font_size']=12
                parameter['tick_font_size' ] =12
                parameter['data_label_font_size'] =12
                parameter['title_font_size']=18 
                parameter['x_tick_degree']=self.tick_degree(parameter)
                print(parameter['dataframe'])
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])             
            print("data function")
            return parameter

    def line_1101_average_line(self, parameters, kind, fields):
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            parameters['dataframe'].plot(kind='line',
                                         x=fields['date'][0],
                                         y=fields['number'][0],
                                         color=parameters['single_color'],
                                         ax=axis,
                                         legend=None)
            # draw average line
            x = axis.get_xlim()
            axis.plot([x[0], x[1]], [parameters['average'],
                                     parameters['average']], color=parameters['center_line_color'],
                      label=None)
            axis.set_xlim(x)
            
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
            for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                                   parameters['dataframe'][fields['number'][0]],
                                   list(parameters['dataframe']['data_label']))):
                if y < 0:
                    rotation = -parameters['data_label_degree']
                    va = 'top'
                    y = y - parameters['data_label_offset']
                else:
                    rotation = parameters['data_label_degree']
                    va = 'bottom'
                    y = y + parameters['data_label_offset']
                if i==0:
                    ha='left'
                else:
                    ha='center'
                axis.text(x=x,
                          y=y,
                          s=label,
                          ha=ha,
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            if parameters['legend']:
                dlf = DataLabelFormatter()
                average = dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
                lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
                axis.legend(lines, ["Average:" + average], loc=parameters['legend_placement'])
            # x,y label and x ticks
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
            axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            dlf = DataLabelFormatter()
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.4625, va='top')
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width=1200)
            return axis, self.fig

# -------------------- line graph trending median line

    def data_function_line_1101_median_line(self, data,customizations=None, flag=False, where_func=False):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['Q1'] = q1
        parameter['Q3'] = q3
        parameter['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[5]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'             
            parameter['legend_placement']='best' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def line_1101_median_line(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y=fields['number'][0],
                                     color = parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        # draw median line
        x = axis.get_xlim()
        axis.plot(x, [parameters['median'], parameters['median']], color=parameters['center_line_color'],
                  label=None)
        axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                          color='#C0C0C0', alpha=0.8)
        axis.set_xlim(x)
        
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label']))):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            if i==0:
                ha='left'
            else:
                ha='center'
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha=ha,
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            median=dlf.data_label_formater(df=parameters['dataframe'], col='median', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Median:" + median], loc=parameters['legend_placement'])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# -------------------- line graph trending percent increase/decrease

    def data_function_line_1101_percent_inc_dec(self, data ,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        # compare to previous value for % inc dec
        previous_value = None
        max_value = df[number_selection].max()
        y_zoom_margin = abs(max_value) * 0.1
        parameter['y_zoom_margin'] = y_zoom_margin
        df['percent_inc_dec_mdg'] = 0.0
        
        for index, row in df.iterrows():
            if previous_value == None:
                df.loc[index, 'percent_inc_dec_mdg'] = 0.0
                df.loc[index, 'arrow_flag_mdg'] = 'None'
                diff = 0
            else:
                diff = row[number_selection] - previous_value
                df.loc[index, 'percent_inc_dec_mdg'] = round(diff / previous_value, 3)
            previous_value = row[number_selection]
            if diff > 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Positive'
            elif diff < 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Negative'
            else:
                df.loc[index, 'arrow_flag_mdg'] = 'None'
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[7]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe'][number_selection].min()
                max_d = parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'arrow_color_down' in customizations.keys():
                parameter['arrow_color_down'] = customizations['arrow_color_down']
            else:
                parameter['arrow_color_down'] = '#ff684c'
            if 'arrow_color_up' in customizations.keys():
                parameter['arrow_color_up'] = customizations['arrow_color_up']
            else:
                parameter['arrow_color_up'] = '#8ace7e'

            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None
            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None
            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_percent_font_size' in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[7]
            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['arrow_color_down'] = '#ff684c'
            parameter['arrow_color_up'] = '#8ace7e'
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_percent_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection,
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def line_1101_percent_inc_dec(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y=fields['number'][0],
                                     color=parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        x = axis.get_xlim()
        size = parameters['dataframe']['arrow_flag_mdg'].size
        dlf = DataLabelFormatter()
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_inc_dec_mdg',
                                                 format_=parameters['data_label_format_percent'],
                                                 frequency=parameters['data_label_frequency_percent'],
                                                 type_=parameters['data_label_type_percent'],
                                                 decimal=parameters['data_label_decimal_percent'])['data_label']
        for x, percent, flag in zip(range(size), percent_labels,
                                    parameters['dataframe']['arrow_flag_mdg']):
            if x==0:
                continue
            if flag == 'Positive' or flag == 'Negative':
                if flag == 'Positive':
                    text = parameters['y_limit'][1]
                    arrow = parameters['y_limit'][1] + parameters['y_zoom_margin']
                    color = parameters['arrow_color_up']
                elif flag == 'Negative':
                    text = parameters['y_limit'][1] + parameters['y_zoom_margin']
                    arrow = parameters['y_limit'][1]
                    color = parameters['arrow_color_down']
                axis.text(x=x,
                          y=parameters['y_limit'][1] + parameters['y_zoom_margin'],
                          s=percent,
                          color=color,
                          ha='center',
                          va='bottom',fontsize=parameters['data_label_percent_font_size' ])
                axis.annotate('',
                              xy=[x, arrow],
                              xytext=[x, text],
                              color=color, ha='center',
                              arrowprops=dict(fc=color, ec=color))
            else:
                axis.text(x=x,
                          y=parameters['y_limit'][1],
                          s=percent,fontsize=parameters['data_label_font_size' ])
        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1]+abs(parameters['y_zoom_margin']*2))
            else:
                axis.set_ylim(parameters['y_limit'][0],
                              parameters['y_limit'][1]+abs(parameters['y_zoom_margin']*2))
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, parameters['y_limit'][1]+abs(parameters['y_zoom_margin']*2)])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               parameters['y_limit'][1]+abs(parameters['y_zoom_margin']*2)])


        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# -------------------- line graph trending zoom

    def data_function_line_1101_zoom(self, data,customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            date_selection = self.fields['date'][0]
            character_selection = self.fields['date'][0]
            df = data[0].copy()
            average = df[number_selection].mean()
            median = df[number_selection].median()
            parameter['dataframe'] = df
            print(parameter['dataframe'])
            parameter['average'] = average
            parameter['median'] = median
            df_with_extras = df
            df_with_extras['average'] = average
            df_with_extras['median'] = median
            parameter['df_with_extras'] = df_with_extras
            # zoom graph y min and max calculations
            max_value = df[number_selection].max()
            min_value = df[number_selection].min()
            y_zoom_margin = abs(max_value) * .2
            y_top = max_value + y_zoom_margin
            y_bottom = min_value - y_zoom_margin
            parameter['y_top'] = y_top
            parameter['y_bottom'] = y_bottom
            if customizations != None:
                if 'title' in customizations:
                    parameter['title'] = customizations['title']
                else:
                    parameter['title']=self.titles()[0]
                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d=parameter['dataframe'][number_selection].min()
                    max_d=parameter['dataframe'][number_selection].max()
                    if min_d<0:
                        parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                    else:
                        parameter['y_limit'] =[0,max_d+max_d*0.2]                    

                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = int(customizations['data_label_degree'])
                else:
                    parameter['data_label_degree'] = 0

                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = 'blue'
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0

                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'

                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = True

                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'

                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if 'title_background' in customizations.keys():
                    parameter['title_background']=customizations['title_background']
                else:
                    parameter['title_background']='#555555'
                
                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color']=customizations['title_text_color']
                else:
                    parameter['title_text_color']='white'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None
                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None
                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None
                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'single_color' in customizations.keys():
                    parameter['single_color'] = customizations['single_color']
                else:
                    parameter['single_color'] = '#5FA2CE'
                if 'date_format' in customizations.keys():
                    parameter['date_format'] = customizations['date_format']
                else:
                    if self.fields['date_level'][0] == 'Exact Date':
                        parameter['date_format'] = 'short date'
                    elif self.fields['date_level'][0] == 'Week':
                        parameter['date_format'] = 'week'
                    elif self.fields['date_level'][0] == 'Month':
                        parameter['date_format'] = 'short month'
                    elif self.fields['date_level'][0] == 'Year':
                        parameter['date_format'] = 'year'
                    elif self.fields['date_level'][0] == 'Quarter':
                        parameter['date_format'] = 'short quarter'
                if 'label_font_size' in customizations.keys():
                    parameter['label_font_size']=customizations['label_font_size']
                else:
                    parameter['label_font_size']=12
                if 'tick_font_size' in customizations.keys():
                    parameter['tick_font_size' ] = customizations['tick_font_size']
                else:
                    parameter['tick_font_size' ] =12
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                    dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
                    
                else:
                    parameter['x_tick_degree']=self.tick_degree(parameter)
            else:
                parameter['title']=self.titles()[0]
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['color_palette'] = 'blue'
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = True
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None                
                parameter['y_on'] = True
                parameter['title_background']='#555555'
                parameter['title_text_color']='white'
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['single_color'] = '#5FA2CE'
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
                parameter['label_font_size']=12
                parameter['tick_font_size' ] =12
                parameter['data_label_font_size' ] =12
                parameter['title_font_size']=18 
                parameter['x_tick_degree']=self.tick_degree(parameter)
                print(parameter['dataframe'])
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])             
            print("data function")
            return parameter

    def line_1101_zoom(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y=fields['number'][0],
                                     color=parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        axis.set_ylim(parameters['y_bottom'],parameters['y_top'])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# --------------------- line graph trending average line zoom

    def data_function_line_1101_average_line_zoom(self, data,customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            date_selection = self.fields['date'][0]
            character_selection = self.fields['date'][0]
            df = data[0].copy()
            average = df[number_selection].mean()
            median = df[number_selection].median()
            parameter['dataframe'] = df
            print(parameter['dataframe'])
            parameter['average'] = average
            parameter['median'] = median
            df_with_extras = df
            df_with_extras['average'] = average
            df_with_extras['median'] = median
            parameter['df_with_extras'] = df_with_extras
            # zoom graph y min and max calculations
            max_value = df[number_selection].max()
            min_value = df[number_selection].min()
            y_zoom_margin = abs(max_value) * .2
            y_top = max_value + y_zoom_margin
            y_bottom = min_value - y_zoom_margin
            parameter['y_top'] = y_top
            parameter['y_bottom'] = y_bottom
            if customizations != None:
                if 'title' in customizations:
                    parameter['title'] = customizations['title']
                else:
                    parameter['title']=self.titles()[2]
                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d=parameter['dataframe'][number_selection].min()
                    max_d=parameter['dataframe'][number_selection].max()
                    if min_d<0:
                        parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                    else:
                        parameter['y_limit'] =[0,max_d+max_d*0.2]                    

                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = int(customizations['data_label_degree'])
                else:
                    parameter['data_label_degree'] = 0

                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = 'blue'
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0

                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'

                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = True

                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['date'][0].replace('_',' ')

                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'

                
                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if  'legend_placement' in customizations.keys():
                    parameter['legend_placement']=customizations['legend_placement']
                else:
                    parameter['legend_placement']='best'
                if 'title_background' in customizations.keys():
                    parameter['title_background']=customizations['title_background']
                else:
                    parameter['title_background']='#555555'
                
                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color']=customizations['title_text_color']
                else:
                    parameter['title_text_color']='white'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None
                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None
                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None
                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'single_color' in customizations.keys():
                    parameter['single_color'] = customizations['single_color']
                else:
                    parameter['single_color'] = '#5FA2CE'
                if 'date_format' in customizations.keys():
                    parameter['date_format'] = customizations['date_format']
                else:
                    if self.fields['date_level'][0] == 'Exact Date':
                        parameter['date_format'] = 'short date'
                    elif self.fields['date_level'][0] == 'Week':
                        parameter['date_format'] = 'week'
                    elif self.fields['date_level'][0] == 'Month':
                        parameter['date_format'] = 'short month'
                    elif self.fields['date_level'][0] == 'Year':
                        parameter['date_format'] = 'year'
                    elif self.fields['date_level'][0] == 'Quarter':
                        parameter['date_format'] = 'short quarter'
                if 'label_font_size' in customizations.keys():
                    parameter['label_font_size']=customizations['label_font_size']
                else:
                    parameter['label_font_size']=12
                if 'tick_font_size' in customizations.keys():
                    parameter['tick_font_size' ] = customizations['tick_font_size']
                else:
                    parameter['tick_font_size' ] =12
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                    dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
                else:
                    parameter['x_tick_degree']=self.tick_degree(parameter)
                
            else:
                parameter['title']=self.titles()[2]
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['color_palette'] = 'blue'
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = True
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None                
                parameter['y_on'] = True
                parameter['title_background']='#555555'
                parameter['title_text_color']='white'  
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['single_color'] = '#5FA2CE'
                print(parameter['dataframe'])
                parameter['legend_placement']='best'
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
                parameter['label_font_size']=12
                parameter['tick_font_size' ] =12
                parameter['data_label_font_size' ] =12
                parameter['title_font_size']=18 
                parameter['x_tick_degree']=self.tick_degree(parameter)
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])             
            print("data function")
            return parameter

    def line_1101_average_line_zoom(self, parameters, kind, fields):
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            parameters['dataframe'].plot(kind='line',
                                         x=fields['date'][0],
                                         y=fields['number'][0],
                                         color=parameters['single_color'],
                                         ax=axis,
                                         legend=None)
            # draw average line
            x = axis.get_xlim()
            axis.plot(x, [parameters['average'], parameters['average']], color=parameters['center_line_color'],
                  label=None)
            axis.set_xlim(x)
            axis.set_ylim(parameters['y_limit'])
            for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                                   parameters['dataframe'][fields['number'][0]],
                                   list(parameters['dataframe']['data_label']))):
                if y < 0:
                    rotation = -parameters['data_label_degree']
                    va = 'top'
                    y = y - parameters['data_label_offset']
                else:
                    rotation = parameters['data_label_degree']
                    va = 'bottom'
                    y = y + parameters['data_label_offset']
                if i==0:
                    ha='left'
                else:
                    ha='center'
                axis.text(x=x,
                          y=y,
                          s=label,
                          ha=ha,
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            if parameters['legend']:
                dlf = DataLabelFormatter()
                average= dlf.data_label_formater(df=parameters['dataframe'], col='average', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
                print(average)
                lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
                axis.legend(lines, ["Average:" + average], loc=parameters['legend_placement'])
            
            # x,y label and x ticks
            axis.set_ylim(parameters['y_bottom'], parameters['y_top'])
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
            axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            dlf = DataLabelFormatter()
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.4625)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width=1200)
            return axis, self.fig

# -------------------- line graph trending median line zoom

    def data_function_line_1101_median_line_zoom(self, data,customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            date_selection = self.fields['date'][0]
            character_selection = self.fields['date'][0]
            df = data[0].copy()
            average = df[number_selection].mean()
            parameter['dataframe'] = df
            print(parameter['dataframe'])
            parameter['average'] = average
            # median graph quartile calculations
            median = df[number_selection].median()
            q1 = float(df[number_selection].quantile([0.25]))
            q3 = float(df[number_selection].quantile([0.75]))
            df_with_extras = df
            df_with_extras['average'] = average
            df_with_extras['median'] = median
            parameter['Q1'] = q1
            parameter['Q3'] = q3
            parameter['median'] = median
            parameter['df_with_extras'] = df_with_extras
            # zoom graph y min and max calculations
            max_value = df[number_selection].max()
            min_value = df[number_selection].min()
            y_zoom_margin = abs(max_value) * .2
            y_top = max_value + y_zoom_margin
            y_bottom = min_value - y_zoom_margin
            parameter['y_top'] = y_top
            parameter['y_bottom'] = y_bottom
            if customizations != None:
                if 'title' in customizations:
                    parameter['title'] = customizations['title']
                else:
                    parameter['title']=self.titles()[5]
                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d=parameter['dataframe'][number_selection].min()
                    max_d=parameter['dataframe'][number_selection].max()
                    if min_d<0:
                        parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                    else:
                        parameter['y_limit'] =[0,max_d+max_d*0.2]                    

                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = int(customizations['data_label_degree'])
                else:
                    parameter['data_label_degree'] = 0

                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = 'blue'
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0

                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'

                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = True

                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'

                
                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if  'legend_placement' in customizations.keys():
                    parameter['legend_placement']=customizations['legend_placement']
                else:
                    parameter['legend_placement']='best'
                if 'title_background' in customizations.keys():
                    parameter['title_background']=customizations['title_background']
                else:
                    parameter['title_background']='#555555'
                
                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color']=customizations['title_text_color']
                else:
                    parameter['title_text_color']='white'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None
                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None
                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None
                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'single_color' in customizations.keys():
                    parameter['single_color'] = customizations['single_color']
                else:
                    parameter['single_color'] = '#5FA2CE'
                if 'date_format' in customizations.keys():
                    parameter['date_format'] = customizations['date_format']
                else:
                    if self.fields['date_level'][0] == 'Exact Date':
                        parameter['date_format'] = 'short date'
                    elif self.fields['date_level'][0] == 'Week':
                        parameter['date_format'] = 'week'
                    elif self.fields['date_level'][0] == 'Month':
                        parameter['date_format'] = 'short month'
                    elif self.fields['date_level'][0] == 'Year':
                        parameter['date_format'] = 'year'
                    elif self.fields['date_level'][0] == 'Quarter':
                        parameter['date_format'] = 'short quarter'
                if 'label_font_size' in customizations.keys():
                    parameter['label_font_size']=customizations['label_font_size']
                else:
                    parameter['label_font_size']=12
                if 'tick_font_size' in customizations.keys():
                    parameter['tick_font_size' ] = customizations['tick_font_size']
                else:
                    parameter['tick_font_size' ] =12
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                    dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
                else:
                    parameter['x_tick_degree']=self.tick_degree(parameter)
            else:
                parameter['title']=self.titles()[5]
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['color_palette'] = 'blue'
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = True
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None                
                parameter['y_on'] = True
                parameter['legend_placement']='best'  
                parameter['title_background']='#555555'
                parameter['title_text_color']='white'  
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['single_color'] = '#5FA2CE'
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
                parameter['label_font_size']=12
                parameter['tick_font_size' ] =12
                parameter['data_label_font_size' ] =12
                parameter['title_font_size']=18 
                parameter['x_tick_degree']=self.tick_degree(parameter)
                print(parameter['dataframe'])
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])             
            print("data function")
            return parameter

    def line_1101_median_line_zoom(self, parameters, kind, fields):
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            parameters['dataframe'].plot(kind='line',
                                         x=fields['date'][0],
                                         y=fields['number'][0],
                                         color=parameters['single_color'],
                                         ax=axis,
                                         legend=None)
            # draw median line
            x = axis.get_xlim()
            axis.plot(x, [parameters['median'],
                          parameters['median']], 
                      color=parameters['center_line_color'],
                      label=None)
            axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                              color='#C0C0C0', alpha=0.8,label=None)
            axis.set_xlim(x)
            axis.set_ylim(parameters['y_limit'])
            for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                                   parameters['dataframe'][fields['number'][0]],
                                   list(parameters['dataframe']['data_label']))):
                if y < 0:
                    rotation = -parameters['data_label_degree']
                    va = 'top'
                    y = y - parameters['data_label_offset']
                else:
                    rotation = parameters['data_label_degree']
                    va = 'bottom'
                    y = y + parameters['data_label_offset']
                if i==0:
                    ha='left'
                else:
                    ha='center'
                axis.text(x=x,
                          y=y,
                          s=label,
                          ha=ha,
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            if parameters['legend']:
                dlf = DataLabelFormatter()
                median=dlf.data_label_formater(df=parameters['dataframe'], col='median', 
                                           format_=None, frequency=None, 
                                           type_='normal', decimal=None)['data_label'].iloc[0]
                lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
                axis.legend(lines, ["Median:" + median], loc=parameters['legend_placement'])
           
            # x,y label and x ticks
            axis.set_ylim(parameters['y_bottom'], parameters['y_top'])
            axis.set_xlabel(parameters['x_label'])
            axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
            axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            axis.set_ylabel(parameters['y_label'])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            dlf = DataLabelFormatter()
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.4625, va='top')
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width=1200)
            return axis, self.fig

# -------------------- line graph trending percent increase/decrease zoom

    def data_function_line_1101_percent_inc_dec_zoom(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        # compare to previous value for % inc dec
        previous_value = None
        max_value = df[number_selection].max()
        y_zoom_margin = abs(max_value) * .1
        parameter['y_zoom_margin'] = y_zoom_margin
        df['percent_inc_dec_mdg'] = 0.0
        
        for index, row in df.iterrows():
            if previous_value == None:
                df.loc[index, 'percent_inc_dec_mdg'] = 0.0
                df.loc[index, 'arrow_flag_mdg'] = 'None'
                diff = 0
            else:
                diff = row[number_selection] - previous_value
                df.loc[index, 'percent_inc_dec_mdg'] = round(diff / previous_value,3)
            previous_value = row[number_selection]
            if diff > 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Positive'
            elif diff < 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Negative'
            else:
                df.loc[index, 'arrow_flag_mdg'] = 'None'
        # zoom graph y min and max calculations
        max_value = df[number_selection].max()
        min_value = df[number_selection].min()
        y_zoom_margin = abs(max_value) * .2
        y_top = max_value + y_zoom_margin
        y_bottom = min_value - y_zoom_margin
        parameter['y_top'] = y_top
        parameter['y_bottom'] = y_bottom
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[7]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'arrow_color_down' in customizations.keys():
                parameter['arrow_color_down'] = customizations['arrow_color_down']
            else:
                parameter['arrow_color_down'] = '#ff684c'
            if 'arrow_color_up' in customizations.keys():
                parameter['arrow_color_up'] = customizations['arrow_color_up']
            else:
                parameter['arrow_color_up'] = '#8ace7e'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
                
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_percent_font_size' in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[7]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]            
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['arrow_color_down'] = '#ff684c'
            parameter['arrow_color_up'] = '#8ace7e'
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'  
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_percent_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def line_1101_percent_inc_dec_zoom(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y=fields['number'][0],
                                     color=parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        axis.set_ylim((parameters['y_bottom'], parameters['y_top'] + abs(parameters['y_zoom_margin']*2)))
        size = parameters['dataframe']['arrow_flag_mdg'].size
        dlf = DataLabelFormatter()
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_inc_dec_mdg',
                                                 format_=parameters['data_label_format_percent'],
                                                 frequency=parameters['data_label_frequency_percent'],
                                                 type_=parameters['data_label_type_percent'],
                                                 decimal=parameters['data_label_decimal_percent'])['data_label']
        for x, percent, flag in zip(range(size), percent_labels,
                                    parameters['dataframe']['arrow_flag_mdg']):
            if x==0:
                continue
            if flag == 'Positive' or flag == 'Negative':
                if flag == 'Positive':
                    text = parameters['y_top']
                    arrow = parameters['y_top']+parameters['y_zoom_margin']
                    color = parameters['arrow_color_up']
                elif flag == 'Negative':
                    text = parameters['y_top']+parameters['y_zoom_margin']
                    arrow = parameters['y_top']
                    color = parameters['arrow_color_down']
                axis.text(x=x,
                      y=parameters['y_top'] + parameters['y_zoom_margin'],
                      s=percent,
                      color=color,
                      ha='center',
                      va='bottom',fontsize=parameters['data_label_percent_font_size' ])
                axis.annotate('',
                          xy=[x, arrow],
                          xytext=[x,text],
                          color=color, ha='center',
                          arrowprops=dict(fc=color, ec=color))
            else:
                axis.text(x=x,
                          y=parameters['y_limit'][1],
                          s=percent,fontsize=parameters['data_label_font_size' ])
        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])

        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig
   
    # --------------------- bar graph with percent increase decrease

    def data_function_bar_1101_percent_inc_dec(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        # compare to previous value for % inc dec
        previous_value = None
        max_value = df[number_selection].max()
        y_zoom_margin = abs(max_value) * .1
        parameter['y_zoom_margin'] = y_zoom_margin
        df['percent_inc_dec_mdg'] = 0.0
        for index, row in df.iterrows():
            if previous_value == None:
                df.loc[index, 'percent_inc_dec_mdg'] = 0.0
                df.loc[index, 'arrow_flag_mdg'] = 'None'
                diff = 0
            else:
                diff = row[number_selection] - previous_value
                df.loc[index, 'percent_inc_dec_mdg'] = round(diff / previous_value,3)
            previous_value = row[number_selection]
            if diff > 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Positive'
            elif diff < 0:
                df.loc[index, 'arrow_flag_mdg'] = 'Negative'
            else:
                df.loc[index, 'arrow_flag_mdg'] = 'None'
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[7]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                  

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'arrow_color_down' in customizations.keys():
                parameter['arrow_color_down'] = customizations['arrow_color_down']
            else:
                parameter['arrow_color_down'] = '#ff684c'
            if 'arrow_color_up' in customizations.keys():
                parameter['arrow_color_up'] = customizations['arrow_color_up']
            else:
                parameter['arrow_color_up'] = '#8ace7e'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_percent_font_size' in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[7]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]              
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            print(parameter['dataframe'])
            parameter['arrow_color_down'] = '#ff684c'
            parameter['arrow_color_up'] = '#8ace7e'
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_percent_font_size' ] =12
            parameter['title_font_size']=18
            parameter['x_tick_degree']=self.tick_degree(parameter)
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def bar_1101_percent_inc_dec(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove th right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        axis.set_ylim((parameters['y_limit'][0], parameters['y_limit'][1] + abs(parameters['y_zoom_margin']*2)))
        dlf = DataLabelFormatter()
        size = parameters['dataframe']['arrow_flag_mdg'].size
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_inc_dec_mdg',
                                                 format_=parameters['data_label_format_percent'],
                                                 frequency=parameters['data_label_frequency_percent'],
                                                 type_=parameters['data_label_type_percent'],
                                                 decimal=parameters['data_label_decimal_percent'])['data_label']
        for x, percent, flag in zip(range(size), percent_labels,
                                    parameters['dataframe']['arrow_flag_mdg']):
            if x==0:
                continue
            if flag == 'Positive' or flag == 'Negative':
                if flag == 'Positive':
                    text=parameters['y_limit'][1]
                    arrow = parameters['y_limit'][1]+parameters['y_zoom_margin']
                    color = parameters['arrow_color_up']
                elif flag == 'Negative':
                    text=parameters['y_limit'][1]+parameters['y_zoom_margin']
                    arrow=parameters['y_limit'][1]
                    color=parameters['arrow_color_down']
                axis.text(x=x,
                      y=parameters['y_limit'][1] +parameters['y_zoom_margin'],
                      s=percent,
                      color=color,
                      ha='center',
                      va='bottom',fontsize=parameters['data_label_percent_font_size' ])
                axis.annotate('',
                          xy=[x, arrow],
                          xytext=[x,text],
                          color=color, ha='center',
                          arrowprops=dict(fc=color, ec=color))
            else:
                axis.text(x=x,
                          y=parameters['y_limit'][1],
                          s=percent,fontsize=parameters['data_label_font_size' ])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# -------------------- pie graph

    def data_function_pie_1101(self, data,customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            date_selection = self.fields['date'][0]
            character_selection = self.fields['date'][0]
            df = data[0].copy()
            average = df[number_selection].mean()
            median = df[number_selection].median()
            # pie/donut graph % of total calculations
            total = df[number_selection].sum()
            df['total_mdg'] = total
            df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
            parameter['dataframe'] = df
            print(parameter['dataframe'])
            parameter['average'] = average
            parameter['median'] = median
            df_with_extras = df
            df_with_extras['average'] = average
            df_with_extras['median'] = median
            parameter['df_with_extras'] = df_with_extras
            
            print(df[number_selection])
            if customizations != None:
                if 'title' in customizations:
                    parameter['title'] = customizations['title']
                else:
                    parameter['title']=self.titles()[0]
                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d=parameter['dataframe'][number_selection].min()
                    max_d=parameter['dataframe'][number_selection].max()
                    if min_d<0:
                        parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                    else:
                        parameter['y_limit'] =[0,max_d+max_d*0.2]                      

                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = int(customizations['data_label_degree'])
                else:
                    parameter['data_label_degree'] = 0

                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = 'blue'
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0

                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'

                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = False

                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['date'][0].replace('_',' ')

                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'

                
                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if 'title_background' in customizations.keys():
                    parameter['title_background']=customizations['title_background']
                else:
                    parameter['title_background']='#555555'
                
                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color']=customizations['title_text_color']
                else:
                    parameter['title_text_color']='white'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None
                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None
                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None
                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'data_label_format_percent' in customizations.keys():
                    parameter['data_label_format_percent'] = customizations['data_label_format_percent']
                else:
                    parameter['data_label_format_percent'] = None

                if 'data_label_frequency_percent' in customizations.keys():
                    parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
                else:
                    parameter['data_label_frequency_percent'] = None

                if 'data_label_decimal_percent' in customizations.keys():
                    parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
                else:
                    parameter['data_label_decimal_percent'] = None

                if 'data_label_type_percent' in customizations.keys():
                    parameter['data_label_type_percent'] = customizations['data_label_type_percent']
                else:
                    parameter['data_label_type_percent'] = 'percentage'
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
                if 'date_format' in customizations.keys():
                    parameter['date_format'] = customizations['date_format']
                else:
                    if self.fields['date_level'][0] == 'Exact Date':
                        parameter['date_format'] = 'short date'
                    elif self.fields['date_level'][0] == 'Week':
                        parameter['date_format'] = 'week'
                    elif self.fields['date_level'][0] == 'Month':
                        parameter['date_format'] = 'short month'
                    elif self.fields['date_level'][0] == 'Year':
                        parameter['date_format'] = 'year'
                    elif self.fields['date_level'][0] == 'Quarter':
                        parameter['date_format'] = 'short quarter'
                if  'legend_placement' in customizations.keys():
                    parameter['legend_placement']=customizations['legend_placement']
                else:
                    parameter['legend_placement']='best'
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'data_label_percent_font_size'  in customizations.keys():
                    parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
                else:
                    parameter['data_label_percent_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                    dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
                else:
                    parameter['x_tick_degree']=90
            else:
                parameter['title']=self.titles()[0]
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                  
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['color_palette'] = 'blue'
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = False
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None                
                parameter['y_on'] = True
                parameter['title_background']='#555555'
                parameter['title_text_color']='white'  
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['data_label_type_percent'] = 'percentage'
                parameter['data_label_decimal_percent'] = None
                parameter['data_label_frequency_percent'] = None
                parameter['data_label_format_percent'] = None
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
                parameter['legend_placement']='best'
                parameter['label_font_size']=12
                parameter['data_label_percent_font_size' ] =12
                parameter['title_font_size']=18 
                parameter['x_tick_degree']=90
                print(parameter['dataframe'])
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])             
            print("data function")
            return parameter

    def pie_1101(self, parameters, kind, fields):
        dateformater.parse_date(parameters['dataframe'], fields['date'][0],
                                    parameters['date_format'])
        if parameters['legend']:
            lines = []
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            labels = ['']*len([parameters['dataframe'][fields['date'][0]].iloc[i] for i in
                         parameters['dataframe']['percent_of_total_mdg'].index
                         if parameters['dataframe']['percent_of_total_mdg'].iloc[i] > 0])
            if parameters['legend_placement'] == 'outside':
                self.fig, ax = plt.subplots(1, 2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8, 0.2]),
                                        figsize=(8, 8))
                ax[1].legend(lines, parameters['dataframe'][fields['date'][0] + '_formatted'], bbox_to_anchor=[1, 0, 0.2, 1])
                # axis self.ax1 to axis
                axis = self.ax1 = ax[0]
                # remove the right ,top and bottom spines
                ax[1].spines['right'].set_visible(False)
                ax[1].spines['top'].set_visible(False)
                ax[1].spines['bottom'].set_visible(False)
                ax[1].spines['left'].set_visible(False)
                ax[1].get_yaxis().set_visible(False)
                ax[1].get_xaxis().set_visible(False)
            else:
                self.fig = Figure((8, 8), dpi=120)
                self.ax1 = self.fig.add_subplot()
                axis = self.ax1
                axis.legend(lines, parameters['dataframe'][fields['date'][0] + '_formatted'],loc=parameters['legend_placement'])
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            labels = [parameters['dataframe'][fields['date'][0] + '_formatted'].iloc[i] for i in parameters['dataframe']['percent_of_total_mdg'].index
                           if parameters['dataframe']['percent_of_total_mdg'].iloc[i]>0]
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
        
        dlf = DataLabelFormatter()
        axis.pie(x=[i for i in parameters['dataframe']['percent_of_total_mdg'] if i>0],
                   labels= labels,
                   colors=parameters['color_palette'],
                   autopct=lambda x: dlf.data_label_formater(pd.DataFrame([x/100],columns=['percentage']), col='percentage',
                                                           format_=parameters['data_label_format_percent'],
                                                           frequency=parameters['data_label_frequency_percent'],
                                                           type_=parameters['data_label_type_percent'],
                                                           decimal=parameters['data_label_decimal_percent'])['data_label'].iloc[0],
                   textprops=dict(fontsize=parameters['data_label_percent_font_size' ]))  

        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

# -------------------- donut graph

    def data_function_donut_1101(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        # pie/donut graph % of total calculations
        total = df[number_selection].sum()
        df['total_mdg'] = total
        df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        print(df[number_selection])
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = False

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'data_label_format_total' in customizations.keys():
                parameter['data_label_format_total'] = customizations['data_label_format_total']
            else:
                parameter['data_label_format_total'] = None

            if 'data_label_frequency_total' in customizations.keys():
                parameter['data_label_frequency_total'] = customizations['data_label_frequency_total']
            else:
                parameter['data_label_frequency_total'] = None

            if 'data_label_decimal_total' in customizations.keys():
                parameter['data_label_decimal_total'] = customizations['data_label_decimal_total']
            else:
                parameter['data_label_decimal_total'] = None

            if 'data_label_type_total' in customizations.keys():
                parameter['data_label_type_total'] = customizations['data_label_type_total']
            else:
                parameter['data_label_type_total'] = 'normal'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            
            if 'data_label_percent_font_size'  in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'data_label_total_font_size' in customizations.keys():
                parameter['data_label_total_font_size'] = customizations['data_label_total_font_size']
            else:
                parameter['data_label_total_font_size'] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=90
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = False
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'     
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            parameter['data_label_type_total'] = 'normal'
            parameter['data_label_decimal_total'] = None
            parameter['data_label_frequency_total'] = None
            parameter['data_label_format_total'] = None
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['legend_placement']='best' 
            parameter['data_label_percent_font_size' ] =12
            parameter['data_label_total_font_size'] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=90
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter

    def donut_1101(self, parameters, kind, fields):
        dateformater.parse_date(parameters['dataframe'], fields['date'][0],
                                    parameters['date_format'])
        if parameters['legend']:
            lines = []
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            labels = ['']*len([parameters['dataframe'][fields['date'][0]].iloc[i] for i in
                         parameters['dataframe']['percent_of_total_mdg'].index
                         if parameters['dataframe']['percent_of_total_mdg'].iloc[i] > 0])
            if parameters['legend_placement'] == 'outside':
                self.fig, ax = plt.subplots(1, 2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8, 0.2]),
                                        figsize=(8, 8))
                ax[1].legend(lines, parameters['dataframe'][fields['date'][0] + '_formatted'], bbox_to_anchor=[1, 0, 0.2, 1])
                # axis self.ax1 to axis
                axis = self.ax1 = ax[0]
                # remove the right ,top and bottom spines
                ax[1].spines['right'].set_visible(False)
                ax[1].spines['top'].set_visible(False)
                ax[1].spines['bottom'].set_visible(False)
                ax[1].spines['left'].set_visible(False)
                ax[1].get_yaxis().set_visible(False)
                ax[1].get_xaxis().set_visible(False)
            else:
                self.fig = Figure((8, 8), dpi=120)
                self.ax1 = self.fig.add_subplot()
                axis = self.ax1
                axis.legend(lines, parameters['dataframe'][fields['date'][0] + '_formatted'],loc=parameters['legend_placement'])
                
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            labels = [parameters['dataframe'][fields['date'][0] + '_formatted'].iloc[i] for i in
                      parameters['dataframe']['percent_of_total_mdg'].index
                         if parameters['dataframe']['percent_of_total_mdg'].iloc[i] > 0]
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
        
        dlf = DataLabelFormatter()
        axis.pie(x=[i for i in parameters['dataframe']['percent_of_total_mdg'] if i > 0],
                 labels=labels,
                 colors=parameters['color_palette'],
                 autopct=lambda x: dlf.data_label_formater(pd.DataFrame([x/100],columns=['percentage']), col='percentage',
                                                           format_=parameters['data_label_format_percent'],
                                                           frequency=parameters['data_label_frequency_percent'],
                                                           type_=parameters['data_label_type_percent'],
                                                           decimal=parameters['data_label_decimal_percent'])['data_label'].iloc[0],
                wedgeprops=dict(width=0.55),pctdistance=0.7,
                textprops=dict(fontsize=parameters['data_label_percent_font_size' ]))
        axis.text(0, 0, s=dlf.data_label_formater(df=parameters['dataframe'].copy(), col='total_mdg',
                                                 format_=parameters['data_label_format_total'],
                                                 frequency=parameters['data_label_frequency_total'],
                                                 type_=parameters['data_label_type_total'],
                                                 decimal=parameters['data_label_decimal_total'])['data_label'].iloc[0],
                  ha='center', va='center',fontsize=parameters['data_label_total_font_size'])
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5,width=1200)
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        return axis, self.fig


# ------------------- trendig bar LOBF
    def data_function_bar_1101_lobf(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        median=df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average']=average
        parameter['median']=median
        df_with_extras=df
        df_with_extras['average']=average
        df_with_extras['median']=median
        parameter['df_with_extras']=df_with_extras
        
        
        if customizations != None:
            if 'title' in customizations:
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[6]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
                
        else:
            parameter['title']=self.titles()[6]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white' 
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])         
        print("data function")
        return parameter        
        

    def bar_1101_lobf(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # linear regression
        lm=LinearRegression()
        x=parameters['dataframe'].index
        lm.fit(x.values.reshape((-1,1)),parameters['dataframe'][fields['number'][0]].values.reshape((-1,1)))
        xlim = axis.get_xlim()
        x=list(x)
        x.extend(list(xlim))
        x.sort()
        y=lm.predict(np.array(x).reshape((-1,1)))
        axis.plot(x,y,'k--',label=None)
        axis.set_xlim(xlim)
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on']) 
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig        

# ------------------- trendig line LOBF

    def data_function_line_1101_lobf(self, data,customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            date_selection = self.fields['date'][0]
            character_selection = self.fields['date'][0]
            df = data[0].copy()
            average=df[number_selection].mean()
            median=df[number_selection].median()
            parameter['dataframe'] = df
            print(parameter['dataframe'])
            parameter['average']=average
            parameter['median']=median
            df_with_extras=df
            df_with_extras['average']=average
            df_with_extras['median']=median
            parameter['df_with_extras']=df_with_extras
            if customizations != None:
                if 'title' in customizations:
                    parameter['title']=customizations['title']
                else:
                    parameter['title']=self.titles()[6]
                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d=parameter['dataframe'][number_selection].min()
                    max_d=parameter['dataframe'][number_selection].max()
                    if min_d<0:
                        parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                    else:
                        parameter['y_limit'] =[0,max_d+max_d*0.2]                    
    
                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
    
                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = int(customizations['data_label_degree'])
                else:
                    parameter['data_label_degree'] = 0
    
                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'color_palette' in customizations.keys():
                    parameter['color_palette'] = customizations['color_palette']
                else:
                    parameter['color_palette'] = 'blue'
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
    
                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0
    
                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'
    
                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = True
    
                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'
    
                
                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if 'title_background' in customizations.keys():
                    parameter['title_background']=customizations['title_background']
                else:
                    parameter['title_background']='#555555'
                
                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color']=customizations['title_text_color']
                else:
                    parameter['title_text_color']='white'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None
                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None
                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None
                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'single_color' in customizations.keys():
                    parameter['single_color'] = customizations['single_color']
                else:
                    parameter['single_color'] = '#5FA2CE'
                if 'date_format' in customizations.keys():
                    parameter['date_format'] = customizations['date_format']
                else:
                    if self.fields['date_level'][0] == 'Exact Date':
                        parameter['date_format'] = 'short date'
                    elif self.fields['date_level'][0] == 'Week':
                        parameter['date_format'] = 'week'
                    elif self.fields['date_level'][0] == 'Month':
                        parameter['date_format'] = 'short month'
                    elif self.fields['date_level'][0] == 'Year':
                        parameter['date_format'] = 'year'
                    elif self.fields['date_level'][0] == 'Quarter':
                        parameter['date_format'] = 'short quarter'
                if 'label_font_size' in customizations.keys():
                    parameter['label_font_size']=customizations['label_font_size']
                else:
                    parameter['label_font_size']=12
                if 'tick_font_size' in customizations.keys():
                    parameter['tick_font_size' ] = customizations['tick_font_size']
                else:
                    parameter['tick_font_size' ] =12
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18   
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                    dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
                else:
                    parameter['x_tick_degree']=self.tick_degree(parameter)
            else:
                parameter['title']=self.titles()[6]
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['color_palette'] = 'blue'
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = True
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None                
                parameter['y_on'] = True
                parameter['title_background']='#555555'
                parameter['title_text_color']='white' 
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['single_color'] = '#5FA2CE'
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
                parameter['label_font_size']=12
                parameter['tick_font_size' ] =12
                parameter['data_label_font_size' ] =12
                parameter['title_font_size']=18 
                parameter['x_tick_degree']=self.tick_degree(parameter)
                print(parameter['dataframe'])
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])             
            print("data function")
            return parameter   

    def line_1101_lobf(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                         x=fields['date'][0],
                                         y=fields['number'][0],
                                         color=parameters['single_color'],
                                         ax=axis,
                                         legend=None)        
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # linear regression
        lm=LinearRegression()
        x=parameters['dataframe'].index
        lm.fit(x.values.reshape((-1,1)),parameters['dataframe'][fields['number'][0]].values.reshape((-1,1)))
        xlim = axis.get_xlim()
        x=list(x)
        x.extend(list(xlim))
        x.sort()
        y=lm.predict(np.array(x).reshape((-1,1)))
        axis.plot(x,y,'k--',label=None)
        
        for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label']))):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            if i==0:
                ha='left'
            else:
                ha='center'
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha=ha,
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        axis.set_xlim(xlim)
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on']) 
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

    def data_function_line_1101_lobf_zoom(self, data, customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        
        # zoom graph y min and max calculations
        max_value = df[number_selection].max()
        min_value = df[number_selection].min()
        y_zoom_margin = abs(max_value) * .2
        y_top = max_value + y_zoom_margin
        y_bottom = min_value - y_zoom_margin
        parameter['y_top'] = y_top
        parameter['y_bottom'] = y_bottom
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[6]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe'][number_selection].min()
                max_d = parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None
            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None
            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None
            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[6]
            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection,
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def line_1101_lobf_zoom(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y=fields['number'][0],
                                     color=parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # linear regression
        lm = LinearRegression()
        x = parameters['dataframe'].index
        lm.fit(x.values.reshape((-1, 1)), parameters['dataframe'][fields['number'][0]].values.reshape((-1, 1)))
        xlim = axis.get_xlim()
        x=list(x)
        x.extend(list(xlim))
        x.sort()
        y=lm.predict(np.array(x).reshape((-1,1)))
        axis.plot(x,y,'k--',label=None)
        for i,(x, y, label) in enumerate(zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe'][fields['number'][0]],
                               list(parameters['dataframe']['data_label']))):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            if i==0:
                ha='left'
            else:
                ha='center'
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha=ha,
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])

        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_ylim(parameters['y_bottom'],parameters['y_top'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        axis.set_xlim(xlim)
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])

        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

    def data_function_bar_1101_runsum(self, data, customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        parameter['dataframe'] = df
        date_agg = df.groupby(date_selection)[number_selection].agg(['sum', 'max']).rename(
            columns={'sum': 'sum_mdg', 'max': 'max_mdg'})
        max_bar = date_agg['sum_mdg'].max()
        parameter['max_date_mdg'] = max_bar
        date_agg['max_date_mdg'] = max_bar
        parameter['date_agg_df'] = date_agg
        print('#############cumsum########')
        print('normal')
        print(df)
        print('cumsum')
        df['cumsum'] = df[number_selection].cumsum()
        print(df)
        parameter['dataframe'] = df
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[8]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe']['cumsum'].min()
                max_d = parameter['dataframe']['cumsum'].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index) < 10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

        else:
            parameter['title']=self.titles()[8]
            min_d = parameter['dataframe']['cumsum'].min()
            max_d = parameter['dataframe']['cumsum'].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index) < 10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col='cumsum',
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def bar_1101_runsum(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1

        bars = axis.bar(x=parameters['dataframe'][fields['date'][0]],
                        height=parameters['dataframe']['cumsum'],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:

            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height() < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = bar.get_height() - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = bar.get_height() + parameters['data_label_offset']
            axis.text(x=bar.get_x() + bar.get_width() / 2,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # y axis on of

        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

    def data_function_area_1101_runsum(self, data, customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        parameter['dataframe'] = df
        date_agg = df.groupby(date_selection)[number_selection].agg(['sum', 'max']).rename(
            columns={'sum': 'sum_mdg', 'max': 'max_mdg'})
        max_bar = date_agg['sum_mdg'].max()
        parameter['max_date_mdg'] = max_bar
        date_agg['max_date_mdg'] = max_bar
        parameter['date_agg_df'] = date_agg
        print('#############cumsum########')
        print('normal')
        print(df)
        print('cumsum')
        df['cumsum'] = df[number_selection].cumsum()
        print(df)
        parameter['dataframe'] = df
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[8]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe']['cumsum'].min()
                max_d = parameter['dataframe']['cumsum'].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[8]
            min_d = parameter['dataframe']['cumsum'].min()
            max_d = parameter['dataframe']['cumsum'].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col='cumsum',
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def area_1101_runsum(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.fill_between(x=parameters['dataframe'][fields['date'][0]],
                          y1=0,
                          y2=parameters['dataframe']['cumsum'],
                          color=parameters['single_color'])
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe']['cumsum'],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig

    def data_function_line_1101_runsum(self, data, customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        date_selection = self.fields['date'][0]
        character_selection = self.fields['date'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        median = df[number_selection].median()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        parameter['median'] = median
        df_with_extras = df
        df_with_extras['average'] = average
        df_with_extras['median'] = median
        parameter['df_with_extras'] = df_with_extras
        parameter['dataframe'] = df
        date_agg = df.groupby(date_selection)[number_selection].agg(['sum', 'max']).rename(
            columns={'sum': 'sum_mdg', 'max': 'max_mdg'})
        max_bar = date_agg['sum_mdg'].max()
        parameter['max_date_mdg'] = max_bar
        date_agg['max_date_mdg'] = max_bar
        parameter['date_agg_df'] = date_agg
        print('#############cumsum########')
        print('normal')
        print(df)
        print('cumsum')
        df['cumsum'] = df[number_selection].cumsum()
        print(df)
        parameter['dataframe'] = df
        if customizations != None:
            if 'title' in customizations:
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[8]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe']['cumsum'].min()
                max_d = parameter['dataframe']['cumsum'].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#5FA2CE'
            if 'date_format' in customizations.keys():
                parameter['date_format'] = customizations['date_format']
            else:
                if self.fields['date_level'][0] == 'Exact Date':
                    parameter['date_format'] = 'short date'
                elif self.fields['date_level'][0] == 'Week':
                    parameter['date_format'] = 'week'
                elif self.fields['date_level'][0] == 'Month':
                    parameter['date_format'] = 'short month'
                elif self.fields['date_level'][0] == 'Year':
                    parameter['date_format'] = 'year'
                elif self.fields['date_level'][0] == 'Quarter':
                    parameter['date_format'] = 'short quarter'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
                dateformater.parse_date(parameter['dataframe'], self.fields['date'][0], 
                                        parameter['date_format'])
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)
        else:
            parameter['title']=self.titles()[8]
            min_d = parameter['dataframe']['cumsum'].min()
            max_d = parameter['dataframe']['cumsum'].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['date'][0].replace('_',' ')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['single_color'] = '#5FA2CE'
            if self.fields['date_level'][0] == 'Exact Date':
                parameter['date_format'] = 'short date'
            elif self.fields['date_level'][0] == 'Week':
                parameter['date_format'] = 'week'
            elif self.fields['date_level'][0] == 'Month':
                parameter['date_format'] = 'short month'
            elif self.fields['date_level'][0] == 'Year':
                parameter['date_format'] = 'year'
            elif self.fields['date_level'][0] == 'Quarter':
                parameter['date_format'] = 'short quarter'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18 
            parameter['x_tick_degree']=self.tick_degree(parameter)
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col='cumsum',
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("data function")
        print(parameter['dataframe'])
        return parameter

    def line_1101_runsum(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        parameters['dataframe'].plot(kind='line',
                                     x=fields['date'][0],
                                     y='cumsum',
                                     color=parameters['single_color'],
                                     ax=axis,
                                     legend=None)
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:

            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

        for x, y, label in zip(range(parameters['dataframe'][fields['date'][0]].size),
                               parameters['dataframe']['cumsum'],
                               list(parameters['dataframe']['data_label'])):
            if y < 0:
                rotation = -parameters['data_label_degree']
                va = 'top'
                y = y - parameters['data_label_offset']
            else:
                rotation = parameters['data_label_degree']
                va = 'bottom'
                y = y + parameters['data_label_offset']
            axis.text(x=x,
                      y=y,
                      s=label,
                      ha='center',
                      va=va,
                      rotation=rotation,fontsize=parameters['data_label_font_size' ])
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['date'][0]].size))
        axis.set_xticklabels(parameters['dataframe'][fields['date'][0] + '_formatted'],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        dlf = DataLabelFormatter()
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # title
        title = self.fig.suptitle(parameters['title'],
                                  backgroundcolor=parameters['title_background'],
                                  color=parameters['title_text_color'], weight='normal'
                                  , fontsize=parameters['title_font_size'],x=0.4625, va='top')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1200)
        return axis, self.fig
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))



if __name__ == "__main__":
    import sys
    import graph1011.Graph1011
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Graph1011()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


