# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'customization.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from helper import ExtendedTextBox,BoxStyle,run_query,where_function\
,show_success_message,show_error_message,data_label_format,MySplashScreen,collect_data,ClickLabel,BASE_DIR,home
from customization_widgets import GraphWidget
import PIL
from PIL import Image
from TopBar import TopLearningSection
import os
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from sys import platform

BoxStyle._style_list["ext"] = ExtendedTextBox

class LoadThread(QtCore.QThread):
    signal = QtCore.pyqtSignal()

    def __init__(self):
        QtCore.QThread.__init__(self)

    # run method gets called when we start the thread
    def run(self):
        import time
        time.sleep(1)
        self.signal.emit()

class Customization(object):
    
    def __init__(self,df=None,db_name=None,fields=None,kind=None,title=None,sql_func=None,graph_func=None,
                    selection_character=None,selection_numbers=None,selection_dates=None,
                    range_character=None,range_date=None,range_number=None,sql_data=None):
        self.db_name = db_name
        self.df = df
        self.fields = fields
        self.kind = kind
        self.title = title
        self.sql_func = sql_func
        self.graph_func = graph_func
        self.selection_characters = selection_character
        self.selection_numbers = selection_numbers
        self.selection_dates = selection_dates
        self.customization = {}
        self.range_character = range_character
        self.range_number = range_number
        self.range_date = range_date
        self.customization_features = []
        self.customization_functions = []
        self.cust_btn = {}
        self.sql_data = sql_data
        

    def setupUi(self, MainWindow):
        self.splash = MySplashScreen(QtGui.QPixmap(BASE_DIR +'/system/loaders/l_options.jpg'))
        self.vboxmain = QVBoxLayout()
        self.vboxmain.setAlignment(Qt.AlignTop)
        MainWindow.setLayout(self.vboxmain)

        self.widgettop = QWidget()
        self.vboxtopheader = QVBoxLayout()
        self.widgettop.setLayout(self.vboxtopheader)
        self.vboxmain.addWidget(self.widgettop)
        self.hboxmain = QHBoxLayout()
        self.vboxmain.addLayout(self.hboxmain)

        self.scrollbuttonmlayout = QVBoxLayout()
        self.widgetscrollbutton = QWidget()
        self.widgetscrollbutton.setFixedWidth(350)
        # self.widgetscrollbutton.setStyleSheet("background:#F8F8F8")

        self.scrollAreab = QtWidgets.QScrollArea()
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        self.scrollAreab.setWidgetResizable(True)
        # self.scrollAreab.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scrollAreaWidgetContentsb = QtWidgets.QWidget()
        ## horizontal layout to center buttons
        self.horizontalscrollcenter = QHBoxLayout()
        ## vertical layout for scroll buttons
        self.scrollbuttonverticallayout = QVBoxLayout()
        self.scrollbuttonverticallayout.setAlignment(Qt.AlignTop)
        #self.scrollAreaWidgetContentsb.setLayout(self.scrollbuttonverticallayout)
        self.horizontalscrollcenter.addStretch(1)
        self.horizontalscrollcenter.addLayout(self.scrollbuttonverticallayout)
        self.horizontalscrollcenter.addStretch(1)
        self.scrollAreaWidgetContentsb.setLayout(self.horizontalscrollcenter)
        self.scrollAreab.setWidget(self.scrollAreaWidgetContentsb)
        
        self.scrollbuttonmlayout.addWidget(self.scrollAreab)
        self.widgetscrollbutton.setLayout(self.scrollbuttonmlayout)
        self.hboxmain.addWidget(self.widgetscrollbutton)
        
        button_and_graphlayout = QVBoxLayout()
        button_and_graphlayout.setAlignment(Qt.AlignCenter)

        self.hboxmain.addLayout(button_and_graphlayout)

        # self.scrollArea = QtWidgets.QScrollArea(MainWindow)
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        # self.scrollArea.setWidgetResizable(True)
        # self.scrollArea.setObjectName("scrollArea")
        # self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.x_1 = TopLearningSection()
        self.x_1.setup(self.vboxtopheader)

        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1239, 739))
        # self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.scrollArea.setStyleSheet('''QScrollArea {background: #fff}
        #         QFrame {background: #fff}
        #         QPushButton
        #         {
        #             border-radius: 5px;
        #             color: black;
        #             background-color: #DFDFDF;
                  
        #         }
        #         QPushButton:hover
        #         {
        #             background: #6e98e0;
        #             color: white;
                    
        #         }
        #         ''') 
        self.button_widget = QWidget()
        # self.button_widget.setStyleSheet('background:blue')
        self.button_widget.setFixedWidth(951)
        button_and_graphlayout.addWidget(self.button_widget)
        self.hboxtop = QHBoxLayout()
        self.hboxtop.setAlignment(Qt.AlignRight)

        self.button_widget.setLayout(self.hboxtop)


        # self.graphwidget = QWidget()
        # button_and_graphlayout.addWidget(self.graphwidget)

        self.save_png_btn = QtWidgets.QPushButton()
        self.save_png_btn.setFixedSize(151, 35)
        self.hboxtop.addWidget(self.save_png_btn)
        # background-color: #7969E6;5041AC
        self.save_png_btn.setStyleSheet('''
                QPushButton
                {
                    border-radius: 5px;
                    color: white;
                    background-color: #5041AC;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }
        ''') 
        # 186AFF
        self.save_png_btn.setGeometry(QtCore.QRect(1055, 15, 151, 35))
        self.save_png_btn.setText('Export PNG')
        self.save_png_btn.clicked.connect(self.take_screenshot)
        
        self.save_png_btn1 = QtWidgets.QPushButton()
        self.save_png_btn1.setFixedSize(151, 35)
        self.hboxtop.addWidget(self.save_png_btn1)
        # background-color: #7969E6;5041AC
        self.save_png_btn1.setStyleSheet('''
                QPushButton
                {
                    border-radius: 5px;
                    color: white;
                    background-color: #5041AC;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }
        ''') 
        # 186AFF
        self.save_png_btn1.setGeometry(QtCore.QRect(855, 15, 151, 35))
        self.save_png_btn1.setText('Publish/Share')
        # self.save_png_btn1.clicked.connect(self.save_graph_image)
        self.framelayoutgraph = QVBoxLayout()
        # self.framelayoutgraph.setAlignment(Qt.AlignCenter)

        ## making Widget scrollable
        self.scrollAreag = QtWidgets.QScrollArea()
        # self.scrollAreag.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        self.scrollAreag.setWidgetResizable(True)
        # self.scrollAreag.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scrollAreaWidgetContentsg = QtWidgets.QWidget()

        ## vertical layout for scroll buttons
        self.scrollgraphverticallayout = QVBoxLayout()
        self.scrollgraphverticallayout.setAlignment(Qt.AlignCenter)
        self.scrollAreaWidgetContentsg.setLayout(self.scrollgraphverticallayout)

        self.scrollAreag.setWidget(self.scrollAreaWidgetContentsg)
        self.framelayoutgraph.addWidget(self.scrollAreag)



        self.frame = QtWidgets.QFrame()
        self.scrollgraphverticallayout.addWidget(self.frame)
        self.frame.setFixedSize(1500, 900)
        # self.frame.setGeometry(QtCore.QRect(259, 60, 951, 681))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        button_and_graphlayout.addLayout(self.framelayoutgraph)
        # button_and_graphlayout.addStretch(1)


        self.custom_btn = QtWidgets.QPushButton()
        font = QFont('Arial')
        font.setStyleHint(QFont.System,QFont.PreferDevice)
        font.setPixelSize(19)
        self.custom_btn.setFont(font)
        
        self.outsidebutton_widget = QWidget()
        self.outsidebutton_widget.setFixedSize(291, 131)
        # self.outsidebutton_widget.setStyleSheet("background:blue;")

        self.outsidebutton_widget_layout = QVBoxLayout()
        self.outsidebutton_widget_layout.setAlignment(Qt.AlignLeft)
        self.outsidebutton_widget_layout.addWidget(self.custom_btn)
        self.outsidebutton_widget.setLayout(self.outsidebutton_widget_layout)

        self.scrollbuttonverticallayout.addWidget(self.outsidebutton_widget)
        self.custom_btn.setFixedSize(281, 101)
        # self.custom_btn.setGeometry(QtCore.QRect(30, 60, 151, 41))
        self.custom_btn.setObjectName("pushButton")
        self.custom_btn.setStyleSheet('''QPushButton
                {
                    border-radius: 5px;
                    color: black;
                    background-color: #A4A4A4;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }''')
        # self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.create_dynamic_buttons()
        
        try:
            self.custom_btn.clicked.connect(self.customization_functions[0])
        except:
            pass
        self.create_graph()
        # button_and_graphlayout.addStretch(1)
        self.get_cutomization_options()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle( "VizPick")
        MainWindow.setWindowIcon(QtGui.QIcon('logo1.png'))
        # MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.custom_btn.setText(_translate("MainWindow", "Customization Options"))
        

    def is_paid_user(self):
        try:
            sql_query = f'''
                    select * from user_info
                '''
            data = run_query(sql_query)
            if data['package'][0] !=  "free" and  data['package'][0] !=  "Free":
                return True
            else:
                return False
        except:
            return False
        
    def create_dynamic_buttons(self):	
        sql_query = f'''	
            select distinct b.customization_key
            , b.formatted_name
            ,b.ordering	
            from function_customization a	
            inner join customization_order b on a.customization_key=b.customization_key	
            where a.function='{self.graph_func.__name__}'	
            order by b.ordering	
        '''	
        data = run_query(sql_query)	
        #sizemore - setting a dynamic formatted name for X, Y axis based on horizontal or regular
        for index,row in data.iterrows():	
            if 'horizontal' in str(self.graph_func.__name__) and row['customization_key'] in ['y_on', 'y_label','data_label_decimal_axis', 'data_label_format_axis','data_label_type_axis']:
                data.loc[index,'formatted_name']= 'X '+row['formatted_name']
            elif row['customization_key'] in ['y_on', 'y_label','data_label_decimal_axis', 'data_label_format_axis','data_label_type_axis']:
                data.loc[index,'formatted_name']= 'Y '+row['formatted_name']
            elif 'horizontal' in str(self.graph_func.__name__) and row['customization_key'] in ['x_on','x_label', 'date_format','x_tick_degree']:
                data.loc[index,'formatted_name']= 'Y '+row['formatted_name']
            elif row['customization_key'] in ['x_on','x_label', 'date_format','x_tick_degree']:
                data.loc[index,'formatted_name']= 'X '+row['formatted_name']
        print(data)	
        #self.customization_features = data['customization_key'].tolist()	
        print('###################FEATURES ################################')	
        print(self.customization_features)	
        y_axis = 120	
        key_values= data['customization_key'].values	
        if 'gradient' in key_values:	
            data.loc[len(data)] = ['gradient_paid_color','Colors - Premium',0]	
        elif 'above_color' in key_values:	
            data.loc[len(data)] = ['above_color_paid_color','Colors - Premium',0]	
        elif 'color_palette' in key_values:	
            data.loc[len(data)] = ['color_pallete_paid_color','Colors - Premium',0]	
        elif 'single_color' in key_values:	
                data.loc[len(data)] = ['single_color_paid_color','Colors - Premium',0]	
        data.loc[len(data)] = ['paid_color_title','Title Color - Premium',0]	
        #data = data.sort_values(by=['ordering'], ascending=True)	
        data = data.sort_values(by=['formatted_name'], ascending=True)
        self.customization_features = data['customization_key'].tolist()
        next_color='#808080'
        previous_color='#b1b1b1'
        previous_value='none'
        for index,row in data.iterrows():	
            try:	
                btn_func = getattr(self,'update_'+ str(row['customization_key']))	
                self.customization_functions.append(btn_func)  	
                if row['customization_key'] not in ['title_text_color']: #['data_label_type','data_label_format','data_label_decimal','data_label_degree','legend_placement','orientation'	
                                                   # ,'data_label_decimal_total','data_label_format_total','data_label_degree_total','data_label_type_total','data_label_format_percent',	
                                                   # 'data_label_decimal_percent','data_label_degree_percent','data_label_type_percent','data_label_format_axis',	
                                                   # 'data_label_decimal_axis','data_label_type_axis','data_label_degree_axis']:    	
                    self.cust_btn[index] = QtWidgets.QPushButton()	
                    font = QFont("Arial")
                    # font.setWeight(63)
                    font.setStyleHint(QFont.System,QFont.PreferDevice)
                    font.setPixelSize(19)
                    # font.setBold(True)
                    self.cust_btn[index].setFont(font)
                    self.outsidebutton_widget = QWidget()	
                    self.outsidebutton_widget.setFixedSize(291, 131)	
                    #self.outsidebutton_widget.setFixedSize(180, 61)	
                    # self.outsidebutton_widget.setStyleSheet("background:blue;")	
                    self.outsidebutton_widget_layout = QVBoxLayout()	
                    self.outsidebutton_widget_layout.setAlignment(Qt.AlignCenter)	
                    self.outsidebutton_widget_layout.addWidget(self.cust_btn[index])	
                    self.outsidebutton_widget.setLayout(self.outsidebutton_widget_layout)	
                    self.scrollbuttonverticallayout.addWidget(self.outsidebutton_widget)	
                    # self.cust_btn[index].setStyleSheet("margin-top:100px;")	
                    self.cust_btn[index].setFixedSize(281, 101)	
                    #self.cust_btn[index].setFixedSize(160, 41)	
                    # self.scrollbuttonverticallayout.addWidget(self.cust_btn[index])	
                    self.cust_btn[index].setGeometry(QtCore.QRect(30, y_axis, 151, 41))
                    #self.cust_btn[index].setGeometry(QtCore.QRect(30, y_axis, 160, 41))	
                    self.cust_btn[index].setText(row['formatted_name'])	
                    #self.cust_btn[index].setWordWrap(True)
                    self.cust_btn[index].clicked.connect(btn_func)	
                    print('#hereistheif')
                    print(previous_value)
                    print(previous_color)
                    print(row['customization_key'])
                    #if row['formatted_name'] in ['Colors - Premium','Title Color - Premium']:	
                    #    self.cust_btn[index].setStyleSheet("background-color : #6e98e0;color:white;font-size: 10px")
                    #    self.cust_btn[index].setIcon(QIcon('green_dot.png'))
                    #    previous_value=row['formatted_name']
                    #elif 1==1:
                    if row['customization_key'] in ['paid_color_title','title', 'title_background', 'title_background', 'Title Color - Paid User'] and previous_value in ['paid_color_title','title', 'title_background' 'Title Color - Paid User']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                            if row['customization_key']=='paid_color_title':
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                            if row['customization_key']=='paid_color_title':
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))

                        previous_value=row['customization_key']
                        print('#LOOKTRUE')
                    elif row['customization_key'] in ['paid_color_title','title', 'title_background' 'Title Color - Paid User'] and previous_value not in ['paid_color_title','title', 'title_background' 'Title Color - Paid User']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                            if row['customization_key']=='paid_color_title':
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                            if row['customization_key']=='paid_color_title':
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['y_on', 'y_label','data_label_decimal_axis', 'data_label_format_axis','data_label_type_axis'] and previous_value in ['y_on', 'y_label','data_label_decimal_axis', 'data_label_format_axis','data_label_type_axis']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['y_on', 'y_label','data_label_decimal_axis', 'data_label_format_axis','data_label_type_axis'] and previous_value not in ['y_on', 'y_label','data_label_decimal_axis', 'data_label_format_axis','data_label_type_axis']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['x_on','x_label', 'date_format', 'x_tick_degree'] and previous_value in ['x_on','x_label', 'date_format','x_tick_degree']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['x_on','x_label', 'date_format','x_tick_degree'] and previous_value not in ['x_on','x_label', 'date_format','x_tick_degree']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color','color_palette','above_color','below_color','gradient','single_color', 'arrow_color'] and previous_value in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color','color_palette','above_color','below_color','gradient','single_color', 'arrow_color']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                            if row['customization_key'] in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color']:
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                            if row['customization_key'] in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color']:
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color','color_palette','above_color','below_color','gradient','single_color', 'arrow_color'] and previous_value not in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color','color_palette','above_color','below_color','gradient','single_color', 'arrow_color']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                            if row['customization_key'] in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color']:
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))

                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                            if row['customization_key'] in ['gradient_paid_color', 'above_color_paid_color','color_pallete_paid_color', 'single_color_paid_color']:
                                self.cust_btn[index].setIcon(QIcon(BASE_DIR + '/system/green_dot.png'))
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['legend','orientation','legend_placement'] and previous_value in ['legend','orientation','legend_placement']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['legend','orientation','legend_placement'] and previous_value not in ['legend','orientation','legend_placement']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['data_label_format','data_label_frequency','data_label_type','data_label_decimal','data_label_degree'] and previous_value in ['data_label_format','data_label_frequency','data_label_type','data_label_decimal','data_label_degree']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['data_label_format','data_label_frequency','data_label_type','data_label_decimal','data_label_degree'] and previous_value not in ['data_label_format','data_label_frequency','data_label_type','data_label_decimal','data_label_degree']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['data_label_frequency_total','data_label_decimal_total','data_label_type_total','data_label_format_total','data_label_degree_total'] and previous_value in ['data_label_frequency_total','data_label_decimal_total','data_label_type_total','data_label_format_total','data_label_degree_total']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['data_label_frequency_total','data_label_decimal_total','data_label_type_total','data_label_format_total','data_label_degree_total'] and previous_value not in ['data_label_frequency_total','data_label_decimal_total','data_label_type_total','data_label_format_total','data_label_degree_total']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    elif row['customization_key'] in ['data_label_frequency_percent','data_label_decimal_percent','data_label_format_percent'] and previous_value in ['data_label_frequency_percent','data_label_decimal_percent','data_label_format_percent']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        previous_value=row['customization_key']
                    elif row['customization_key'] in ['data_label_frequency_percent','data_label_decimal_percent','data_label_format_percent'] and previous_value not in ['data_label_frequency_percent','data_label_decimal_percent','data_label_format_percent']:	
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color
                    else:
                        if previous_color=='#808080':
                            self.cust_btn[index].setStyleSheet("background-color : #b1b1b1;color:black")
                        else:
                            self.cust_btn[index].setStyleSheet("background-color : #808080;color:white")
                        previous_value=row['customization_key']
                        temp_color=previous_color
                        previous_color=next_color
                        next_color=temp_color

                    y_axis += 60	
            except Exception as e:	
                print('############################ ERROR ON CUSTOMIZATION #########################')	
                if row['customization_key'] in self.customization_features:	
                    self.customization_features.remove(row['customization_key'])	
                print(e)
                #['#808080', '#8a8a8a', '#949494', '#9d9d9d', '#a7a7a7', '#b1b1b1', '#bbbbbb', '#c5c5c5', '#cecece', '#d8d8d8', '#e2e2e2', '#ececec', '#f6f6f6']
                ##949494

    def update_paid_color_title(self):
        if self.is_paid_user():
            key = 'title_background'
            self.Select = QtWidgets.QWidget()
            sql_query = f'''
                select distinct a.option, a.description, a.sub_description
                from customization_options a
                where customization_key='{key}'
            '''

            options = run_query(sql_query)
            self.Select = QtWidgets.QWidget()
            self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Title Customization - Click on the colors to pick a new title background and text color. Click "Show me" to view.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                    self.selection_characters,self.selection_dates,self.selection_numbers,
                                    self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                    self.customization_functions)
            self.ui.setupUi(self.Select)
            self.Select.show()
            self.splash.show()
            self.thread = LoadThread()
            self.thread.signal.connect(self.ui.update_title_color_paid)
            self.thread.start()
        else:
            show_error_message('For unlimited colors,'+ '<a href="https://vizpick.com/pricing/">upgrade to the presenter package</a>' + '!')

    def update_gradient_paid_color(self):
        if self.is_paid_user():
            key = 'gradient'
            self.Select = QtWidgets.QWidget()
            sql_query = f'''
                select distinct a.option, a.description, a.sub_description
                from customization_options a
                where customization_key='{key}'
            '''

            options = run_query(sql_query)
            self.Select = QtWidgets.QWidget()
            self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Color Gradient - Pick a new gradient color option from the dropdown.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                    self.selection_characters,self.selection_dates,self.selection_numbers,
                                    self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                    self.customization_functions)
            self.ui.setupUi(self.Select)
            self.Select.show()
            self.splash.show()
            self.thread = LoadThread()
            self.thread.signal.connect(self.ui.update_gradient_paid_color)
            self.thread.start()
        else:
            show_error_message('For unlimited colors,'+ '<a href="https://vizpick.com/pricing/">upgrade to the presenter package</a>' + '!')

    def update_above_color_paid_color(self):
        if self.is_paid_user():
            key = 'above_color'
            self.Select = QtWidgets.QWidget()
            sql_query = f'''
                select distinct a.option, a.description, a.sub_description
                from customization_options a
                where customization_key='{key}'
            '''

            options = run_query(sql_query)
            self.Select = QtWidgets.QWidget()
            self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'New Above/Below Colors - Click the color you want to change, then click "Show me".',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                    self.selection_characters,self.selection_dates,self.selection_numbers,
                                    self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                    self.customization_functions)
            self.ui.setupUi(self.Select)
            self.Select.show()
            self.splash.show()
            self.thread = LoadThread()
            self.thread.signal.connect(self.ui.update_above_color_paid_color)
            self.thread.start()
        else:
            show_error_message('For unlimited colors,'+ '<a href="https://vizpick.com/pricing/">upgrade to the presenter package</a>' + '!')

    def update_color_pallete_paid_color(self):
        if self.is_paid_user():
            key = 'color_palette'
            self.Select = QtWidgets.QWidget()
            sql_query = f'''
                select distinct a.option, a.description, a.sub_description
                from customization_options a
                where customization_key='{key}'
            '''
            options = run_query(sql_query)
            self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Graph Colors - Pick a new color palette from the dropdown or click each color to change them one at a time. Click "Show me".',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                    self.selection_characters,self.selection_dates,self.selection_numbers,
                                    self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                    self.customization_functions)
            self.ui.setupUi(self.Select)
            self.Select.show()
            self.splash.show()  
            self.thread = LoadThread()
            self.thread.signal.connect(self.ui.update_color_pallete_paid)
            self.thread.start()
        else:
            show_error_message('For unlimited colors,'+ '<a href="https://vizpick.com/pricing/">upgrade to the presenter package</a>' + '!')

    def update_single_color_paid_color(self):
        if self.is_paid_user():
            key = 'single_color'
            self.Select = QtWidgets.QWidget()
            sql_query = f'''
                select distinct a.option, a.description, a.sub_description
                from customization_options a
                where customization_key='{key}'
            '''

            options = run_query(sql_query)
            self.Select = QtWidgets.QWidget()
            self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Graph Color - Click on the color to pick a new one! Click "Show me".',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                    self.selection_characters,self.selection_dates,self.selection_numbers,
                                    self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                    self.customization_functions)
            self.ui.setupUi(self.Select)
            self.Select.show()
            self.splash.show()
            self.thread = LoadThread()
            self.thread.signal.connect(self.ui.update_single_paid_color)
            self.thread.start()
        else:
            show_error_message('For unlimited colors,'+ '<a href="https://vizpick.com/pricing/">upgrade to the presenter package</a>' + '!')

    def update_title(self):
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Graph Title - Enter a new title in the text box and click "Show me".','title',self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_text)
        self.thread.start()
        

    def update_x_label(self):
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Axis Label - Enter a new name for the non-number axis. Click "Show me".','x_label',self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_text)
        self.thread.start()
        

    def update_y_label(self):
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Axis Label - Enter a new name for the number axis. Click "Show me".','y_label',self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_text)
        self.thread.start()

    def update_y_on(self):
        print("This is y axis is pushed")
        key = 'y_on'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Number Axis - Hide or show the number axis.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()     
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_y_choices)
        self.thread.start()

    def update_legend(self):
        key = 'legend'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Legend - Choose to show or hide your legend.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()  
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_legend)
        self.thread.start()


    def update_orientation(self):
        key = 'orientation'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Legend - Pick a verticle or horizontal legend." to further customize your legend.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_legend)
        self.thread.start()


    def update_legend_placement(self):
        key = 'legend_placement'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Legend - Pick the best placement for the legend. Click "Apply Changes".',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()        
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_legend)
        self.thread.start()

    def update_title_background(self):
        key = 'title_background'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Title Color - Pick the best title color and text option. Click the "Paid Title Color" button for unlimited color options.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_color)
        self.thread.start()
    
    def update_data_label_degree_axis(self):
        key = 'data_label_degree_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.db_name,self.splash,self.sql_data,self.customization,'Choose a  data label degree for the axis ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
    
    def update_data_label_degree_percent(self):
        key = 'data_label_degree_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best orientation of your data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
    
    def update_data_label_degree_total(self):
        key = 'data_label_degree_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label-Pick the best orientation of your data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
    
    def update_data_label_degree(self):
        key = 'data_label_degree'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        print('##dtypes')
        print(options.dtypes)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best orientation of your data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_x_tick_degree(self):
        key = 'x_tick_degree'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        print('##dtypes')
        print(options.dtypes)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Rotate the X Axis Labels',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_date_format(self):
        key = 'date_format'
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Date Format - Pick the best format for the dates.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_date_format)
        self.thread.start()

    def update_data_label_frequency(self):
        key = 'data_label_frequency'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick how many data labels you want to show.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_frequency_total(self):
        key = 'data_label_frequency_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick how many data labels you want to show.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_type_total(self):
        key = 'data_label_type_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between currency, percent or just numbers.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
        

    def update_data_label_format_percent(self):
        key = 'data_label_format_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between thousands, millions or standard.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()               
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_frequency_percent(self):
        key = 'data_label_frequency_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick how many data labels you want to show.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_degree(self):
        key = 'data_label_degree'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best orientation of your data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_decimal_percent(self):
        key = 'data_label_decimal_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best number of decimal places for the percent data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_type_percent(self):
        key = 'data_label_type_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between currency, percent or just numbers.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_format_total(self):
        key = 'data_label_format_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between thousands, millions or standard for the total data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_decimal_total(self):
        key = 'data_label_decimal_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best number of decimal places for the total data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_frequency_axis(self):
        key = 'data_label_frequency_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.db_name,self.splash,self.sql_data,self.customization,'Choose data label frequency axis ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_decimal_axis(self):
        key = 'data_label_decimal_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best number of decimal places for the axis data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
        

    def update_data_label_type_axis(self):
        key = 'data_label_type_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between currency, percent or just numbers for the axis data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_format_axis(self):
        key = 'data_label_format_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between thousands, millions or standard for the axis data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_format(self):
        key = 'data_label_format'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between thousands, millions or standard for the data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    
    def update_data_label_decimal(self):
        key = 'data_label_decimal'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick the best number of decimal places for the data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_type(self):
        key = 'data_label_type'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Data Label - Pick between currency, percent or just numbers for the data labels.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    
    def update_gradient(self):
        key = 'gradient'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Color - pick the best color option. Click "Apply Change". For more options click the "Paid Colors" button on the previous screen.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_gradient)
        self.thread.start()


    def update_above_color(self):
        key = 'above_color'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Color - pick the best color option. Click "Apply Change". For unlimited options click the "Paid Colors" button on the previous screen.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_above_below_color)
        self.thread.start()

    def update_arrow_color_up(self):
        key = 'arrow_color_up'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Arrow Color - Pick the best colors for the arrows. Click "Apply Changes".',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_arrow_colors)
        self.thread.start()

    def update_single_color(self):
        key = 'single_color'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Color - pick the best color option. Click "Apply Change". For unlimited options click the "Paid Colors" button on the previous screen.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()  
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_color_single)
        self.thread.start()

    def update_color_palette(self):
        key = 'color_palette'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self,self.db_name,self.splash,self.sql_data,self.customization,'Color - pick the best color option. Click "Apply Change". For unlimited options click the "Paid Colors" button on the previous screen.',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()  
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_color_pallete)
        self.thread.start()


    def get_cutomization_options(self):
        sql_query = f'''
            select * from customization_options;
        '''
        self.customization_options = run_query(sql_query)

    def get_concat_v(self,im1, im2):
        '''
            This function is resonsible for the stiching up the 2 images
        '''
        dst = Image.new('RGB', (im1.width, im1.height + im2.height))
        dst.paste(im1, (0, 0))
        dst.paste(im2, (0, im1.height))
        return dst
    #sizemore change - putting logo at 90% mark instead of arbitraty locations
    def trans_paste(self,bg_img,fg_img,box=(758,0)):
    #def trans_paste(self,bg_img,fg_img,box:

        fg_img_trans = Image.new("RGBA",bg_img.size)
        tupler=bg_img.size[0]
        x_value=int(tupler*.9)
        new_box=(x_value,0)
        print('#########hereisthesize')
        print(bg_img.size)
        print(tupler)
        #fg_img_trans.paste(fg_img,box,mask=fg_img)
        fg_img_trans.paste(fg_img,new_box,mask=fg_img)
        new_img = Image.alpha_composite(bg_img,fg_img_trans)
        return new_img

    def take_screenshot(self):
        '''
            This graph is responsible to save the screenshot of the widget
        '''
        fileName = str(QtWidgets.QFileDialog.getSaveFileName(None,"Select Directory"))
        fileName = fileName.split(',')[0].replace("'",'').replace('(','')
        print(fileName)
        if fileName and fileName != '':
            pix=self.frame.grab()
            pix.save(fileName+".png")
            collect_data('PNG',self.graph_func.__name__,self)
            show_success_message('Image Saved')

        

    def save_graph_image(self):
        # open the directory dialogue
        try:
            fileName = str(QtWidgets.QFileDialog.getSaveFileName(None,"Select Directory"))
            ##check if file name is not empty
            print(type(fileName))
            fileName = fileName.split(',')[0].replace("'",'').replace('(','')
            print(fileName)
            if fileName and fileName != '':
                if self.is_paid_user():
                    self.ax1.get_figure().set_size_inches(10,7)
                    self.ax1.get_figure().savefig(fileName+'.png',bbox_inches="tight", dpi=100)
                else:
                    self.ax1.get_figure().set_size_inches(10,10)
                    self.ax1.get_figure().savefig(fileName+'.png',bbox_inches="tight", dpi=100)
                    img1 = PIL.Image.open(fileName+'.png')
                    img2 = PIL.Image.open('system/wm.png')
                    final2 = self.trans_paste(img1,img2, (900,0))
                    #sizemore - added this thumbnail code to re-size the image. So we are creating the images large and then re-sizing the pictures to be the same size.
                    size=900, 600
                    final2.thumbnail(size, Image.ANTIALIAS)
                    final2.save(fileName + '.png')                    
                collect_data('PNG',self.graph_func.__name__,self)
                show_success_message('Successfully Save Image')
        except Exception as e:
            print(e)
            print('No File found')

    def create_graph(self):
        try:
            self.image_label.hide()
            #self.frame2.hide()
            #self.frame2.show()
            self.frame.hide()
        except:
            pass
        if not self.customization:
            self.parameter = self.sql_func(self.sql_data)
        else:
            self.parameter = self.sql_func(self.sql_data,customizations=self.customization)
        print('#datalabeldegree')
        print(self.parameter['data_label_degree'])
        
        self.ax1,self.fig = self.graph_func(self.parameter,self.kind,self.fields)
        self.fig.texts = []
        #from matplotlib import rcParams
        
        self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.2, top=0.9,
                                     hspace=0.2, wspace=0.2)
        title = self.fig.suptitle(self.parameter['title'],
        backgroundcolor=self.parameter['title_background'],
        color=self.parameter['title_text_color'],weight='normal'
        ,fontsize=18, x=.45)
        bb = title.get_bbox_patch()
        #width = 13.5
        #height = 7
        #these values work for all verticle bar charts 1011 all all 1101 and 1111 except listed below
        width = 11
        height = 6.5
        box = (850,0)
        #need new value for:
        #1011
        #horizontal graphs
        
        box = (900,0)
        #width = 10
        #height = 7
        #pie/donut
        #tree
        #stacked

        #1101
        #pie/donut
        #self.frame.setFixedSize(1500, 900)
        self.frame2 = QtWidgets.QFrame(self.frame)
        #self.frame2=QtWidgets.QFrame()
        
        self.frame2.setStyleSheet('background: {}'.format(self.parameter['title_background']))
        self.label_title = QLabel(self.parameter['title'],self.frame2)
        self.label_title.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.label_title.setAlignment(Qt.AlignCenter)
        
        self.label_title.setStyleSheet("background-color:{};color:{};font-size: 20px;".format(self.parameter['title_background'],self.parameter['title_text_color']))
        bb.set_boxstyle("ext", pad=0.8, width=1300)
        ax = self.ax1
    
        if platform != 'darwin':
            ax.get_figure().savefig(str(0)+'.png',bbox_inches="tight", dpi=100)
            pre_image = PIL.Image.open(str(0)+'.png')
        else:
            ax.get_figure().savefig(home+"/"+str(0)+'.png',bbox_inches="tight", dpi=100)
            pre_image = PIL.Image.open(home+"/"+str(0)+'.png')
        width=pre_image.size[0]/100
        height=pre_image.size[1]/100
        width=10
        height=10

        if self.is_paid_user():
            ax.get_figure().set_size_inches(width,height)
            if platform != 'darwin':
                ax.get_figure().savefig(str(0)+'.png',bbox_inches="tight", dpi=100)
                img1 = PIL.Image.open(str(0)+'.png')
            else:
                ax.get_figure().savefig(home+"/"+str(0)+'.png',bbox_inches="tight", dpi=100)
                img1 = PIL.Image.open(home+"/"+str(0)+'.png')
            size=900, 550
            img1.thumbnail(size, Image.ANTIALIAS)
            if platform != 'darwin':
                img1.save(str(0) + '.png')
            else:
                img1.save(home+"/"+str(0) + '.png')
            self.image_label = ClickLabel(self.frame)
            if platform != 'darwin':
                pixmap = QtGui.QPixmap(str(0)+'.png')
            else:
                pixmap = QtGui.QPixmap(home+'/'+str(0)+'.png')
            self.image_label.setPixmap(pixmap)
            self.image_label.setGeometry(QtCore.QRect(0, 20, pixmap.width(),pixmap.height()+50 ))
            self.label_title.setGeometry(QtCore.QRect(0, 0, self.image_label.width(), 40))
            self.frame2.setGeometry(QtCore.QRect(0, 0, self.image_label.width(), 50))
            self.frame.setFixedSize(pixmap.width(), pixmap.height()+50)
            pix=self.frame.grab()
            if platform != 'darwin':
                pix.save(str(0)+".png")
            else:
                pix.save(home+"/"+str(0)+".png")
            print('#lookparameters')
            print(self.parameter)
        else:
            print('#####imagesizehere')
            print(ax.get_figure().get_size_inches())
            ax.get_figure().set_size_inches(width,height)
            if platform != 'darwin':
                ax.get_figure().savefig(str(0)+'.png',bbox_inches="tight", dpi=100)
                img1 = PIL.Image.open(str(0)+'.png')
            else:
                ax.get_figure().savefig(home+"/"+str(0)+'.png',bbox_inches="tight", dpi=100)
                img1 = PIL.Image.open(home+"/"+str(0)+'.png')
            size=900, 550
            img1.thumbnail(size, Image.ANTIALIAS)
            if platform != 'darwin':
                img1.save(str(0) + '.png')
            else:
                img1.save(home+"/"+str(0) + '.png')

            self.image_label = ClickLabel(self.frame)
            if platform != 'darwin':
                pixmap = QtGui.QPixmap(str(0)+'.png')
            else:
                pixmap = QtGui.QPixmap(home+'/'+str(0)+'.png')

            self.image_label.setPixmap(pixmap)
            self.image_label.setGeometry(QtCore.QRect(0, 20, pixmap.width(),pixmap.height()+50 ))
            self.label_title.setGeometry(QtCore.QRect(0, 0, self.image_label.width(), 40))
            self.frame2.setGeometry(QtCore.QRect(0, 0, self.image_label.width(), 50))
            self.frame.setFixedSize(pixmap.width(), pixmap.height()+50)
            pix=self.frame.grab()
            if platform != 'darwin':
                pix.save(str(0)+".png")
            else:
                pix.save(home+"/"+str(0)+".png")
            #add the logo
            if platform != 'darwin':
                img1=PIL.Image.open(str(0)+'.png')
                img2 = PIL.Image.open(BASE_DIR+'/system/wm.png')
                final2 = self.trans_paste(img1,img2,box)
                final2.save(str(0) + '.png')
                self.image_label = ClickLabel(self.frame)
                pixmap = QtGui.QPixmap(str(0)+'.png')
            else:
                img1=PIL.Image.open(home+"/"+str(0)+'.png')
                img2 = PIL.Image.open(BASE_DIR+'/system/wm.png')
                final2 = self.trans_paste(img1,img2,box)
                final2.save(home+"/"+str(0) + '.png')
                self.image_label = ClickLabel(self.frame)
                pixmap = QtGui.QPixmap(home+"/"+str(0)+'.png')
                pixmap.setDevicePixelRatio(2.0)


        self.image_label.setPixmap(pixmap)
        

        self.frame.show()
        self.image_label.show()
        #self.frame2.show()
        try:
            if platform != 'darwin':
                os.remove('0.png')
            else:
                os.remove(home + '/' + '0.png')
        except:
            print('Image not found')
        #self.canvas.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Customization()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    
