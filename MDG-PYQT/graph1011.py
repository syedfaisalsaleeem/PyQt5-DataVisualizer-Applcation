# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graph.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from helper import ExtendedTextBox,BoxStyle,run_query,data_label_format
from super_graph import SuperGraph
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D
import matplotlib.cm
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import squarify
import pandas as pd
import helper
import circle as circ
from data_format_round import DataLabelFormatter 
BoxStyle._style_list["ext"] = ExtendedTextBox
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from TopBar import TopLearningSection
import pandas as pd
import dateformater
class Graph1011(SuperGraph):
    # constructor to intialize the variables
    def __init__(self,fields=None,prev_win=None,db_name=None,field_str=None,graph_class=None):
        SuperGraph.__init__(self)
        self.y_axis = 0
        self.fields = fields
        self.prev_win = prev_win
        self.db_name = db_name
        self.field_str= field_str
        self.graph_class = graph_class

    def setupUi(self, MainWindow):
        # close the previous window
        #self.prev_win.hide()
        self.main_window_layout = QVBoxLayout()
        self.main_window = MainWindow
        self.t = TopLearningSection()
        self.t.setup(self.main_window_layout )
        self.main_window_layout.setAlignment(Qt.AlignTop)
        # self.vbox.addLayout(self.hbox1)
        # self.vbox.addLayout(self.hbox)
        self.main_window.setLayout(self.main_window_layout)
        # self.centralwidget = MainWindow#QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        

        ## Adding top widget without scroll area
        self.fixedwidgettop = QWidget()
        self.fixedwidgettop.setStyleSheet('background:white')
        self.effect = QGraphicsDropShadowEffect(self.fixedwidgettop)
        self.effect.setOffset(0, 0)
        self.effect.setBlurRadius(10)
        self.fixedwidgettop.setGraphicsEffect(self.effect)
        self.fixedwidgettop.setFixedHeight(250)

        #THis is the main horizontal layout inside  fixed widget at the top
        self.hlayoutfixedwidgettop =  QHBoxLayout()
        self.hlayoutfixedwidgettop.setAlignment(Qt.AlignTop)

        self.smallwidgetinsidefixedwidgettop = QWidget()
        self.smallwidgetinsidefixedwidgettop.setStyleSheet("background:white")
        self.smallwidgetinsidefixedwidgettop.setFixedSize(1250,240)

        #Adding vertical layouts 4 columns inside small widget at top
        self.vlayoutfixedwidgettop = QVBoxLayout()
        self.vlayoutfixedwidgettop.setAlignment(Qt.AlignCenter)
        # self.vlayoutfixedwidgettop.setAlignment(Qt.AlignTop)
        self.smallwidgetinsidefixedwidgettop.setLayout(self.vlayoutfixedwidgettop)
        # self.smallwidgetinsidefixedwidgettop.setMinimumWidth(600)
        self.hlayoutfixedwidgettop.addStretch(1)
        self.hlayoutfixedwidgettop.addWidget(self.smallwidgetinsidefixedwidgettop)
        self.hlayoutfixedwidgettop.addStretch(1)
        self.fixedwidgettop.setLayout(self.hlayoutfixedwidgettop)
        
        self.hboxwidgetinsiderow3 = QHBoxLayout()
        self.hboxwidgetinsiderow3.setAlignment(Qt.AlignLeft)
        self.button3 = QWidget(self.smallwidgetinsidefixedwidgettop)
        self.button3.setFixedWidth(1250)
        
        self.button3.setLayout(self.hboxwidgetinsiderow3)
        self.pushButton_2 = QtWidgets.QPushButton(self.button3)
        self.pushButton_2.setStyleSheet('''
            QPushButton
            {
                padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
            }

            QPushButton::disabled
            {
                color: #acacac;
            }

            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }

            QPushButton:pressed
            {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            background: #6e98e0;
                color: white;

            }
            QPushButton:checked
            {
            padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
    background: #6e98e0;
                color: white;
            }
                ''')
        # self.pushButton_2.setGeometry(QtCore.QRect(10, 10, 150, 50))
        self.pushButton_2.setFixedSize(150, 40)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setText('Filter')
        self.pushButton_2.clicked.connect(self.open_filter)
        # self.vlayoutfixedwidgettop.addWidget(self.pushButton_2)

        ##Adding scrollablewidget with scrollarea

        self.main_window_layout.addWidget(self.fixedwidgettop)
        # self.mainwidget.setLayout(self.mainlayout)
        self.create_area(MainWindow,MainWindow.width(), MainWindow.height(),self.main_window_layout,self.fixedwidgettop,self.vlayoutfixedwidgettop,self.pushButton_2,self.smallwidgetinsidefixedwidgettop)



        self.get_data_from_table()
        
        self.run_spinner()
        # self.generate_graph(self.fields,self.y_axis,self.field_str)
        self.generate_top_text()
        self.vlayoutfixedwidgettop.addWidget(self.button3)
        self.hboxwidgetinsiderow3.addWidget(self.pushButton_2)
        self.generate_category_button()
        
        self.vlayoutfixedwidgettop.addStretch(1)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def create_sql_queries(self,flag=False, where_func=False):
        data = []
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        if flag:
            where_filters = where_func
        else:
            where_filters = ''
        where_sql = ''
        if self.fields['aggregate'][0] == 'Sum':
            select_sql = f'''select {character_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+= ''
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by coalesce(sum({number_selection}),0) desc'''
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Average':
            select_sql=f'''select {character_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+=''
            
            
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by coalesce(avg({number_selection}),0) desc'''
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Count':
            select_sql=f'''select {character_selection}, count(*) as {number_selection} from {self.db_name} '''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters=''
            
            
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by count(*) desc'''
            sql_statement = select_sql+where_sql+group_sql+order_sql
        print(sql_statement)
        df=run_query(sql_statement)
        data.append(df)
        #########2nd query ####################
        if flag:
            where_filters=where_func
        else:
            where_filters = ''
        where_sql = ''
        if self.fields['aggregate'][0] == 'Sum':
            select_sql=f'''select {character_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+=''
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by coalesce(sum({number_selection}),0) '''
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Average':
            select_sql=f'''select {character_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+=''
            
            
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by coalesce(avg({number_selection}),0) '''
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Count':
            select_sql=f'''select {character_selection}, count(*) as {number_selection} from {self.db_name} '''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters=''
            
            
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by count(*) '''
            sql_statement = select_sql+where_sql+group_sql+order_sql
        print(sql_statement)
        df=run_query(sql_statement)
        data.append(df)
        ####################### 3rd query ############################
        if flag:
            where_filters=where_func
        else:
            where_filters = ''
        where_sql = ''
        if self.fields['aggregate'][0] == 'Sum':
            select_sql=f'''select {character_selection}, coalesce(sum({number_selection}),0) as {number_selection} from {self.db_name}'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+=''
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by {character_selection} '''
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Average':
            select_sql=f'''select {character_selection}, coalesce(avg({number_selection}),0) as {number_selection} from {self.db_name}'''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters+=''
            
            
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by {character_selection} '''
            sql_statement = select_sql+where_sql+group_sql+order_sql
            
        elif self.fields['aggregate'][0] == 'Count':
            select_sql=f'''select {character_selection}, count(*) as {number_selection} from {self.db_name} '''
            if where_filters != '':
                where_sql+=' where ' + where_filters
            else:
                where_filters=''
            
            
            group_sql=f''' group by {character_selection}'''
            order_sql=f''' order by {character_selection} '''
            sql_statement = select_sql+where_sql+group_sql+order_sql
        print(sql_statement)
        df=run_query(sql_statement)
        data.append(df)

        return data
    def tick_degree(self,parameter,rotation='horizontal'):
        character_selection = self.fields['character'][0]
        no=0
        for i in parameter['dataframe'][character_selection]:
            no+=len(i)
        if no>120:
            degree=90 if rotation=='vertical' else 0
        elif no>100:
            degree=45 if rotation=='vertical' else 0
        elif no>65:
            degree=45 if rotation=='vertical' else 0
        elif no>60:
            degree=0 if rotation=='vertical' else 0
        elif no>40:
            degree=0 if rotation=='vetical' else 0
        else:
            degree=0 if rotation=='vertical' else 0
        return degree

    def titles(self):
    #0=regular
    #1=averagge color
    #2=average line
    #3=gradient
    #4=median color
    #5=median line
        title_list=[]
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['character'][0]).replace('_',' ')
            #parameter['title']= parameter['title'].title()
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ')
            #parameter['title']= parameter['title'].title()
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ')
            #parameter['title']= parameter['title'].title()
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - above or below average'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - above or below average'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - above or below average'
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - average line'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - average line'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - average line'
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - colored by ' + str(self.fields['number'][0]).replace('_',' ')
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - colored by ' + str(self.fields['number'][0]).replace('_',' ')
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - colored by ' + str(self.fields['number'][0]).replace('_',' ')
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - above or below median'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') +  ' - above or below median'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - above or below median'
        title= title.title()
        title_list.append(title)
        
        if self.fields['aggregate'][0]=='Sum':
            title = str(self.fields['number'][0]).replace('_',' ') + \
                             ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - median with quartiles'
        elif self.fields['aggregate'][0]=='Average':
            title = 'Average ' + str(self.fields['number'][0]).replace('_',' ') + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') +  ' - median with quartiles'
        
        elif self.fields['aggregate'][0]=='Count':
            title = 'Record count ' + \
            ' by ' + str(self.fields['character'][0]).replace('_',' ') + ' - median with quartiles'
        title= title.title()
        title_list.append(title)
        return title_list
        
    def data_function_bar_1011_bar_descending_above_below_average_Color(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[0].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        print(parameter['dataframe'])
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
                    
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[1]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]                
            
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max())*0.01
            
            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90
                
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            
            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
                
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
                
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1])-1
            
            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0
                
            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'
                
            if 'legend' in customizations.keys():
                
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True
            
            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
                
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree'] = self.tick_degree(parameter,'vertical')
            
            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'
            
            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'

            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] ='#555555'
                
            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best' 
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
                
        else:
            parameter['title']=self.titles()[1]
            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] = [0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max())*0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1])-1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree'] = self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['legend_placement'] = 'best'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
            print(parameter['dataframe'])
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], 
                                                         col=number_selection, 
                                                         format_=parameter['data_label_format'], 
                                                         frequency=parameter['data_label_frequency'], 
                                                         type_=parameter['data_label_type'], 
                                                         decimal=parameter['data_label_decimal'])         
        print("data function")
    
        return parameter

    def bar_1011_bar_descending_above_below_average_Color(self, parameters, kind, fields):
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            # a self.ax1 to axis
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'])
            # remove the right and top  spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # make data labels visible .
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['above_color'])
                # if the height of a bar is below average, color it with dark yellow
                if bar.get_height() < parameters['average']:
                    bar.set_color(parameters['below_color'])
            # legend
            if parameters['legend']:
                lines = [Line2D([0], [0], color=parameters['above_color'], lw=4),
                         Line2D([0], [0], color=parameters['below_color'], lw=4)]
                axis.legend(lines, ['Above Average', 'Below Average'], loc=parameters['legend_placement'])
            # draw average line
            x = axis.get_xlim()
            axis.plot([x[0], x[1]], [parameters['average'], parameters['average']],
                      color=parameters['center_line_color'])
            axis.set_xlim(x)
            dlf = DataLabelFormatter()
            average = dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                              format_=None, frequency=None,
                                              type_='normal', decimal=None)['data_label'].iloc[0]

            axis.text(x=parameters['center_x_position'],
                      y=parameters['average']+parameters['center_y_offset'],
                      va='bottom',
                      s="Average:"+average, ha='right',fontsize=parameters['data_label_font_size' ])
            # x,y label and x,y ticks
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
            axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_= parameters['data_label_format_axis'],
                                                  frequency= parameters['data_label_frequency_axis'],
                                                  type_= parameters['data_label_type_axis'],
                                                  decimal= parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background color
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width=1500)
            return axis, self.fig

# bar descending above below average line
    def data_function_bar_1011_bar_descending_above_below_average_Line(self,data, customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[2]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[2]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] = [min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = (parameter['dataframe'][number_selection].size) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def bar_1011_bar_descending_above_below_average_Line(self, parameters, kind, fields):
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # axis self.ax1 to axis
            axis=self.ax1
            bars=axis.bar(x=parameters['dataframe'][fields['character'][0]],
                          height=parameters['dataframe'][fields['number'][0]],
                          width=parameters['bar_width'])
            # remove the right ,top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # let data labels be visible.
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                 y_limit = axis.get_ylim()
                 if parameters['y_limit'][0] == 0:
                     axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                 else:
                     axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top' 
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['single_color'])
            # draw average line
            x = axis.get_xlim()
            axis.plot([x[0], x[1]], [parameters['average'], parameters['average']],
                      color=parameters['center_line_color'])
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            axis.text(x=parameters['center_x_position'],
                      y=parameters['average']+parameters['center_y_offset'],
                      s="Average:"+average,
                      ha='right',
                      va='bottom',fontsize=parameters['data_label_font_size' ])
            axis.set_xlim(x)

            # x label,y label and x ticks
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
            axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis,self. fig

# bar descending ----------------------------------------------------------------------------------------

    def data_function_bar_1011_bar_descending(self, data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            parameter['title']= parameter['title'].title()
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = len(parameter['dataframe'].iloc[:, 1]) - 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("data function")
        return parameter

    def bar_1011_bar_descending(self, parameters, kind, fields):
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # axis self.ax1 to axis
            axis = self.ax1
            bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'])
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # make data labels visible or in the range of the plot.
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['single_color'])
            # x,y label and x tick
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
            axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            dlf = DataLabelFormatter()
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# bar above below average color ascending---------------------------------------------------------------------------
    def data_function_bar_1011_bar_aescending_above_below_average_Color(self,data, customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[1]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 0

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'

            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper left'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            
        else:
            parameter['title']=self.titles()[1]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 0
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper left'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_aescending_above_below_average_Color(self, parameters, kind, fields):
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # axis self.ax1 to axis
            axis = self.ax1
            bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'])

            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # make data labels visible or in the range of the plot.
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['above_color'])
                # if the height of a bar is below average, color it with dark yellow
                if bar.get_height() < parameters['average']:
                        bar.set_color(parameters['below_color'])
            # legend
            if parameters['legend']:
                lines = [Line2D([0], [0], color=parameters['above_color'], lw=4),
                         Line2D([0], [0], color=parameters['below_color'], lw=4)]
                axis.legend(lines, ['Above Average', 'Below Average'], loc=parameters['legend_placement'])
            # draw average line
            x = axis.get_xlim()
            axis.plot([x[0], x[1]], [parameters['average'], parameters['average']],
                      color=parameters['center_line_color'])
            axis.set_xlim(x)
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            axis.text(x=parameters['center_x_position'],
                      y=parameters['average']+parameters['center_y_offset'],
                      s="Average:"+average,
                      va='bottom',
                      ha='left',fontsize=parameters['data_label_font_size' ])
            # x and y label
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
            axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# bar ascending above below average line

    def data_function_bar_1011_bar_aescending_above_below_average_Line(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[2]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 0

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[2]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 0
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("ZOAZAZAZA")
        return parameter

    def bar_1011_bar_aescending_above_below_average_Line(self, parameters, kind, fields):
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'])
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # make data labels visible or in the range of the plot.
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                     axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['single_color'])
            # draw average line
            x = axis.get_xlim()
            axis.plot([x[0], x[1]], [parameters['average'], parameters['average']],
                      color=parameters['center_line_color'])
            axis.set_xlim(x)
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            axis.text(x=parameters['center_x_position'],
                      y=parameters['average']+parameters['center_y_offset'],
                      s="Average:"+average,
                      va='bottom',
                      ha='left',fontsize=parameters['data_label_font_size' ])

            # x,y label and x ticks
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
            axis.set_xticklabels( parameters['dataframe'][fields['character'][0]],
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# bar ascending ----------------------------------------------------------------------------------------

    def data_function_bar_1011_bar_aescending(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_aescending(self, parameters, kind, fields):
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # axis self.ax1 to axis
            axis = self.ax1
            bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'])
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # make data labels visible or in the range of the plot.
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                                   y_limit[1] + parameters['data_label_offset']])
            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['single_color'])
            # x ,y label and x ticks
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
            axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            dlf = DataLabelFormatter()
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size'])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# ---------------------bar alphabetical colored by measure

    def data_function_bar_1011_bar_alphabetical_colored_by_measure(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])

        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if 'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='vertical'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]

            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='vertical'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data Function")
        return parameter

    def bar_1011_bar_alphabetical_colored_by_measure(self, parameters, kind, fields):
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.4, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # find and assign maximum value of the first(values) column
            max_d = parameters['dataframe'][fields['number'][0]].max()
            min_d = parameters['dataframe'][fields['number'][0]].min()
            min_gradient = min_d - (abs(max_d - min_d)*.1)
            # color normalizer
            norm = matplotlib.colors.Normalize(min_gradient, max_d)
            # generates colors from color map
            c_map = plt.cm.get_cmap(parameters['gradient'])
            c_map.set_gamma(parameters['gamma'])
            color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(parameters['dataframe'][fields['number'][0]])
            # axis self.ax1 to axis
            axis = self.ax1
            bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'],
                            color=color)
            # remove the right and top spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            # make data labels visible or in the range of the plot.
            if 45 < abs(parameters['data_label_degree']) % 360 < 315:
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim(0, parameters['y_limit'][1])
                else:
                    axis.set_ylim(parameters['y_limit'])
            else:
                y_limit = axis.get_ylim()
                if parameters['y_limit'][0] == 0:
                    axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
                else:
                    axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                                   y_limit[1] + parameters['data_label_offset']])
            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
                else:
                    rotation=parameters['data_label_degree']
                    va='bottom'
                    y=bar.get_height()+parameters['data_label_offset']
                axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            if parameters['legend']:
                dlf = DataLabelFormatter()
                df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
                color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
                if parameters['orientation']=='horizontal':
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                    label_rotation=0
                    axin.set_xticklabels(color_bar_ticks.iloc[i] for i in [0,-1])

                else:
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor = (1.05, 0.5, 0.03, 0.4),
                                  bbox_transform = axis.transAxes)
                    axin.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                    label_rotation = 90
                counter = len(parameters['dataframe'][fields['number'][0]])
                if counter == 1:
                    cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                                orientation = parameters['orientation'], shrink=0.2, ax=axis,
                                cax=axin, pad=0.5,
                                ticks=[min_d])
                elif counter==2:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                else:
                    cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values = parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks = [min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                if parameters['orientation'] == 'horizontal':
                    cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0,-1])
                else:
                    cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])

                cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
            # x,y label and x ticks
            axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_xticklabels(parameters['dataframe'][fields['character'][0]],
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ])
            dlf = DataLabelFormatter()
            ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['left'].set_visible(parameters['y_on'])
            axis.get_yaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# ---------------------bar ascending colored by measure

    def data_function_bar_1011_bar_aescending_colored_by_measure(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper left'

            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='horizontal'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
                
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper left'
            parameter['orientation']='horizontal'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_aescending_colored_by_measure(self, parameters,kind,fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # find and assign maximum value of the first(values) column
        max_d = parameters['dataframe'][fields['number'][0]].max()
        min_d = parameters['dataframe'][fields['number'][0]].min()

        min_gradient = min_d - (abs(max_d - min_d)*.1)
        # color normalizer
        norm = matplotlib.colors.Normalize(min_gradient, max_d)
        # generates colors from color map
        c_map = plt.cm.get_cmap(parameters['gradient'])
        c_map.set_gamma(parameters['gamma'])
        color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
            parameters['dataframe'][fields['number'][0]])
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'],
                        color=color)
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
            color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
            if parameters['orientation']=='horizontal':
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                label_rotation = 0
            else:
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.05, 0.5, 0.03, 0.4),
                                  bbox_transform=axis.transAxes)
                label_rotation = 90
            if len(bars) == 1:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                            orientation=parameters['orientation'], shrink=0.2, ax=axis,
                            cax=axin, pad=0.5,
                            ticks=[min_d])
        
            elif len(bars)==2:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)

            else:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d,max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
            if parameters['orientation'] == 'horizontal':
                cb.ax.set_xticklabels([color_bar_ticks.iloc[i] for i in [0, -1]],ha='left')
            else:
                cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
            cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        print('done')
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------bar descending colored by measure

    def data_function_bar_1011_bar_descending_colored_by_measure(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='vertical'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='vertical'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print('Data function')
        return parameter

    def bar_1011_bar_descending_colored_by_measure(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # find and assign maximum value of the first(values) column
        max_d = parameters['dataframe'][fields['number'][0]].max()
        min_d = parameters['dataframe'][fields['number'][0]].min()
        min_gradient = min_d - (abs(max_d - min_d)*.1)
        # color normalizer
        norm = matplotlib.colors.Normalize(min_gradient, max_d)
        # generates colors from color map
        c_map = plt.cm.get_cmap(parameters['gradient'])
        c_map.set_gamma(parameters['gamma'])
        color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
            parameters['dataframe'][fields['number'][0]])
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'],
                        color=color)
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
            color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
            if parameters['orientation']=='horizontal':
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                label_rotation=0
            else:
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.05, 0.5, 0.03, 0.4),
                                  bbox_transform=axis.transAxes)
                label_rotation=90
            if len(bars) == 1:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                            orientation=parameters['orientation'], shrink=0.2, ax=axis,
                            cax=axin, pad=0.5,
                            ticks=[min_d])
        
            elif len(bars)==2:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
            else:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
            if parameters['orientation'] == 'horizontal':
                cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
            else:
                cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
            cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------Bubble chart colored by measure

    def data_function_bubble_1011_bubble_chart_colored_by_measure(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='vertical'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18

        else:
            parameter['title']=self.titles()[3]
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='vertical'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bubble_1011_bubble_chart_colored_by_measure(self,parameters,kind,fields):
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # find and assign maximum value of the first(values) column
            max_d = parameters['dataframe'][fields['number'][0]].max()
            min_d = parameters['dataframe'][fields['number'][0]].min()
            min_gradient = min_d - (abs(max_d - min_d)*.1)
            # color normalizer
            norm = matplotlib.colors.Normalize(min_gradient, max_d)
            # generates colors from color map
            c_map = plt.cm.get_cmap(parameters['gradient'])
            c_map.set_gamma(parameters['gamma'])
            color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(parameters['dataframe'][fields['number'][0]])
            value = list(parameters['dataframe'][fields['number'][0]].map(abs))
            axis = self.ax1
            texts = list(parameters['dataframe'][fields['character'][0]])
            values = list(parameters['dataframe']['data_label'])
            text_colors = ['k' for i in values]
            for index in parameters['dataframe'][fields['number'][0]].index:
                ratio = parameters['dataframe'][fields['number'][0]][index]/(max_d)
                if ratio < 0.05:
                    texts[index] = ''
                    values[index] = ''
                if ratio >= 0.45:
                    text_colors[index] = 'white'
            circ.bubbles(circ.circlify(value),
                         ax=axis,
                         texts=texts,
                         color=matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(value),
                         labels=values,
                         text_colors=text_colors
                         #,
                         #font_size=parameters['data_label_font_size' ]
                         )
            # remove the right ,top,bottom and left spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            axis.spines['bottom'].set_visible(False)
            axis.spines['left'].set_visible(False)
            axis.get_yaxis().set_visible(False)
            axis.get_xaxis().set_visible(False)

            if parameters['legend']:
                dlf = DataLabelFormatter()
                df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
                color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
                if parameters['orientation']=='horizontal':
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                    label_rotation=0
                else:
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.05, 0.5, 0.03, 0.4),
                                  bbox_transform=axis.transAxes)
                    label_rotation=90
                counter = len(parameters['dataframe'][fields['number'][0]])
                if counter == 1:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                            orientation=parameters['orientation'], shrink=0.2, ax=axis,
                            cax=axin, pad=0.5,
                            ticks=[min_d])
        
                elif counter==2:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                else:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                if parameters['orientation'] == 'horizontal':
                    cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0,-1])
                else:
                    cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.55)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width=1500)
            return axis, self.fig


# ---------------------Bubble chart colored by category

    def data_function_bubble_1011_bubble_chart_colored_by_category(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
                
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bubble_1011_bubble_chart_colored_by_category(self,parameters,kind,fields):
            print('ZAZAZAZAZ')
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            parameters['dataframe'][fields['number'][0]] = parameters['dataframe'][fields['number'][0]].map(float)
            value = list(parameters['dataframe'][fields['number'][0]].map(abs))
            # find and assing maximum value of the first(values) column
            max_d = parameters['dataframe'][fields['number'][0]].max()
            axis = self.ax1
            texts =list(parameters['dataframe'][fields['character'][0]])
            values =list(parameters['dataframe']['data_label'])
            for index in parameters['dataframe'][fields['number'][0]].index:
                ratio = parameters['dataframe'][fields['number'][0]][index] / max_d
                if ratio < 0.05:
                    texts[index] = ''
                    values[index] = ''
            circ.bubbles(circ.circlify(value),
                         ax=axis,
                         texts=texts,
                         color=parameters['color_palette'][0:len(value)],
                         labels=values
                         #,
                         #font_size=parameters['data_label_font_size' ]
                         )
            # remove right,left,top and bottom spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            axis.spines['bottom'].set_visible(False)
            axis.spines['left'].set_visible(False)
            axis.get_yaxis().set_visible(False)
            axis.get_xaxis().set_visible(False)
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# ---------------------tree map colored by measure

    def data_function_tree_1011_tree_map_colored_by_measure(self, data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='horizontal'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='vertical'
            parameter['label_font_size']=12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def tree_1011_tree_map_colored_by_measure(self, parameters, kind, fields):
            print('ZAZAZAZAZ')
            self.fig = Figure((8, 8),dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # find and assing maximum value of the first(values) column
            max_d = parameters['dataframe'][fields['number'][0]].max()
            min_d = parameters['dataframe'][fields['number'][0]].min()
            min_gradient = min_d - (abs(max_d - min_d)*.1)
            # color normalizer
            norm = matplotlib.colors.Normalize(min_gradient, max_d)
            # generates colors from color map
            c_map = plt.cm.get_cmap(parameters['gradient'])
            c_map.set_gamma(parameters['gamma'])
            # axis self.ax1 to axis
            axis = self.ax1
            labels = parameters['dataframe'][fields['character'][0]]
            values = parameters['dataframe']['data_label']
            text_color = ['#000000' for i in values]
            for index in parameters['dataframe'][fields['number'][0]].index:
                ratio = parameters['dataframe'][fields['number'][0]][index] / max_d
                if ratio < 0.05:
                    labels.iloc[index] = ''
                    values.iloc[index] = ''
                if ratio >= 0.45:
                    text_color[index] = '#ffffff'
            squarify.plot(sizes=parameters['dataframe'][fields['number'][0]],
                          label=labels,
                          value=values,
                          ax=axis,
                          color=matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
                              parameters['dataframe'][fields['number'][0]]),
                          text_kwargs=dict(color=text_color,fontsize=parameters['data_label_font_size' ]))
            # remove the right ,top and bottom spines
            axis.spines['right'].set_visible(False)
            axis.spines['top'].set_visible(False)
            axis.spines['bottom'].set_visible(False)
            axis.spines['left'].set_visible(False)
            axis.get_yaxis().set_visible(False)
            axis.get_xaxis().set_visible(False)
            if parameters['legend']:
                dlf = DataLabelFormatter()
                df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
                color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
                if parameters['orientation']=='horizontal':
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                    label_rotation=0
                else:
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.05, 0.5, 0.03, 0.4),
                                  bbox_transform=axis.transAxes)
                    label_rotation=90
                counter = len(parameters['dataframe'][fields['number'][0]])
                if counter == 1:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                            orientation=parameters['orientation'], shrink=0.2, ax=axis,
                            cax=axin, pad=0.5,
                            ticks=[min_d])
        
                elif counter==2:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                else:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                if parameters['orientation'] == 'horizontal':
                    cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0,-1])
                else:
                    cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)

                cb.ax.tick_params(labelrotation=90)
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.55)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# ---------------------bar alphabetical above below median Line

    def data_function_bar_1011_bar_alphabetical_above_below_median_Line(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        median=df[number_selection].median()
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        df_with_extras = df
        df_with_extras['median'] = median
        parameter['Q1'] = q1
        parameter['Q3'] = q3
        parameter['median'] = median
        parameter['dataframe'] = df
        parameter['median'] = median
        df_with_median = df
        df_with_median['median']=median
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['median'])
        parameter['df_with_median']=df_with_median
        print(parameter['df_with_median'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[5]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'

            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[5]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='best'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_alphabetical_above_below_median_Line(self,parameters,kind,fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # draw median line
        x = axis.get_xlim()
        axis.plot([x[0], x[1]], [parameters['median'],
                                 parameters['median']], color=parameters['center_line_color'])
        axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                          color='#C0C0C0', alpha=0.8)
        axis.set_xlim(x)
        if parameters['legend']:
            dlf = DataLabelFormatter()
            median=dlf.data_label_formater(df=parameters['dataframe'], col='median',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Median:" + median], loc=parameters['legend_placement'])

        # x,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------bar alphabetical above below median Color

    def data_function_bar_1011_bar_alphabetical_above_below_median_Color(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        median=df[number_selection].median()
        parameter['dataframe'] = df
        parameter['median']=median
        df_with_median=df
        df_with_median['median']=median
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['median'])
        parameter['df_with_median']=df_with_median
        print(parameter['df_with_median'])
        # median graph quartile calculations
        median = df[number_selection].median()
        q1 = float(df[number_selection].quantile([0.25]))
        q3 = float(df[number_selection].quantile([0.75]))
        df_with_extras = df
        df_with_extras['median'] = median
        parameter['Q1'] = q1
        parameter['Q3'] = q3
        parameter['median'] = median
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[4]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'
            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'

            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[4]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='best'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_alphabetical_above_below_median_Color(self,parameters,kind,fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])

        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['above_color'])
            # if the height of a bar is below median, color it with dark yellow
            if bar.get_height() < parameters['median']:
                bar.set_color(parameters['below_color'])
        # legend
        if parameters['legend']:
            dlf = DataLabelFormatter()
            median=dlf.data_label_formater(df=parameters['dataframe'], col='median',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['above_color'], lw=4),
                     Line2D([0], [0], color=parameters['below_color'], lw=4),
                     Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ['Above median', 'Below median', "Median:" + median], loc=parameters['legend_placement'])

        # draw median line
        x = axis.get_xlim()
        axis.plot([x[0], x[1]], [parameters['median'],
                                 parameters['median']], color=parameters['center_line_color'])
        axis.fill_between(x=[x[0], x[1]], y1=parameters['Q1'], y2=parameters['Q3'],
                          color='#C0C0C0', alpha=0.8)
        axis.set_xlim(x)
        # x and y label
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------bar alphabetical above below average line

    def data_function_bar_1011_bar_alphabetical_above_below_average_Line(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[2]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[2]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]

            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='best'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_alphabetical_above_below_average_Line(self,parameters,kind,fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right ,top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # let data labels be visible.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
            # draw average line
            x = axis.get_xlim()
            axis.plot([x[0], x[1]], [parameters['average'], parameters['average']],
                      color=parameters['center_line_color'])
            axis.set_xlim(x)
        if parameters['legend']:
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ["Average:" + average], loc=parameters['legend_placement'])
        # x label,y label and x ticks
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------bar alphabetical above below average color

    def data_function_bar_1011_bar_alphabetical_above_below_average_Color(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[1]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[1]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='best'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_alphabetical_above_below_average_Color(self,parameters,kind,fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)

        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])

        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['above_color'])
            # if the height of a bar is below average, color it with dark yellow
            if bar.get_height() < parameters['average']:
                bar.set_color(parameters['below_color'])
        # legend
        if parameters['legend']:
            dlf = DataLabelFormatter()
            average= dlf.data_label_formater(df=parameters['dataframe'], col='average',
                                             format_=None,
                                             frequency=None,
                                             type_='normal',
                                             decimal=None)['data_label'].iloc[0]
            lines = [Line2D([0], [0], color=parameters['above_color'], lw=4),
                     Line2D([0], [0], color=parameters['below_color'], lw=4),
                     Line2D([0], [0], color=parameters['center_line_color'], lw=2)]
            axis.legend(lines, ['Above Average', 'Below Average', "Average:" + average],
                        loc=parameters['legend_placement'])
        # draw average line
        x = axis.get_xlim()
        axis.plot([x[0], x[1]], [parameters['average'], parameters['average']],
                  color=parameters['center_line_color'])
        axis.set_xlim(x)
        # x and y label
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------bar alphabetical

    def data_function_bar_1011_bar_alphabetical(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_alphabetical(self,parameters,kind,fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# -----------------------bar alphabetical colored by category

    def data_function_bar_1011_bar_alphabetical_colored_by_category(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = False

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = False
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_bar_alphabetical_colored_by_category(self,parameters,kind,fields):
        if parameters['legend']:
            self.fig,ax=plt.subplots(1,2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8,0.2]),
                                        figsize=(8,8))
            lines=[]
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            ax[1].legend(lines, parameters['dataframe'][fields['character'][0]],bbox_to_anchor=[1,0,0.2,1])
            # axis self.ax1 to axis
            axis = self.ax1=ax[0]
            # remove the right ,top and bottom spines
            ax[1].spines['right'].set_visible(False)
            ax[1].spines['top'].set_visible(False)
            ax[1].spines['bottom'].set_visible(False)
            ax[1].spines['left'].set_visible(False)
            ax[1].get_yaxis().set_visible(False)
            ax[1].get_xaxis().set_visible(False)
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis=self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.4, top=0.9,
                                 hspace=0.2, wspace=0.2)
        bars = axis.bar(x=parameters['dataframe'][fields['character'][0]],
                            height=parameters['dataframe'][fields['number'][0]],
                            width=parameters['bar_width'],
                            color=parameters['color_palette'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        if 45 < abs(parameters['data_label_degree']) % 360 < 315:
            if parameters['y_limit'][0] == 0:
                axis.set_ylim(0, parameters['y_limit'][1])
            else:
                axis.set_ylim(parameters['y_limit'])
        else:
            y_limit = axis.get_ylim()
            if parameters['y_limit'][0] == 0:
                axis.set_ylim([0, y_limit[1] + parameters['data_label_offset']])
            else:
                axis.set_ylim([y_limit[0] - parameters['data_label_offset'],
                               y_limit[1] + parameters['data_label_offset']])
        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_height()<0:
                    rotation=-parameters['data_label_degree']
                    va='top'
                    y=bar.get_height()-parameters['data_label_offset']
            else:
                rotation=parameters['data_label_degree']
                va='bottom'
                y=bar.get_height()+parameters['data_label_offset']
            axis.text(x=bar.get_x()+bar.get_width()/2,
                          y=y,
                          s=label,
                          ha='center',
                          va=va,
                          rotation=rotation,fontsize=parameters['data_label_font_size' ])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticks(range(parameters['dataframe'][fields['character'][0]].size))
        axis.set_xticklabels( parameters['dataframe'][fields['character'][0]],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------horizontal bar alphabetical

    def data_function_bar_1011_horizontal_bar_alphabetical(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[2].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average'] = df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'
            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter)
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_horizontal_bar_alphabetical(self ,parameters, kind, fields):
        print('EEREREER')
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.barh(y=parameters['dataframe'][fields['character'][0]],
                         width=parameters['dataframe'][fields['number'][0]],
                         height=parameters['bar_width'])

        # remove the right ,top and bottom spines
        axis.spines['top'].set_visible(False)
        axis.spines['right'].set_visible(False)

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_width()<0:
                    x=parameters['data_label_offset']
            else:
                x=bar.get_width()+parameters['data_label_offset']
            axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # x annd y label, y ticks and x ticks
        axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_yticklabels(parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ],va='center')
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_xticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_xticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['bottom'].set_visible(parameters['y_on'])
        axis.get_xaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45,va='center')
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------horizontal bar alphabetical colored by measure

    def data_function_bar_1011_horizontal_bar_alphabetical_colored_by_measure(self, data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[3]
               
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='vertical'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter)
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='vertical'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_horizontal_bar_alphabetical_colored_by_measure(self, parameters, kind, fields):
        print('EEREREER')
        self.fig = Figure((8, 8),dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # find and assign maximum value of the first(values) column
        max_d = parameters['dataframe'][fields['number'][0]].max()
        min_d = parameters['dataframe'][fields['number'][0]].min()
        min_gradient = min_d - (abs(max_d - min_d)*.1)
        # color normalizer
        norm = matplotlib.colors.Normalize(min_gradient, max_d)
        # generates colors from color map
        c_map = plt.cm.get_cmap(parameters['gradient'])
        c_map.set_gamma(parameters['gamma'])
        color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
            parameters['dataframe'][fields['number'][0]])
        # axis self.ax1 to axis
        axis = self.ax1
        bars=axis.barh(y=parameters['dataframe'][fields['character'][0]],
                       width=parameters['dataframe'][fields['number'][0]],
                       height=parameters['bar_width'],
                       color=matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(parameters['dataframe'][fields['number'][0]]))

        # remove the right and top  spines
        axis.spines['top'].set_visible(False)
        axis.spines['right'].set_visible(False)

        for bar, label in zip(bars,list(parameters['dataframe']['data_label'])):
            if bar.get_width()<0:
                    x=parameters['data_label_offset']
            else:
                x=bar.get_width()+parameters['data_label_offset']
            axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
                dlf = DataLabelFormatter()
                df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
                color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
                if parameters['orientation']=='horizontal':
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                    label_rotation=0
                else:
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.08, 0.5, 0.04, 0.4),
                                  bbox_transform=axis.transAxes)
                    label_rotation=90
                counter = len(parameters['dataframe'][fields['number'][0]])
                if counter == 1:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                            orientation=parameters['orientation'], shrink=0.2, ax=axis,
                            cax=axin, pad=0.5,
                            ticks=[min_d])
        
                elif counter==2:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                else:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                if parameters['orientation'] == 'horizontal':
                    cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                else:
                    cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)

                cb.ax.tick_params(labelrotation=90)
        # x and y label
        axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_yticklabels(parameters['dataframe'][fields['character'][0]],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ],va='center')
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_xticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_xticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['bottom'].set_visible(parameters['y_on'])
        axis.get_xaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------horizontal bar descending

    def data_function_bar_1011_horizontal_bar_descending(self, data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]

            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter)
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_horizontal_bar_descending(self, parameters, kind, fields):
        print('EEREREER')
        self.fig = Figure((8, 8),dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        axis = self.ax1
        bars = axis.barh(y=parameters['dataframe'][fields['character'][0]],
                       width=parameters['dataframe'][fields['number'][0]],
                       height=parameters['bar_width'])

        # remove the right ,top and bottom spines
        axis.spines['top'].set_visible(False)
        axis.spines['right'].set_visible(False)

        for bar, label in zip(bars,list(parameters['dataframe']['data_label'])):
            if bar.get_width()<0:
                    x=parameters['data_label_offset']
            else:
                x=bar.get_width()+parameters['data_label_offset']
            axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
            bar.set_color(parameters['single_color'])
        # x annd y label, y ticks and x ticks
        axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_yticklabels(parameters['dataframe'][fields['character'][0]],
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ],va='center')
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_xticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_xticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['bottom'].set_visible(parameters['y_on'])
        axis.get_xaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------horizontal bar descending colored by measure

    def data_function_bar_1011_horizontal_bar_descending_colored_by_measure(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if  'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='vertical'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]
            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter)
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='vertical'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_horizontal_bar_descending_colored_by_measure(self,parameters,kind,fields):
        print('EEREREER')
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # find and assign maximum value of the first(values) column
        max_d = parameters['dataframe'][fields['number'][0]].max()
        min_d = parameters['dataframe'][fields['number'][0]].min()
        min_gradient = min_d - (abs(max_d - min_d)*.1)
        # color normalizer
        norm = matplotlib.colors.Normalize(min_gradient, max_d)
        # generates colors from color map
        c_map = plt.cm.get_cmap(parameters['gradient'])
        c_map.set_gamma(parameters['gamma'])
        color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
            parameters['dataframe'][fields['number'][0]])
        # axis self.ax1 to axis
        axis = self.ax1
        bars = axis.barh(y=parameters['dataframe'][fields['character'][0]],
                         width=parameters['dataframe'][fields['number'][0]],
                         height=parameters['bar_width'],
                         color=matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
                             parameters['dataframe'][fields['number'][0]]))

        # remove the right and top  spines
        axis.spines['top'].set_visible(False)
        axis.spines['right'].set_visible(False)

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_width()<0:
                    x=parameters['data_label_offset']
            else:
                x=bar.get_width()+parameters['data_label_offset']
            axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
        if parameters['legend']:
                dlf = DataLabelFormatter()
                df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
                color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
                if parameters['orientation']=='horizontal':
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                    label_rotation=0
                else:
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.08, 0.5, 0.04, 0.4),
                                  bbox_transform=axis.transAxes)
                    label_rotation=90
                counter = len(parameters['dataframe'][fields['number'][0]])
                if counter == 1:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                            orientation=parameters['orientation'], shrink=0.2, ax=axis,
                            cax=axin, pad=0.5,
                            ticks=[min_d])
        
                elif counter==2:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                else:
                    cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
                if parameters['orientation'] == 'horizontal':
                    cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                else:
                    cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
        # x and y label
        axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_yticklabels(parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ],va='center')
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_xticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_xticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['bottom'].set_visible(parameters['y_on'])
        axis.get_xaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ---------------------horizontal bar ascending
    def data_function_bar_1011_horizontal_bar_ascending(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[1].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average'] = df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe'][number_selection].min()
                max_d = parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette'][0]
            else:
                parameter['color_palette'] = 'blue'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background'] = customizations['title_background']
            else:
                parameter['title_background'] = '#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color'] = customizations['title_text_color']
            else:
                parameter['title_text_color'] = 'white'
            if 'single_color' in customizations.keys():
                parameter['single_color'] = customizations['single_color']
            else:
                parameter['single_color'] = '#D4A6C8'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]

            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = 'blue'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter)
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background'] = '#555555'
            parameter['title_text_color'] = 'white'
            parameter['single_color'] = '#D4A6C8'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection,
                                                         format_=parameter['data_label_format'],
                                                         frequency=parameter['data_label_frequency'],
                                                         type_=parameter['data_label_type'],
                                                         decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_horizontal_bar_ascending(self, parameters, kind, fields):
            print('EEREREER')
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
            bars = axis.barh(y=parameters['dataframe'][fields['character'][0]],
                             width=parameters['dataframe'][fields['number'][0]],
                             height=parameters['bar_width'])

            # remove the right ,top and bottom spines
            axis.spines['top'].set_visible(False)
            axis.spines['right'].set_visible(False)

            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_width()<0:
                    x=parameters['data_label_offset']
                else:
                    x=bar.get_width()+parameters['data_label_offset']
                axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
                bar.set_color(parameters['single_color'])
            # x annd y label, y ticks and x ticks
            axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_yticklabels(parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ],va='center')
            dlf = DataLabelFormatter()
            ticks = pd.DataFrame(axis.get_xticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_xticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['bottom'].set_visible(parameters['y_on'])
            axis.get_xaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig

# ---------------------horizontal bar descending colored by measure

    def data_function_bar_1011_horizontal_bar_aescending_colored_by_measure(self,data, customizations=None):
            parameter = dict()
            number_selection = self.fields['number'][0]
            character_selection = self.fields['character'][0]
            df = data[1].copy()
            average = df[number_selection].mean()
            parameter['dataframe'] = df
            parameter['average'] = average
            df_with_average = df
            df_with_average['average'] = average
            print('this is the dataframe for waqas')
            print(parameter['dataframe'])
            print('this is the average for waqas')
            print(parameter['average'])
            parameter['df_with_average'] = df_with_average
            print(parameter['df_with_average'])
            if customizations != None:
                if 'title' in customizations.keys():
                    parameter['title'] = customizations['title']
                else:
                    parameter['title']=self.titles()[3]
                if 'gradient' in customizations.keys():
                    parameter['gradient'] = customizations['gradient']
                else:
                    parameter['gradient'] = 'Blues'

                if 'gamma' in customizations.keys():
                    parameter['gamma'] = customizations['gamma']

                else:
                    parameter['gamma'] = 0.5

                if 'y_limit' in customizations.keys():
                    parameter['y_limit'] = customizations['y_limit']
                else:
                    min_d = parameter['dataframe'][number_selection].min()
                    max_d = parameter['dataframe'][number_selection].max()
                    if min_d < 0:
                        parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
                    else:
                        parameter['y_limit'] = [0, max_d + max_d * 0.2]
                if 'data_label_offset' in customizations.keys():
                    parameter['data_label_offset'] = customizations['data_label_offset']
                else:
                    parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

                if 'data_label_degree' in customizations.keys():
                    parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
                else:
                    parameter['data_label_degree'] = 0
                if 'bar_width' in customizations.keys():
                    parameter['bar_width'] = customizations['bar_width']
                else:
                    parameter['bar_width'] = 0.6
                if 'center_x_position' in customizations.keys():
                    parameter['center_x_position'] = customizations['center_x_position']
                else:
                    parameter['center_x_position'] = 1

                if 'center_y_offset' in customizations.keys():
                    parameter['center_y_offset'] = customizations['center_y_offset']
                else:
                    parameter['center_y_offset'] = 0

                if 'center_line_color' in customizations.keys():
                    parameter['center_line_color'] = customizations['center_line_color']
                else:
                    parameter['center_line_color'] = 'k'

                if 'legend' in customizations.keys():
                    parameter['legend'] = customizations['legend']
                else:
                    parameter['legend'] = True

                if 'x_label' in customizations.keys():
                    parameter['x_label'] = customizations['x_label']
                else:
                    parameter['x_label'] = self.fields['character'][0].replace('_',' ')
                if 'x_tick_degree' in customizations.keys():
                    parameter['x_tick_degree'] = customizations['x_tick_degree']
                else:
                    parameter['x_tick_degree']=self.tick_degree(parameter)

                if 'y_label' in customizations.keys():
                    parameter['y_label'] = customizations['y_label']
                else:
                    parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                if 'background' in customizations.keys():
                    parameter['background'] = customizations['background']
                else:
                    parameter['background'] = 'white'

                if 'data_label_format' in customizations.keys():
                    parameter['data_label_format'] = customizations['data_label_format']
                else:
                    parameter['data_label_format'] = None

                if 'data_label_frequency' in customizations.keys():
                    parameter['data_label_frequency'] = customizations['data_label_frequency']
                else:
                    parameter['data_label_frequency'] = None

                if 'data_label_decimal' in customizations.keys():
                    parameter['data_label_decimal'] = customizations['data_label_decimal']
                else:
                    parameter['data_label_decimal'] = None

                if 'data_label_type' in customizations.keys():
                    parameter['data_label_type'] = customizations['data_label_type']
                else:
                    parameter['data_label_type'] = 'normal'
                if 'data_label_format_axis' in customizations.keys():
                    parameter['data_label_format_axis'] = customizations['data_label_format_axis']
                else:
                    parameter['data_label_format_axis'] = None

                if 'data_label_frequency_axis' in customizations.keys():
                    parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
                else:
                    parameter['data_label_frequency_axis'] = None

                if 'data_label_decimal_axis' in customizations.keys():
                    parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
                else:
                    parameter['data_label_decimal_axis'] = None

                if 'data_label_type_axis' in customizations.keys():
                    parameter['data_label_type_axis'] = customizations['data_label_type_axis']
                else:
                    parameter['data_label_type_axis'] = 'normal'
                if 'y_on' in customizations.keys():
                    parameter['y_on'] = customizations['y_on']
                else:
                    parameter['y_on'] = True
                if 'title_background' in customizations.keys():
                    parameter['title_background'] = customizations['title_background']
                else:
                    parameter['title_background'] = '#555555'

                if 'title_text_color' in customizations.keys():
                    parameter['title_text_color'] = customizations['title_text_color']
                else:
                    parameter['title_text_color'] = 'white'
                if 'legend_placement' in customizations.keys():
                    parameter['legend_placement'] = customizations['legend_placement']
                else:
                    parameter['legend_placement'] = 'upper right'
                if 'orientation' in customizations.keys():
                    parameter['orientation'] = customizations['orientation']
                else:
                    parameter['orientation'] = 'vertical'
                if 'label_font_size' in customizations.keys():
                    parameter['label_font_size']=customizations['label_font_size']
                else:
                    parameter['label_font_size']=12
                if 'tick_font_size' in customizations.keys():
                    parameter['tick_font_size' ] = customizations['tick_font_size']
                else:
                    parameter['tick_font_size' ] =12
                if 'data_label_font_size' in customizations.keys():
                    parameter['data_label_font_size' ] = customizations['data_label_font_size']
                else:
                    parameter['data_label_font_size' ] =12
                if 'title_font_size' in customizations.keys():
                    parameter['title_font_size']= customizations['title_font_size']
                else:
                    parameter['title_font_size']=18
            else:
                parameter['title']=self.titles()[3]
                parameter['gradient'] = 'Blues'
                parameter['gamma'] = 0.5
                min_d = parameter['dataframe'][number_selection].min()
                max_d = parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
                parameter['data_label_degree'] = 0
                parameter['bar_width'] = 0.6
                parameter['center_x_position'] = 1
                parameter['center_y_offset'] = 0
                parameter['center_line_color'] = 'k'
                parameter['legend'] = True
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
                parameter['x_tick_degree']=self.tick_degree(parameter)
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
                parameter['background'] = 'white'
                parameter['data_label_type'] = 'normal'
                parameter['data_label_decimal'] = None
                parameter['data_label_frequency'] = None
                parameter['data_label_format'] = None
                parameter['data_label_type_axis'] = 'normal'
                parameter['data_label_decimal_axis'] = None
                parameter['data_label_frequency_axis'] = None
                parameter['data_label_format_axis'] = None
                parameter['y_on'] = True
                parameter['title_background'] = '#555555'
                parameter['title_text_color'] = 'white'
                parameter['legend_placement'] = 'upper right'
                parameter['orientation'] = 'vertical'
                parameter['label_font_size']=12
                parameter['tick_font_size' ] =12
                parameter['data_label_font_size' ] =12
                parameter['title_font_size']=18
            dlf = DataLabelFormatter()
            parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection,
                                                             format_=parameter['data_label_format'],
                                                             frequency=parameter['data_label_frequency'],
                                                             type_=parameter['data_label_type'],
                                                             decimal=parameter['data_label_decimal'])
            print("Data function")
            return parameter

    def bar_1011_horizontal_bar_aescending_colored_by_measure(self, parameters, kind, fields):
            print('EEREREER')
            self.fig = Figure((8, 8), dpi=120)
            # self.fig.set_size_inches(5, 15, forward=True)
            self.fig.subplots_adjust(left=0, right=1,
                                     bottom=0.3, top=0.9,
                                     hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
            self.ax1 = self.fig.add_subplot()
            # find and assign maximum value of the first(values) column
            max_d = parameters['dataframe'][fields['number'][0]].max()
            min_d = parameters['dataframe'][fields['number'][0]].min()
            min_gradient = min_d - (abs(max_d - min_d)*.1)
            # color normalizer
            norm = matplotlib.colors.Normalize(min_gradient, max_d)
            # generates colors from color map
            c_map = plt.cm.get_cmap(parameters['gradient'])
            c_map.set_gamma(parameters['gamma'])
            color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
                parameters['dataframe'][fields['number'][0]])
            # axis self.ax1 to axis
            axis = self.ax1
            bars = axis.barh(y=parameters['dataframe'][fields['character'][0]],
                             width=parameters['dataframe'][fields['number'][0]],
                             height=parameters['bar_width'],
                             color=matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
                                 parameters['dataframe'][fields['number'][0]]))

            # remove the right and top  spines
            axis.spines['top'].set_visible(False)
            axis.spines['right'].set_visible(False)

            for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
                if bar.get_width()<0:
                    x=parameters['data_label_offset']
                else:
                    x=bar.get_width()+parameters['data_label_offset']
                axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
            if parameters['legend']:
                dlf = DataLabelFormatter()
                df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
                color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
                if parameters['orientation'] == 'horizontal':
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='35%', height="5%")
                    label_rotation = 0
                else:
                    axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                      bbox_to_anchor=(1.08, 0.5, 0.04, 0.4),
                                      bbox_transform=axis.transAxes)
                    label_rotation = 90
                counter = len(parameters['dataframe'][fields['number'][0]])
                if counter == 1:
                    cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                                      orientation=parameters['orientation'], shrink=0.2, ax=axis,
                                      cax=axin, pad=0.5)
                else:
                    cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                                      values=parameters['dataframe'][fields['number'][0]].sort_values(),
                                      ticks=[min_d, max_d],
                                      orientation=parameters['orientation'],
                                      shrink=0.2, ax=axis,
                                      cax=axin, pad=0.5)
                if parameters['orientation'] == 'horizontal':
                    cb.ax.set_xticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                else:
                    cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
                cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
            # x and y label
            axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
            axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
            axis.set_yticklabels(parameters['dataframe'][fields['character'][0]], 
                                 rotation=parameters['x_tick_degree'],
                                 fontsize=parameters['tick_font_size' ],va='center')
            dlf = DataLabelFormatter()
            ticks = pd.DataFrame(axis.get_xticks(), columns=['ticks'])
            tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                                  format_=parameters['data_label_format_axis'],
                                                  frequency=parameters['data_label_frequency_axis'],
                                                  type_=parameters['data_label_type_axis'],
                                                  decimal=parameters['data_label_decimal_axis'])['data_label']
            axis.set_xticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
            # background
            axis.set_facecolor(parameters['background'])
            self.fig.patch.set_facecolor(parameters['background'])
            # y axis on of
            axis.spines['bottom'].set_visible(parameters['y_on'])
            axis.get_xaxis().set_visible(parameters['y_on'])
            # title
            title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
            bb = title.get_bbox_patch()
            bb.set_boxstyle("ext", pad=0.5, width= 1500)
            return axis, self.fig
# ------------------horizontal bar alphabetical colored by category

    def data_function_bar_1011_horizontal_bar_alphabetical_colored_by_category(self,data ,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[2].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average'] = df_with_average
        print(parameter['df_with_average'])
        
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = (360-int(customizations['data_label_degree'])%360)
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = False

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter)

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = False
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter)
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def bar_1011_horizontal_bar_alphabetical_colored_by_category(self,parameters,kind,fields):
        if parameters['legend'] is True:
            self.fig, ax = plt.subplots(1,2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8,0.2]),
                                        figsize=(8,8))
            lines=[]
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            ax[1].legend(lines, parameters['dataframe'][fields['character'][0]],bbox_to_anchor=[1,0,0.2,1])
            # axis self.ax1 to axis
            axis = self.ax1=ax[0]
            # remove the right ,top and bottom spines
            ax[1].spines['right'].set_visible(False)
            ax[1].spines['top'].set_visible(False)
            ax[1].spines['bottom'].set_visible(False)
            ax[1].spines['left'].set_visible(False)
            ax[1].get_yaxis().set_visible(False)
            ax[1].get_xaxis().set_visible(False)
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis=self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        bars = axis.barh(y=parameters['dataframe'][fields['character'][0]],
                         width=parameters['dataframe'][fields['number'][0]],
                         height=parameters['bar_width'],
                         color=parameters['color_palette'])

        # remove the right ,top and bottom spines
        axis.spines['top'].set_visible(False)
        axis.spines['right'].set_visible(False)

        for bar, label in zip(bars, list(parameters['dataframe']['data_label'])):
            if bar.get_width()<0:
                    x=parameters['data_label_offset']
            else:
                x=bar.get_width()+parameters['data_label_offset']
            axis.text(x=x,
                      y=bar.get_y() + bar.get_height() / 2,
                      s=label,
                      ha='left',
                      va='center',
                      rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
        # x annd y label, y ticks and x ticks
        axis.set_ylabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_xlabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_yticklabels(parameters['dataframe'][fields['character'][0]], 
                             rotation=parameters['x_tick_degree'],
                             fontsize=parameters['tick_font_size' ],va='center')
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['bottom'].set_visible(parameters['y_on'])
        axis.get_xaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# -------------------tree map colored by category

    def data_function_tree_1011_tree_map_colored_by_category(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
                
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def tree_1011_tree_map_colored_by_category(self,parameters,kind,fields):
        print('ZAZAZAZAZ')
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
            # self.canvas = FigureCanvas(self.fig)
            # self.canvas.setParent(self.scrollAreaWidgetContents)
            # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        labels = parameters['dataframe'][fields['character'][0]]
        values = parameters['dataframe']['data_label']
        # find and assign maximum value of the first(values) column
        max_d = parameters['dataframe'][fields['number'][0]].max()
        for index in parameters['dataframe'][fields['number'][0]].index:
            ratio = parameters['dataframe'][fields['number'][0]][index] / max_d
            if ratio < 0.05:
                labels.iloc[index] = ''
                values.iloc[index] = ''
        squarify.plot(sizes=parameters['dataframe'][fields['number'][0]],
                      label=labels,
                      value=values,
                      ax=axis, alpha=0.8, edgecolor='white', linewidth=1,
                      color=parameters['color_palette'],
                      text_kwargs=dict(fontsize=parameters['data_label_font_size' ]))
        # remove all spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.spines['bottom'].set_visible(False)
        axis.spines['left'].set_visible(False)
        axis.get_yaxis().set_visible(False)
        axis.get_xaxis().set_visible(False)
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# ____________________Data table alphabetical

    def data_function_table_1011_data_table_alphabetic(self, data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[2].copy()
        #df = run_query(sql_statement)
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average'] = df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title'] = str(self.fields['aggregate'][0]).replace('_',' ') + ' of ' + str(number_selection).replace('_',' ') + ' by ' + str(
                    character_selection) + ' - sorted alphabetically'
            if 'yLimit' in customizations.keys():

                parameter['yLimit'] = customizations['yLimit']
            else:
                parameter['yLimit'] = (parameter['dataframe'].iloc[:, 1].max()) + (
                    parameter['dataframe'].iloc[:, 1].max()) * 0.2

            if 'datalabel_offset' in customizations.keys():
                parameter['datalabel_offset'] = customizations['offset']
            else:
                parameter['datalabel_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'dataLabelDegree' in customizations.keys():
                parameter['dataLabelDegree'] = customizations['dataLabelDegree']
            else:
                parameter['dataLabelDegree'] = 90

            if 'barWidth' in customizations.keys():
                parameter['barWidth'] = customizations['barWidth']
            else:
                parameter['barWidth'] = 0.6
            if 'legend' in customizations.keys():

                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'xlabel' in customizations.keys():
                parameter['xlabel'] = customizations['xlabel']
            else:
                parameter['xlabel'] = self.fields['character'][0]

            if 'xtickDegree' in customizations.keys():
                parameter['xtickDegree'] = customizations['tickDegree']
            else:
                parameter['xtickDegree'] = 90

            if 'ylabel' in customizations.keys():
                parameter['ylabel'] = customizations['ylabel']
            else:
                parameter['ylabel'] = self.fields['number'][0]
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'
            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='center'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title'] = str(self.fields['aggregate'][0]).replace('_',' ') + ' of ' + str(number_selection).replace('_',' ') + ' by ' + str(character_selection).replace('_',' ') + ' - sorted descending'
            parameter['yLimit'] = (parameter['dataframe'].iloc[:, 1].max()) + (parameter['dataframe'].iloc[:, 1].max()) * 0.2
            parameter['datalabel_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['Average_yoffset'] = 0
            parameter['dataLabelDegree'] = 90
            parameter['barWidth'] = 0.6
            parameter['legend'] = True
            parameter['xlabel'] = self.fields['character'][0]
            parameter['xtickDegree'] = 90
            parameter['ylabel'] = self.fields['number'][0]
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None

            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='center'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['title_font_size']=18
        print("ZOAZAZAZA")
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        #additional code
        parameter['name']=character_selection
        parameter['data']=number_selection
        return parameter

    def table_1011_data_table_alphabetic(self, parameters, kind, fields):
        self.fig = Figure((8, 8), dpi=120)
        # self.fig.set_size_inches(5, 15, forward=True)
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        # self.canvas = FigureCanvas(self.fig)
        # self.canvas.setParent(self.scrollAreaWidgetContents)
        # self.canvas.setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 450))
        self.ax1 = self.fig.add_subplot()
        # axis self.ax1 to axis
        axis = self.ax1
        table = axis.table(cellText=list(parameters['dataframe'][[parameters['name'],'data_label']].values.tolist()),
                          colLabels=[parameters['name'],parameters['data']],
                          rowLabels=parameters['dataframe'].index,
                          loc=parameters['legend_placement'])

        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
                # remove all spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        axis.spines['bottom'].set_visible(False)
        axis.spines['left'].set_visible(False)
        axis.get_yaxis().set_visible(False)
        axis.get_xaxis().set_visible(False)
        # axhline=axhline(y=0.5)
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.45)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# -------------------single stacked bar colored by category

    def data_function_stacked_bar_1011_descending_stacked_bar_colored_by_category(self,data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[0].copy()
        average=df[number_selection].mean()
        total = df[number_selection].sum()
        df['total_mdg'] = total
        df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d = parameter['dataframe'][number_selection].min()
                max_d = parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'

            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_total' in customizations.keys():
                parameter['data_label_frequency_total'] = customizations['data_label_frequency_total']
            else:
                parameter['data_label_frequency_total'] = None

            if 'data_label_decimal_total' in customizations.keys():
                parameter['data_label_decimal_total'] = customizations['data_label_decimal_total']
            else:
                parameter['data_label_decimal_total'] = None
            if 'data_label_format_total' in customizations.keys():
                parameter['data_label_format_total'] = customizations['data_label_format_total']
            else:
                parameter['data_label_format_total'] = None
            if 'data_label_type_total' in customizations.keys():
                parameter['data_label_type_total'] = customizations['data_label_type_total']
            else:
                parameter['data_label_type_total'] = 'normal'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = False
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_total_font_size' in customizations.keys():
                parameter['data_label_total_font_size'] = customizations['data_label_total_font_size']
            else:
                parameter['data_label_total_font_size'] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            
        else:
            parameter['title']=self.titles()[0]
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            min_d = parameter['dataframe'][number_selection].min()
            max_d = parameter['dataframe'][number_selection].max()
            if min_d < 0:
                parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
            else:
                parameter['y_limit'] = [0, max_d + max_d * 0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['data_label_type_total'] = 'normal'
            parameter['data_label_decimal_total'] = None
            parameter['data_label_frequency_total'] = None
            parameter['data_label_format_total'] = None
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_total_font_size'] =12
            parameter['title_font_size']=18
            parameter['legend_placement']='best'
            parameter['y_on'] = False
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def stacked_bar_1011_descending_stacked_bar_colored_by_category(self, parameters, kind, fields):
        sum_d = parameters['dataframe'][fields['number'][0]].sum()
        max_d = parameters['dataframe'][fields['number'][0]].max()
        if parameters['legend']:
            lines = []
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            if parameters['legend_placement']=='outside':
                self.fig, ax = plt.subplots(1, 2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8, 0.2]),
                                        figsize=(8, 8))
                ax[1].legend(lines, parameters['dataframe'][fields['character'][0]], bbox_to_anchor=[1, 0, 0.2, 1])
                # axis self.ax1 to axis
                axis = self.ax1 = ax[0]
                # remove the right ,top and bottom spines
                ax[1].spines['right'].set_visible(False)
                ax[1].spines['top'].set_visible(False)
                ax[1].spines['bottom'].set_visible(False)
                ax[1].spines['left'].set_visible(False)
                ax[1].get_yaxis().set_visible(False)
                ax[1].get_xaxis().set_visible(False)
            else:
                self.fig = Figure((8, 8), dpi=120)
                self.ax1 = self.fig.add_subplot()
                axis = self.ax1
                axis.legend(lines, parameters['dataframe'][fields['character'][0]],loc=parameters['legend_placement'])
                
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        bottom_positive = list(
            pd.DataFrame(filter(lambda x: x > 0, parameters['dataframe'][fields['number'][0]])).values.cumsum())
        bottom_negative = list(
            pd.DataFrame(filter(lambda x: x < 0, parameters['dataframe'][fields['number'][0]])).values.cumsum())
        neg = 0
        pos = 0
        bottom = []
        bottom_positive.insert(0, 0)
        bottom_negative.insert(0, 0)
        for i in parameters['dataframe'][fields['number'][0]]:
            if i >= 0:
                bottom.append(bottom_positive[pos])
                pos += 1
            else:
                bottom.append(bottom_negative[neg])
                neg += 1
        bars = axis.bar(x=1,
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'],
                        bottom=bottom,
                        color=parameters['color_palette'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        dlf = DataLabelFormatter()
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_of_total_mdg',
                                                 format_=parameters['data_label_format_percent'],
                                                 frequency=parameters['data_label_frequency_percent'],
                                                 type_=parameters['data_label_type_percent'],
                                                 decimal=parameters['data_label_decimal_percent'])['data_label']
        for i, (bar, label, percent_label) in enumerate(
                zip(bars, list(parameters['dataframe']['data_label']), percent_labels)):
            if abs(bar.get_height()) / abs(max_d) > 0.046:
                axis.text(x=bar.get_x() + bar.get_width() / 2,
                          y=bottom[i] + bar.get_height() / 2,
                          s=label + '    {}'.format(percent_label),
                          ha='center',
                          va='center',
                          rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
        axis.text(x=bar.get_x() + bar.get_width() / 2,
                  y=bottom_positive[-1] + parameters['data_label_offset'] * 2,
                  s=dlf.data_label_formater(df=parameters['dataframe'].copy(), col='total_mdg',
                                            format_=parameters['data_label_format_total'],
                                            frequency=parameters['data_label_frequency_total'],
                                            type_=parameters['data_label_type_total'],
                                            decimal=parameters['data_label_decimal_total'])['data_label'].iloc[0],
                  ha='center',
                  va='bottom',
                  rotation=parameters['data_label_degree'],fontsize=parameters['data_label_total_font_size'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticklabels('', rotation=parameters['x_tick_degree'])
        # x axis off
        axis.spines['bottom'].set_visible(False)
        axis.get_xaxis().set_visible(False)
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'])
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

# -------------------single stacked bar ascending colored by category
    def data_function_stacked_bar_1011_ascending_stacked_bar_colored_by_category(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[1].copy()
        average=df[number_selection].mean()
        total = df[number_selection].sum()
        df['total_mdg'] = total
        df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d < 0:
                    parameter['y_limit'] = [min_d - max_d * 0.2, max_d + max_d * 0.2]
                else:
                    parameter['y_limit'] = [0, max_d + max_d * 0.2]
            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'
            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'
            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'data_label_format_total' in customizations.keys():
                parameter['data_label_format_total'] = customizations['data_label_format_total']
            else:
                parameter['data_label_format_total'] = None
            if 'data_label_frequency_total' in customizations.keys():
                parameter['data_label_frequency_total'] = customizations['data_label_frequency_total']
            else:
                parameter['data_label_frequency_total'] = None

            if 'data_label_decimal_total' in customizations.keys():
                parameter['data_label_decimal_total'] = customizations['data_label_decimal_total']
            else:
                parameter['data_label_decimal_total'] = None

            if 'data_label_type_total' in customizations.keys():
                parameter['data_label_type_total'] = customizations['data_label_type_total']
            else:
                parameter['data_label_type_total'] = 'normal'
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = False
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_total_font_size' in customizations.keys():
                parameter['data_label_total_font_size'] = customizations['data_label_total_font_size']
            else:
                parameter['data_label_total_font_size'] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
        else:
            parameter['title']=self.titles()[0]
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['data_label_type_total'] = 'normal'
            parameter['data_label_decimal_total'] = None
            parameter['data_label_frequency_total'] = None
            parameter['data_label_format_total'] = None
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['y_on'] = False
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_total_font_size'] =12
            parameter['title_font_size']=18
            parameter['legend_placement']='best'
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def stacked_bar_1011_ascending_stacked_bar_colored_by_category(self, parameters, kind, fields):
        sum_d=parameters['dataframe'][fields['number'][0]].sum()
        max_d=parameters['dataframe'][fields['number'][0]].max()
        if parameters['legend']:
            lines = []
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            if parameters['legend_placement']=='outside':
                self.fig, ax = plt.subplots(1, 2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8, 0.2]),
                                        figsize=(8, 8))
                ax[1].legend(lines, parameters['dataframe'][fields['character'][0]], bbox_to_anchor=[1, 0, 0.2, 1])
                # axis self.ax1 to axis
                axis = self.ax1 = ax[0]
                # remove the right ,top and bottom spines
                ax[1].spines['right'].set_visible(False)
                ax[1].spines['top'].set_visible(False)
                ax[1].spines['bottom'].set_visible(False)
                ax[1].spines['left'].set_visible(False)
                ax[1].get_yaxis().set_visible(False)
                ax[1].get_xaxis().set_visible(False)
            else:
                self.fig = Figure((8, 8), dpi=120)
                self.ax1 = self.fig.add_subplot()
                axis = self.ax1
                axis.legend(lines, parameters['dataframe'][fields['character'][0]],loc=parameters['legend_placement'])
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis=self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        bottom_positive = list(pd.DataFrame(filter(lambda x:x>0,parameters['dataframe'][fields['number'][0]])).values.cumsum())
        bottom_negative = list(pd.DataFrame(filter(lambda x:x<0,parameters['dataframe'][fields['number'][0]])).values.cumsum())
        neg=0
        pos=0
        bottom=[]
        bottom_positive.insert(0,0)
        bottom_negative.insert(0,0)
        for i in parameters['dataframe'][fields['number'][0]]:
            if i>=0:
                bottom.append(bottom_positive[pos])
                pos+=1
            else:
                bottom.append(bottom_negative[neg])
                neg+=1
        bars = axis.bar(x=1,
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'],
                        bottom=bottom,
                        color=parameters['color_palette'])
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        dlf = DataLabelFormatter()
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_of_total_mdg',
                                format_=parameters['data_label_format_percent'],
                                frequency=parameters['data_label_frequency_percent'],
                                type_=parameters['data_label_type_percent'],
                                decimal=parameters['data_label_decimal_percent'])['data_label']
        for i, (bar, label, percent_label) in enumerate(
                zip(bars, list(parameters['dataframe']['data_label']), percent_labels)):
            if abs(bar.get_height())/abs(max_d) > 0.046:
                axis.text(x=bar.get_x() + bar.get_width() / 2,
                          y=bottom[i] + bar.get_height() / 2,
                          s=label + '    {}'.format(percent_label),
                          ha='center',
                          va='center',
                          rotation=parameters['data_label_degree'],fontsize=parameters['data_label_font_size' ])
        axis.text(x=bar.get_x() + bar.get_width() / 2,
                  y=bottom_positive[-1]+ parameters['data_label_offset'] * 2,
                  s=dlf.data_label_formater(df=parameters['dataframe'].copy(), col='total_mdg',
                                            format_=parameters['data_label_format_total'],
                                            frequency=parameters['data_label_frequency_total'],
                                            type_=parameters['data_label_type_total'],
                                            decimal=parameters['data_label_decimal_total'])['data_label'].iloc[0],
                  ha='center',
                  va='bottom',
                  rotation=parameters['data_label_degree'],fontsize=parameters['data_label_total_font_size'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticklabels('', rotation=parameters['x_tick_degree'])
        # x axis off
        axis.spines['bottom'].set_visible(False)
        axis.get_xaxis().set_visible(False)
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.5)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig
# -------------------single stacked bar alphabetical colored by measure
    def data_function_stacked_bar_1011_alphabetical_stacked_bar_colored_by_measure(self,data,customizations=None):
        parameter = dict()
        number_selection=self.fields['number'][0]
        character_selection=self.fields['character'][0]
        df = data[2].copy()
        average=df[number_selection].mean()
        total = df[number_selection].sum()
        df['total_mdg'] = total
        df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
        parameter['dataframe'] = df
        parameter['average']=average
        df_with_average=df
        df_with_average['average']=average
        print('this is the dataframe for bsizzle')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average']=df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title']=customizations['title']
            else:
                parameter['title']=self.titles()[3]
            if 'gradient' in customizations.keys():
                parameter['gradient'] = customizations['gradient']
            else:
                parameter['gradient'] = 'Blues'

            if 'gamma' in customizations.keys():
                parameter['gamma'] = customizations['gamma']

            else:
                parameter['gamma'] = 0.5

            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                parameter['data_label_degree'] = 0
            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6

            if 'below_color' in customizations.keys():
                parameter['below_color'] = customizations['below_color']
            else:
                parameter['below_color'] = '#4E79A7'
            if 'above_color' in customizations.keys():
                parameter['above_color'] = customizations['above_color']
            else:
                parameter['above_color'] = '#A0CBE8'
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'

            if 'data_label_format_axis' in customizations.keys():
                parameter['data_label_format_axis'] = customizations['data_label_format_axis']
            else:
                parameter['data_label_format_axis'] = None

            if 'data_label_frequency_axis' in customizations.keys():
                parameter['data_label_frequency_axis'] = customizations['data_label_frequency_axis']
            else:
                parameter['data_label_frequency_axis'] = None

            if 'data_label_decimal_axis' in customizations.keys():
                parameter['data_label_decimal_axis'] = customizations['data_label_decimal_axis']
            else:
                parameter['data_label_decimal_axis'] = None

            if 'data_label_type_axis' in customizations.keys():
                parameter['data_label_type_axis'] = customizations['data_label_type_axis']
            else:
                parameter['data_label_type_axis'] = 'normal'

            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'

            if 'data_label_format_total' in customizations.keys():
                parameter['data_label_format_total'] = customizations['data_label_format_total']
            else:
                parameter['data_label_format_total'] = None

            if 'data_label_frequency_total' in customizations.keys():
                parameter['data_label_frequency_total'] = customizations['data_label_frequency_total']
            else:
                parameter['data_label_frequency_total'] = None

            if 'data_label_decimal_total' in customizations.keys():
                parameter['data_label_decimal_total'] = customizations['data_label_decimal_total']
            else:
                parameter['data_label_decimal_total'] = None

            if 'data_label_type_total' in customizations.keys():
                parameter['data_label_type_total'] = customizations['data_label_type_total']
            else:
                parameter['data_label_type_total'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = False
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if 'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='upper right'
            if 'orientation' in customizations.keys():
                parameter['orientation']=customizations['orientation']
            else:
                parameter['orientation']='horizontal'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
            if 'data_label_font_size' in customizations.keys():
                parameter['data_label_font_size' ] = customizations['data_label_font_size']
            else:
                parameter['data_label_font_size' ] =12
            if 'data_label_total_font_size' in customizations.keys():
                parameter['data_label_total_font_size'] = customizations['data_label_total_font_size']
            else:
                parameter['data_label_total_font_size'] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[3]

            parameter['gradient'] = 'Blues'
            parameter['gamma'] = 0.5
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            parameter['data_label_degree'] = 0
            parameter['bar_width'] = 0.6
            parameter['below_color'] = '#4E79A7'
            parameter['above_color'] = '#A0CBE8'
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_axis'] = 'normal'
            parameter['data_label_decimal_axis'] = None
            parameter['data_label_frequency_axis'] = None
            parameter['data_label_format_axis'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['data_label_type_total'] = 'normal'
            parameter['data_label_decimal_total'] = None
            parameter['data_label_frequency_total'] = None
            parameter['data_label_format_total'] = None
            parameter['y_on'] = False
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='upper right'
            parameter['orientation']='horizontal'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_font_size' ] =12
            parameter['data_label_total_font_size'] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data Function")
        return parameter

    def stacked_bar_1011_alphabetical_stacked_bar_colored_by_measure(self, parameters, kind, fields):
        max_d = parameters['dataframe'][fields['number'][0]].max()
        min_d = parameters['dataframe'][fields['number'][0]].min()
        sum_d=parameters['dataframe'][fields['number'][0]].sum()
        min_gradient = min_d - (abs(max_d - min_d)*.1)
        # color normalizer
        norm = matplotlib.colors.Normalize(min_gradient, max_d)
        # generates colors from color map
        c_map = plt.cm.get_cmap(parameters['gradient'])
        c_map.set_gamma(parameters['gamma'])
        color = matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map).to_rgba(
            parameters['dataframe'][fields['number'][0]])
        if parameters['legend']:
            dlf = DataLabelFormatter()
            df= dlf.data_label_formater(df=parameters['dataframe'].copy(),
                                            col=fields['number'][0], format_=None,
                                            frequency=None,
                                            type_='normal',
                                            decimal=None)
            color_bar_ticks =df.sort_values(by=fields['number'][0])['data_label']
            self.fig,ax=plt.subplots(1,2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8,0.2]),
                                        figsize=(8,8))
            lines=[]
            for value in color:
                lines.append(Line2D([0], [0], color=value, lw=2))
            ax[1].legend(lines, parameters['dataframe'][fields['character'][0]],bbox_to_anchor=[1,-0.1,0.2,1])
            # axis self.ax1 to axis
            axis = self.ax1=ax[0]
            # remove the right ,top and bottom spines
            ax[1].spines['right'].set_visible(False)
            ax[1].spines['top'].set_visible(False)
            ax[1].spines['bottom'].set_visible(False)
            ax[1].spines['left'].set_visible(False)
            ax[1].get_yaxis().set_visible(False)
            ax[1].get_xaxis().set_visible(False)
            if parameters['orientation']=='horizontal':
                axin = inset_axes(ax[1], loc=parameters['legend_placement'], width='100%', height="4%",
                                  bbox_to_anchor=(1, 0, 0.4, 1),
                                  bbox_transform=axis.transAxes)
                label_rotation=0
            else:
                axin = inset_axes(axis, loc=parameters['legend_placement'], width='100%', height="100%",
                                  bbox_to_anchor=(1.05, 0.5, 0.03, 0.4),
                                  bbox_transform=axis.transAxes)
                label_rotation=90
            counter = len(parameters['dataframe'][fields['number'][0]])
            if counter == 1:
                cb = plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                                orientation=parameters['orientation'], 
                                shrink=0.2,
                                ticks=[min_d],
                                ax=axis,
                                cax=axin, pad=0.5)
            elif counter==2:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=[max_d,min_d],
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
            else:
                cb=plt.colorbar(matplotlib.cm.ScalarMappable(norm=norm, cmap=c_map),
                             values=parameters['dataframe'][fields['number'][0]].sort_values(),
                             ticks=[min_d, max_d],
                             orientation=parameters['orientation'],
                             shrink=0.2, ax=axis,
                             cax=axin, pad=0.5)
            if parameters['orientation'] == 'horizontal':
                cb.ax.set_xticklabels([color_bar_ticks.iloc[i] for i in [0, -1]],
                                          ha='left')
            else:
                cb.ax.set_yticklabels(color_bar_ticks.iloc[i] for i in [0, -1])
            cb.ax.tick_params(labelrotation=label_rotation,axis=u'both', which=u'both',length=0)
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis=self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        bottom_positive=list(pd.DataFrame(filter(lambda x:x>0,parameters['dataframe'][fields['number'][0]])).values.cumsum())
        bottom_negative=list(pd.DataFrame(filter(lambda x:x<0,parameters['dataframe'][fields['number'][0]])).values.cumsum())
        neg=0
        pos=0
        bottom=[]
        bottom_positive.insert(0,0)
        bottom_negative.insert(0,0)
        for i in parameters['dataframe'][fields['number'][0]]:
            if i>=0:
                bottom.append(bottom_positive[pos])
                pos+=1
            else:
                bottom.append(bottom_negative[neg])
                neg+=1
        bars = axis.bar(x=1,
                        height=parameters['dataframe'][fields['number'][0]],
                        width=parameters['bar_width'],
                        bottom=bottom,
                        color=color)
        # remove the right and top spines
        axis.spines['right'].set_visible(False)
        axis.spines['top'].set_visible(False)
        # make data labels visible or in the range of the plot.
        # x axis off
        axis.spines['bottom'].set_visible(False)
        axis.get_xaxis().set_visible(False)
        dlf = DataLabelFormatter()
        percent_labels = dlf.data_label_formater(df=parameters['dataframe'].copy(), col='percent_of_total_mdg',
                                  format_=parameters['data_label_format_percent'],
                                frequency=parameters['data_label_frequency_percent'],
                                type_=parameters['data_label_type_percent'],
                                decimal=parameters['data_label_decimal_percent'])['data_label']
        for i, (bar, label, percent_label) in enumerate(
                zip(bars, list(parameters['dataframe']['data_label']), percent_labels)):
            if abs(bar.get_height())/abs(max_d) > 0.046:
                axis.text(x=bar.get_x() + bar.get_width() / 2,
                          y=bottom[i] + bar.get_height() / 2,
                          s=label + '    {}'.format(percent_label),
                          ha='center',
                          va='center',
                          rotation=parameters['data_label_degree'])
        axis.text(x=bar.get_x() + bar.get_width() / 2,
                  y=bottom_positive[-1] + parameters['data_label_offset'] * 2,
                  s=dlf.data_label_formater(df=parameters['dataframe'].copy(), col='total_mdg',
                                                 format_=parameters['data_label_format_total'],
                                                 frequency=parameters['data_label_frequency_total'],
                                                 type_=parameters['data_label_type_total'],
                                                 decimal=parameters['data_label_decimal_total'])['data_label'].iloc[0],
                  ha='center',
                  va='bottom',
                  rotation=parameters['data_label_degree'],fontsize=parameters['data_label_total_font_size'])
        # x,y label and x tick
        axis.set_xlabel(parameters['x_label'],fontsize=parameters['label_font_size'])
        axis.set_ylabel(parameters['y_label'],fontsize=parameters['label_font_size'])
        axis.set_xticklabels('', rotation=parameters['x_tick_degree'])
        dlf = DataLabelFormatter()
        ticks = pd.DataFrame(axis.get_yticks(), columns=['ticks'])
        tick_labels = dlf.data_label_formater(df=ticks, col='ticks',
                                              format_=parameters['data_label_format_axis'],
                                              frequency=parameters['data_label_frequency_axis'],
                                              type_=parameters['data_label_type_axis'],
                                              decimal=parameters['data_label_decimal_axis'])['data_label']
        axis.set_yticklabels(tick_labels,fontsize=parameters['tick_font_size' ])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.55)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width= 1500)
        return axis, self.fig

    def data_function_pie_1011_pie(self,data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[1].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        total = df[number_selection].sum()
        df['total_mdg'] = total
        df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
        parameter['dataframe'] = df
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average'] = df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'

            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
                
            if 'data_label_percent_font_size' in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='best'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_percent_font_size' ] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def pie_1011_pie(self, parameters, kind, fields):
        if parameters['legend']:
            lines = []
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            if parameters['legend_placement'] == 'outside':
                self.fig, ax = plt.subplots(1, 2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8, 0.2]),
                                        figsize=(8, 8))
                ax[1].legend(lines, parameters['dataframe'][fields['character'][0]], bbox_to_anchor=[1, 0, 0.2, 1])
                # axis self.ax1 to axis
                axis = self.ax1 = ax[0]
                # remove the right ,top and bottom spines
                ax[1].spines['right'].set_visible(False)
                ax[1].spines['top'].set_visible(False)
                ax[1].spines['bottom'].set_visible(False)
                ax[1].spines['left'].set_visible(False)
                ax[1].get_yaxis().set_visible(False)
                ax[1].get_xaxis().set_visible(False)
            else:
                self.fig = Figure((8, 8), dpi=120)
                self.ax1 = self.fig.add_subplot()
                axis = self.ax1
                axis.legend(lines, parameters['dataframe'][fields['character'][0]],loc=parameters['legend_placement'])
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis=self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        dlf = DataLabelFormatter()
        axis.pie(x=[i for i in parameters['dataframe']['percent_of_total_mdg'] if i>0],
                   labels=[parameters['dataframe']['data_label'].iloc[i] for i in parameters['dataframe']['percent_of_total_mdg'].index
                           if parameters['dataframe']['percent_of_total_mdg'].iloc[i]>0] ,
                   colors=parameters['color_palette'],
                   autopct=lambda x: dlf.data_label_formater(pd.DataFrame([x/100],columns=['percentage']), col='percentage',
                                                           format_=parameters['data_label_format_percent'],
                                                           frequency=parameters['data_label_frequency_percent'],
                                                           type_=parameters['data_label_type_percent'],
                                                           decimal=parameters['data_label_decimal_percent'])['data_label'].iloc[0]
                   ,textprops=dict(fontsize=parameters['data_label_percent_font_size' ]))

        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.55)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1500)
        return axis, self.fig

    def data_function_donut_1011_donut(self,data,customizations=None):
        parameter = dict()
        number_selection = self.fields['number'][0]
        character_selection = self.fields['character'][0]
        df = data[1].copy()
        average = df[number_selection].mean()
        parameter['dataframe'] = df
        parameter['average'] = average
        df_with_average = df
        df_with_average['average'] = average
        total = df[number_selection].sum()
        df['total_mdg'] = total
        df['percent_of_total_mdg'] = round(df[number_selection] / total, 4)
        parameter['dataframe'] = df
        print('this is the dataframe for waqas')
        print(parameter['dataframe'])
        print('this is the average for waqas')
        print(parameter['average'])
        parameter['df_with_average'] = df_with_average
        print(parameter['df_with_average'])
        if customizations != None:
            if 'title' in customizations.keys():
                parameter['title'] = customizations['title']
            else:
                parameter['title']=self.titles()[0]
            if 'y_limit' in customizations.keys():
                parameter['y_limit'] = customizations['y_limit']
            else:
                min_d=parameter['dataframe'][number_selection].min()
                max_d=parameter['dataframe'][number_selection].max()
                if min_d<0:
                    parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
                else:
                    parameter['y_limit'] =[0,max_d+max_d*0.2]

            if 'data_label_offset' in customizations.keys():
                parameter['data_label_offset'] = customizations['data_label_offset']
            else:
                parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01

            if 'data_label_degree' in customizations.keys():
                parameter['data_label_degree'] = int(customizations['data_label_degree'])
            else:
                if len(df.index)<10:
                    parameter['data_label_degree'] = 0
                else:
                    parameter['data_label_degree'] = 90

            if 'bar_width' in customizations.keys():
                parameter['bar_width'] = customizations['bar_width']
            else:
                parameter['bar_width'] = 0.6
            if 'color_palette' in customizations.keys():
                parameter['color_palette'] = customizations['color_palette']
            else:
                parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            if 'center_x_position' in customizations.keys():
                parameter['center_x_position'] = customizations['center_x_position']
            else:
                parameter['center_x_position'] = 1

            if 'center_y_offset' in customizations.keys():
                parameter['center_y_offset'] = customizations['center_y_offset']
            else:
                parameter['center_y_offset'] = 0

            if 'center_line_color' in customizations.keys():
                parameter['center_line_color'] = customizations['center_line_color']
            else:
                parameter['center_line_color'] = 'k'

            if 'legend' in customizations.keys():
                parameter['legend'] = customizations['legend']
            else:
                parameter['legend'] = True

            if 'x_label' in customizations.keys():
                parameter['x_label'] = customizations['x_label']
            else:
                parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            if 'x_tick_degree' in customizations.keys():
                parameter['x_tick_degree'] = customizations['x_tick_degree']
            else:
                parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')

            if 'y_label' in customizations.keys():
                parameter['y_label'] = customizations['y_label']
            else:
                parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            if 'background' in customizations.keys():
                parameter['background'] = customizations['background']
            else:
                parameter['background'] = 'white'

            if 'data_label_format' in customizations.keys():
                parameter['data_label_format'] = customizations['data_label_format']
            else:
                parameter['data_label_format'] = None

            if 'data_label_frequency' in customizations.keys():
                parameter['data_label_frequency'] = customizations['data_label_frequency']
            else:
                parameter['data_label_frequency'] = None

            if 'data_label_decimal' in customizations.keys():
                parameter['data_label_decimal'] = customizations['data_label_decimal']
            else:
                parameter['data_label_decimal'] = None

            if 'data_label_type' in customizations.keys():
                parameter['data_label_type'] = customizations['data_label_type']
            else:
                parameter['data_label_type'] = 'normal'

            if 'data_label_format_percent' in customizations.keys():
                parameter['data_label_format_percent'] = customizations['data_label_format_percent']
            else:
                parameter['data_label_format_percent'] = None

            if 'data_label_frequency_percent' in customizations.keys():
                parameter['data_label_frequency_percent'] = customizations['data_label_frequency_percent']
            else:
                parameter['data_label_frequency_percent'] = None

            if 'data_label_decimal_percent' in customizations.keys():
                parameter['data_label_decimal_percent'] = customizations['data_label_decimal_percent']
            else:
                parameter['data_label_decimal_percent'] = None

            if 'data_label_type_percent' in customizations.keys():
                parameter['data_label_type_percent'] = customizations['data_label_type_percent']
            else:
                parameter['data_label_type_percent'] = 'percentage'
            if 'data_label_format_total' in customizations.keys():
                parameter['data_label_format_total'] = customizations['data_label_format_total']
            else:
                parameter['data_label_format_total'] = None

            if 'data_label_frequency_total' in customizations.keys():
                parameter['data_label_frequency_total'] = customizations['data_label_frequency_total']
            else:
                parameter['data_label_frequency_total'] = None

            if 'data_label_decimal_total' in customizations.keys():
                parameter['data_label_decimal_total'] = customizations['data_label_decimal_total']
            else:
                parameter['data_label_decimal_total'] = None

            if 'data_label_type_total' in customizations.keys():
                parameter['data_label_type_total'] = customizations['data_label_type_total']
            else:
                parameter['data_label_type_total'] = 'normal'
            if 'y_on' in customizations.keys():
                parameter['y_on'] = customizations['y_on']
            else:
                parameter['y_on'] = True
            if 'title_background' in customizations.keys():
                parameter['title_background']=customizations['title_background']
            else:
                parameter['title_background']='#555555'

            if 'title_text_color' in customizations.keys():
                parameter['title_text_color']=customizations['title_text_color']
            else:
                parameter['title_text_color']='white'
            if  'legend_placement' in customizations.keys():
                parameter['legend_placement']=customizations['legend_placement']
            else:
                parameter['legend_placement']='best'
            if 'label_font_size' in customizations.keys():
                parameter['label_font_size']=customizations['label_font_size']
            else:
                parameter['label_font_size']=12
            if 'tick_font_size' in customizations.keys():
                parameter['tick_font_size' ] = customizations['tick_font_size']
            else:
                parameter['tick_font_size' ] =12
                
            if 'data_label_percent_font_size'  in customizations.keys():
                parameter['data_label_percent_font_size' ] = customizations['data_label_percent_font_size' ]
            else:
                parameter['data_label_percent_font_size' ] =12
            if 'data_label_total_font_size' in customizations.keys():
                parameter['data_label_total_font_size'] = customizations['data_label_total_font_size']
            else:
                parameter['data_label_total_font_size'] =12
            if 'title_font_size' in customizations.keys():
                parameter['title_font_size']= customizations['title_font_size']
            else:
                parameter['title_font_size']=18
        else:
            parameter['title']=self.titles()[0]
            min_d=parameter['dataframe'][number_selection].min()
            max_d=parameter['dataframe'][number_selection].max()
            if min_d<0:
                parameter['y_limit'] =[min_d-max_d*0.2,max_d+max_d*0.2]
            else:
                parameter['y_limit'] =[0,max_d+max_d*0.2]
            parameter['data_label_offset'] = (parameter['dataframe'].iloc[:, 1].max()) * 0.01
            if len(df.index)<10:
                parameter['data_label_degree'] = 0
            else:
                parameter['data_label_degree'] = 90
            parameter['bar_width'] = 0.6
            parameter['color_palette'] = ['#4E79A7','#A0CBE8', '#F28E2B', '#FFBE7D', '#59A14F', '#8CD17D', '#B6992D',
                                           '#F1CE63', '#499894', '#86BCB6', '#E15759', '#FF9D9A', '#79706E', '#BAB0AC',
                                           '#D37295', '#FABFD2', '#B07AA1', '#D4A6C8', '#9D7660', '#D7B5A6']*5
            parameter['center_x_position'] = 1
            parameter['center_y_offset'] = 0
            parameter['center_line_color'] = 'k'
            parameter['legend'] = True
            parameter['x_label'] = self.fields['character'][0].replace('_',' ')
            parameter['x_tick_degree']=self.tick_degree(parameter,'vertical')
            parameter['y_label'] = self.fields['number'][0].replace('_',' ')
            parameter['background'] = 'white'
            parameter['data_label_type'] = 'normal'
            parameter['data_label_frequency_total'] = None
            parameter['data_label_format_total'] = None
            parameter['data_label_decimal'] = None
            parameter['data_label_frequency'] = None
            parameter['data_label_format'] = None
            parameter['data_label_type_percent'] = 'percentage'
            parameter['data_label_decimal_percent'] = None
            parameter['data_label_frequency_percent'] = None
            parameter['data_label_format_percent'] = None
            parameter['data_label_type_total'] = 'normal'
            parameter['data_label_decimal_total'] = None
            parameter['y_on'] = True
            parameter['title_background']='#555555'
            parameter['title_text_color']='white'
            parameter['legend_placement']='best'
            parameter['label_font_size']=12
            parameter['tick_font_size' ] =12
            parameter['data_label_percent_font_size' ]=12
            parameter['data_label_total_font_size'] =12
            parameter['title_font_size']=18
        dlf = DataLabelFormatter()
        parameter['dataframe'] = dlf.data_label_formater(df=parameter['dataframe'], col=number_selection, format_=parameter['data_label_format'], frequency=parameter['data_label_frequency'], type_=parameter['data_label_type'], decimal=parameter['data_label_decimal'])
        print("Data function")
        return parameter

    def donut_1011_donut(self, parameters, kind, fields):
        if parameters['legend']:
            lines = []
            for value in parameters['color_palette']:
                lines.append(Line2D([0], [0], color=value, lw=2))
            if parameters['legend_placement'] == 'outside':
                self.fig, ax = plt.subplots(1, 2,
                                        sharey=True,
                                        squeeze=True,
                                        gridspec_kw=dict(width_ratios=[0.8, 0.2]),
                                        figsize=(8, 8))
                ax[1].legend(lines, parameters['dataframe'][fields['character'][0]], bbox_to_anchor=[1, 0, 0.2, 1])
                # axis self.ax1 to axis
                axis = self.ax1 = ax[0]
                # remove the right ,top and bottom spines
                ax[1].spines['right'].set_visible(False)
                ax[1].spines['top'].set_visible(False)
                ax[1].spines['bottom'].set_visible(False)
                ax[1].spines['left'].set_visible(False)
                ax[1].get_yaxis().set_visible(False)
                ax[1].get_xaxis().set_visible(False)
            else:
                self.fig = Figure((8, 8), dpi=120)
                self.ax1 = self.fig.add_subplot()
                axis = self.ax1
                axis.legend(lines, parameters['dataframe'][fields['character'][0]],loc=parameters['legend_placement'])
        else:
            self.fig = Figure((8, 8), dpi=120)
            self.ax1 = self.fig.add_subplot()
            axis = self.ax1
        self.fig.subplots_adjust(left=0, right=1,
                                 bottom=0.3, top=0.9,
                                 hspace=0.2, wspace=0.2)
        dlf = DataLabelFormatter()
        axis.pie(x=[i for i in parameters['dataframe']['percent_of_total_mdg'] if i > 0],
                 labels=[parameters['dataframe']['data_label'].iloc[i] for i in
                         parameters['dataframe']['percent_of_total_mdg'].index
                         if parameters['dataframe']['percent_of_total_mdg'].iloc[i] > 0],
                 colors=parameters['color_palette'],
                 autopct=lambda x: dlf.data_label_formater(pd.DataFrame([x/100],columns=['percentage']), col='percentage',
                                                           format_=parameters['data_label_format_percent'],
                                                           frequency=parameters['data_label_frequency_percent'],
                                                           type_=parameters['data_label_type_percent'],
                                                           decimal=parameters['data_label_decimal_percent'])['data_label'].iloc[0],
                wedgeprops=dict(width=0.55),pctdistance=0.7,textprops=dict(fontsize=parameters['data_label_percent_font_size' ]))

        axis.text(0, 0, s=dlf.data_label_formater(df=parameters['dataframe'].copy(), col='total_mdg',
                                                 format_=parameters['data_label_format_total'],
                                                 frequency=parameters['data_label_frequency_total'],
                                                 type_=parameters['data_label_type_total'],
                                                 decimal=parameters['data_label_decimal_total'])['data_label'].iloc[0],
                  ha='center', va='center',fontsize=parameters['data_label_total_font_size'])
        # background
        axis.set_facecolor(parameters['background'])
        self.fig.patch.set_facecolor(parameters['background'])
        # y axis on of
        axis.spines['left'].set_visible(parameters['y_on'])
        axis.get_yaxis().set_visible(parameters['y_on'])
        # title
        title = self.fig.suptitle(parameters['title'],
                                      backgroundcolor=parameters['title_background'],
                                      color=parameters['title_text_color'], weight='normal'
                                      , fontsize=parameters['title_font_size'],x=0.55)
        bb = title.get_bbox_patch()
        bb.set_boxstyle("ext", pad=0.5, width=1500)
        return axis, self.fig
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Graph1011()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



