# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dat_aselection.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from graph import Graph
from helper import show_error_message
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from helper import collect_data, run_query
from TopBar import TopLearningSection
import pprint

class DataSelection(QtWidgets.QWidget):
    openGraphScreen = QtCore.pyqtSignal(dict,str,list,str)
    def __init__(self,db_name=None):
        super(DataSelection, self).__init__()
        # get db name from the previous window
        self.db_name = db_name
        # create a field arr which is used throughtout the code 
        self.fields = ['NUMBER',"DATE","CHARACTER",]
        # set a variable y-axis to increase the y-axis to be used 
        self.y_axis = 0
        # set a button array to add different button here 
        self.button_arr = {
            'number':[],
            'date':[],
            'date_level':[],
            'character':[],
            'aggregate':[]
        }
        # set a field array to keep the track of the fields
        self.field_arr = {
            'number':[],
            'date':[],
            'date_level':[],
            'character':[],
            'aggregate':[]
        }
        self.app_tabs = []
        self.store_button={}  
        self.flag = False
        self.pushButton ={
            'number':{},
            'date':{},
            'date_level':{},
            'character':{},
            'aggregate':{}
        }
        self.bool_fields = {'NUMBER':False,
                            'CHARACTER':False,
                            'aggregate':False}

        #created the text in which if the users selectes button text is displayed otherwise not
        self.top_label_text = ""

        #created a dictionary for storing height of widget for scrolling to specific position
        self.create_dict = {}
        
    def setupUi(self, MainWindow):
        # setup the object name of main window
        # MainWindow.setObjectName("MainWindow")
        #set the size of the main window
        # MainWindow.resize(1500,800)
        self.main_window = MainWindow
        
        #Creating the main widget where all widgets are displayed inside this two widgets are nested simple widget and scroll area widget

        self.mainwidget = QWidget(self.main_window)
        # self.mainwidget.setObjectName("centralwidget")
        self.mainwidget.resize(1500, 800)
        
        #Creating the vertical layout for simple fixed widget and scroll area widget
        self.vbox = QVBoxLayout()
        self.vbox.setAlignment(Qt.AlignTop)
        # self.vbox.addLayout(self.hbox1)
        # self.vbox.addLayout(self.hbox)
        self.main_window.setLayout(self.vbox)
        self.topBar = TopLearningSection()
        self.topBar.setup(self.vbox)
        

        ##first creating simple fixed widget at top
        self.fixedwidgettop = QWidget(self.mainwidget)
        self.fixedwidgettop.setObjectName("centralwidget")
        self.fixedwidgettop.setMaximumHeight(150)
        self.fixedwidgettop.setMinimumHeight(150)
        # self.fixedwidgettop.setFixedSize(1500, 300)
        self.fixedwidgettop.setStyleSheet("background-color:white;border-radius:5px")
        self.effect = QGraphicsDropShadowEffect(self.fixedwidgettop)
        self.effect.setOffset(0, 0)
        self.effect.setBlurRadius(10)
        self.fixedwidgettop.setGraphicsEffect(self.effect)
        
        self.vboxinsidefixedwidget = QVBoxLayout(self.fixedwidgettop)
        self.hboxinsidefixedwidget1 = QHBoxLayout()
        self.hboxinsidefixedwidget1.setAlignment(Qt.AlignCenter)
        self.hboxinsidefixedwidget1_1 = QHBoxLayout()
        self.hboxinsidefixedwidget1_1.setAlignment(Qt.AlignCenter)
        self.hboxinsidefixedwidget2 = QHBoxLayout()
        self.mainheadingwidget = QLabel("Pick at lease one data field from each section below. VizPick will generate graphs using the data you select.")
        font = QFont('Arial')
        font.setPixelSize(20)
        self.mainheadingwidget.setFont(font)

        self.mainheadingwidget1 = QLabel("Click the video tutorial button in top left corner for help.")
        self.mainheadingwidget1.setFont(font)
        self.hboxinsidefixedwidget1.addWidget(self.mainheadingwidget)
        self.hboxinsidefixedwidget1_1.addWidget(self.mainheadingwidget1)

        #creating the dynmaic label top widget at top
        self.dynamicLabel = QLabel()
        self.dynamicLabel.setWordWrap(True)
        self.dynamicLabel.setMinimumWidth(920)
        # self.dynamicLabel.setStyleSheet("background-color:red;")
        # self.dynamicLabel.setFixedWidth(420)
        self.dynamicLabel.setText(self.top_label_text)
        font = QFont('Arial')
        font.setPixelSize(18)
        self.dynamicLabel.setFont(font)
        self.dynamicLabel.setAlignment(Qt.AlignCenter)

        self.clearallbutton=QPushButton()
        self.clearallbutton.setStyleSheet('''        
        QPushButton
        {
            padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            border-radius: 5px;
            color: black;
            background-color: #DFDFDF;
        }

        QPushButton::disabled
        {
            color: #acacac;
        }

        QPushButton:hover
        {
            background: #6e98e0;
            color: white;
            
        }

        QPushButton:pressed
        {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
        background: #6e98e0;
            color: white;

        }
        QPushButton:checked
        {
        padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
background: #6e98e0;
            color: white;
        }''')
        self.clearallbutton.setText("Clear All")
        self.clearallbutton.setFixedSize(170,37)
        self.clearallbutton.clicked.connect(lambda MainWindow:self.clear_all(MainWindow))
        self.hboxinsidefixedwidget2.addStretch(1)
        self.hboxinsidefixedwidget2.addWidget(self.dynamicLabel)
        
        self.hboxinsidefixedwidget2.addStretch(1)
        self.hboxinsidefixedwidget2.addWidget(self.clearallbutton)

        self.vboxinsidefixedwidget.addLayout(self.hboxinsidefixedwidget1)
        self.vboxinsidefixedwidget.addLayout(self.hboxinsidefixedwidget1_1)
        self.vboxinsidefixedwidget.addLayout(self.hboxinsidefixedwidget2)

        # adding the fixedwidget to the layout
        self.vbox.addWidget(self.fixedwidgettop)
        
        # create a widget of scrollarea
        self.scrollArea = QtWidgets.QScrollArea(self.mainwidget)
        # set the position of the scroll area
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        # set the autofill background 
        self.scrollArea.setAutoFillBackground(True)
        # set the style sheet to change the color 
        self.scrollArea.setStyleSheet("QScrollArea {background: #555}\n" 
        "QFrame {background: #6e98e0}\n"
        "QLabel {color:#fff}\n"
        "QPushButton {background:#DFDFDF}\n"
        "QPushButton {color:black}")

        # making a horizontal layout inside the scrollarea
        self.mainhboxscrollarea=QHBoxLayout()

        
        self.centralwidget = QtWidgets.QWidget(self.scrollArea)
        # set object name 
        self.centralwidget.setObjectName("centralwidget") 
        # self.centralwidget.setStyleSheet("background:yellow")

        self.widgetinsidescrollarea=QWidget(self.centralwidget)
        # self.widgetinsidescrollarea.setStyleSheet("background:pink")
        self.widgetinsidescrollarea.setMinimumWidth(1000) 
        self.widgetinsidescrollarea.setMaximumWidth(1000)



        self.mainhboxscrollarea.addWidget(self.widgetinsidescrollarea)

        self.vboxinsidescrollarea=QVBoxLayout()
        # self.vboxinsidescrollarea.setAlignment(Qt.AlignTop)
        self.widgetinsidescrollarea.setLayout(self.vboxinsidescrollarea)
        

        self.centralwidget.setLayout(self.mainhboxscrollarea)

        # set scroll area to be resizeable
        self.scrollArea.setWidgetResizable(True)
        # set the object name of the scroll area
        self.scrollArea.setObjectName("scrollArea")

        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)

        self.generate_gui(MainWindow)
        # set the central widget in scrollarea
        self.scrollArea.setWidget(self.centralwidget)
        self.vbox.addWidget(self.scrollArea)

        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        


    def clear_all(self,MainWindow):
        '''
            This is the function when clear all button function is pressed and it clears the dictionary
        '''
        del self.field_arr['number'][:]
        del self.field_arr['date'][:]
        del self.field_arr['date_level'][:]
        del self.field_arr['character'][:]
        del self.field_arr['aggregate'][:]

        del self.button_arr['number'][:]
        del self.button_arr['date'][:]
        del self.button_arr['date_level'][:]
        del self.button_arr['character'][:]
        del self.button_arr['aggregate'][:]
        self.setScrollValue(0)
        self.dynamic_top_label_function()
        print(self.store_button,"self.store_button")
        for key,value in self.store_button.items():
            for valueinsidelist in value:
                if(valueinsidelist=="None" or valueinsidelist=="Record_Count"):
                    self.pushButton[key.lower()][valueinsidelist].setStyleSheet('''
                    QPushButton
                    {
                        padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                        border-radius: 5px;
                        color: black;
                        background-color: #A4A4A4;
                    }

                    QPushButton::disabled
                    {
                        color: #acacac;
                    }

                    QPushButton:hover
                    {
                        background: #6e98e0;
                        color: white;
                        
                    }

                    QPushButton:pressed
                    {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                    background: #6e98e0;
                        color: white;

                    }
                    QPushButton:checked
                    {
                    padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            background: #6e98e0;
                        color: white;
                    }
                        ''')
                else:
                    self.pushButton[key.lower()][valueinsidelist].setStyleSheet('''
                    QPushButton
                    {
                        padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                        border-radius: 5px;
                        color: black;
                        background-color: #DFDFDF;
                    }

                    QPushButton::disabled
                    {
                        color: #acacac;
                    }

                    QPushButton:hover
                    {
                        background: #6e98e0;
                        color: white;
                        
                    }

                    QPushButton:pressed
                    {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                    background: #6e98e0;
                        color: white;

                    }
                    QPushButton:checked
                    {
                    padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            background: #6e98e0;
                        color: white;
                    }
                        ''')

    
    def setScrollValue(self,value):
        '''
            This function to control the Scroll Bar 
        '''
        self.scrollArea.verticalScrollBar().setSliderPosition(value)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        
    def filter_data(self,df,fields):
        '''
            Filter the data with acoriding to the type
        '''
        data = {}
        for field in fields:
            data[field] = df[df['data_type'] == field]['field'].values
            if field == 'NUMBER':
                print('#####################')
                print(data[field])
                print(type(data[field]))
                data[field] = np.append(data[field],['Record_Count'])
        data['aggregate'] = ['Sum','Average','Count']
        return data
    
    def generate_gui(self,MainWindow):
        '''
            generate dynamic UI buttons and all the container
        '''
        # query to bring fields and datatype from meta_data table
        sql_query = f'''select * from meta_data where lower(dbname) = "{self.db_name}"'''
        # run query and save the result in data
        from helper import run_query
        data = run_query(sql_query)
        print('data selection look here')
        print(sql_query)
        print(data)
        #run the filter data to get the dictionary of filtered fields data type
        new_data = self.filter_data(data,self.fields)
        # headings to be used in the container
        text_headers = [
        'These are the NUMBERS in your dataset. Pick one to graph or select "None"',
        'These are the DATES in your dataset. Pick one or select "None"',
        'These are the CHARACTERS in your dataset. Pick one or select "None"',
        'Pick one aggregation.'
        
        ]
        # set self. fields into fields variable
        fields = self.fields
        # append aggregate option into fields
        fields.append('aggregate')
        # above lines run the function to genreate widgets we need to
        for i in range(len(fields)):
            # check if the field has data
            if len(new_data[fields[i]]):
                # if field has data run with this parameter
                if fields[i] == 'aggregate':
                    self.generate_widgets(text_headers[3],list(new_data[fields[i]]),i+1,fields[i])
                elif fields[i] == 'DATE':
                    self.generate_widgets(text_headers[i],list(new_data[fields[i]]),i,fields[i])
                    self.generate_widgets('Group your dates by Week, Month, Quarter or Year. Select "Exact Date" to view the dates as they are.',['Exact Date','Week','Month','Quarter','Year'],2,'date_level',True,)
                elif fields[i] == 'CHARACTER':
                    self.generate_widgets(text_headers[i],list(new_data[fields[i]]),i+1,fields[i])
                else:
                    self.generate_widgets(text_headers[i],list(new_data[fields[i]]),i,fields[i])
            else:
                self.field_arr[fields[i].lower()].append('None')
                if fields[i].lower() ==  'date':
                    self.field_arr['date_level'].append('None')
        # this enable the scroll down
        self.widgetinsidescrollarea.setFixedHeight(self.y_axis)
    #sizemore - changed this because it was not accounting for anything greater that 1 (example two numbers etc.)
    def check_data_fields(self):
        s = ''
        for i in self.field_arr:
            if i != 'date_level':
                if len(self.field_arr[i]) != 0 and 'None' not in self.field_arr[i]:
                    if i != 2:
                        s+=str(len(self.field_arr[i]))
                else:
                    if i != 2:
                        s+=str(0)
        print(s)
        return s
    def is_user_package(self):
        try:
            sql_query = f'''
                    select * from user_info
                '''
            data = run_query(sql_query)
            print("#this is the user package")
            print(data['package'][0])
            if data['package'][0] ==  "free" or  data['package'][0] ==  "Free":
                return 'FREE'
            elif data['package'][0].lower() ==  "presenter":
                return 'PRESENTER'
            else:
                return 'FREE'
        except Exception as e:
            print('#error in user package')
            print(e)
            return 'FREE'
            
    def open_graphs(self):
        '''
            This function open the graph window
        '''
        field_str = self.check_data_fields()
        if not self.flag:
            print("#user package")
            print(self.is_user_package())
            print('fields text here :',self.field_arr)
            print(self.field_arr)
            #if (self.field_arr['date'][0] != 'None' and self.field_arr['date_level'][0] != 'None')\
            #    or (self.field_arr['date'][0] == 'None' and self.field_arr['date_level'][0] == 'None'): 
            #    self.app_tabs.append(field_str)
            #    self.openGraphScreen.emit(self.field_arr,field_str,self.app_tabs)
            #    collect_data('Generate Graphs',field_str,self)
            #else:
            #    show_error_message('You have to select date trend because you selected a date field.')
            try:
                if field_str=='1111' and self.is_user_package()=='FREE' :
                    collect_data('Generate Graphs',field_str,self)
                    show_error_message('This is the FREE version of VizPick! You cannot graph ' + str(self.field_arr['number'][0])+ ' by ' +str(self.field_arr['date'][0]) + ' and ' +str(self.field_arr['character'][0]) +'. That requires the Presenter package. You can either 1)' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ', 2)select "None" for the DATE section to graph ' + str(self.field_arr['number'][0])+ ' by ' +str(self.field_arr['character'][0]) + ', or 3) select "None" for the CHARACTER section to graph ' + str(self.field_arr['number'][0])+ ' by ' +str(self.field_arr['date'][0]) + '. Enjoy!' )
                #elif field_str!='1011' and field_str!='1101' and self.is_user_package()=='FREE' :
                 #   collect_data('Generate Graphs',field_str,self)
                  #  show_error_message('This is the FREE version of VizPick! You can pick 1 NUMBER and either 1 DATE or 1 CHARACTER to graph.')
                elif len(self.field_arr['number'])==0:
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('There is no NUMBER selection. There must be a selection from every section. Choose a NUMBER field or select "Record_Count".')
                elif self.field_arr['number']=="None":
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('You selected "None" for your NUMBER selection. That selection is not supported by this version of VizPick. Select a NUMBER from your dataset or select "Record_Count".')
                elif len(self.field_arr['date'])==0:
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['number'])
                    show_error_message('There is no DATE selection. There must be a selection from every section. Choose "None" if you do not want a date in your graph.')
                elif self.field_arr['date']=="None" and len(self.field_arr['date_level'])==0:
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date'])
                    show_error_message('There is no DATE LEVEL selection. There must be a selection from every section. Choose "None" if DATES is "None".')
                elif self.field_arr['date']!="None" and len(self.field_arr['date_level'])==0:
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date'])
                    show_error_message('There is no DATE LEVEL selection. You have chosen a DATE so you must choose a DATE LEVEL. Select "Exact Date" if you are not sure. There must be a selection from every section.')
                elif self.field_arr['date'][0] == 'None' and self.field_arr['date_level'][0] != 'None':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date'])
                    show_error_message('DATE selection is "None". Change DATE LEVEL to "None" or select a DATE to view in your graph.') 
                elif (self.field_arr['date'][0] != 'None' and self.field_arr['date'][0] != '') and (self.field_arr['date_level'][0] == 'None' or self.field_arr['date_level'][0] == ''):
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date'])
                    show_error_message('You have selected a DATE for your graph. You must select a DATE LEVEL. Choose "Exact Date" if you are not sure.')
                elif len(self.field_arr['character'])==0:
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date_level'])
                    show_error_message('There is no CHARCTER selection. Choose "None" if you do not want any additional fields in your graph. There must be a selection from every section.')
                elif len(self.field_arr['aggregate'])==0:
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('There is no AGGREGATE selection. Choose "Sum" if you are not sure. There must be a selection from every section.')
                elif field_str=='1001' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['number'])
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) select either 1 DATE or 1 CHARACTER to graph with '+str(self.field_arr['number'][0])+'.' )
                elif field_str=='1001' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['number'])
                    show_error_message('Your graph selection is only supported by our Pro Version. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) select 1 DATE and/or 1 CHARACTER to graph with '+str(self.field_arr['number'][0])+'.' )
                elif field_str=='1002' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 AGGREGATE option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' and select either 1 DATE or 1 CHARACTER to graph with '+str(self.field_arr['number'][0])+'.' )
                elif field_str=='1002' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 AGGREGATE option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' and select 1 DATE and/or 1 CHARACTER to graph with '+str(self.field_arr['number'][0])+'.' )
                elif field_str=='1012' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 AGGREGATE option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' to graph with '+str(self.field_arr['number'][0])+ ' by '+ str(self.field_arr['character'][0]) + '.' )
                elif field_str=='1012' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 AGGREGATE option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' to graph with '+str(self.field_arr['number'][0]) + ' by '+ str(self.field_arr['character'][0])+'.' )
                elif field_str=='1102' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 AGGREGATE option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' to graph with '+str(self.field_arr['number'][0])+ ' by '+ str(self.field_arr['date'][0]) + '.' )
                elif field_str=='1102' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['character'])
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 AGGREGATE option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' to graph with '+str(self.field_arr['number'][0]) + ' by '+ str(self.field_arr['date'][0])+'.' )
                elif field_str=='1021' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date_level'])
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 CHARACTER option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['character'][0])+ ' or ' + str(self.field_arr['character'][1]) + ' to graph with '+str(self.field_arr['aggregate'][0])+ ' of '+ str(self.field_arr['number'][0]) + '.' )
                elif field_str=='1021' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(self.create_dict['date_level'])
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 CHARACTER option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['character'][0])+ ' or ' + str(self.field_arr['character'][1]) + ' to graph with '+str(self.field_arr['aggregate'][0]) + ' of '+ str(self.field_arr['number'][0])+'.' )
                elif field_str=='2101' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    #self.setScrollValue(self.create_dict['number'])
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 NUMBER option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' to trend one of them by '+ str(self.field_arr['date'][0]) + '.' )
                elif field_str=='2101' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 NUMBER option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' to trend one of them by '+str(self.field_arr['date'][0]) +'.' )
                elif field_str=='2102' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 NUMBER option and 1 AGGREGATE option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' so that you have one number and deselect ' + str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1])+ ' so that you have one AGGREGATE.' )
                elif field_str=='2102' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 NUMBER option and more than 1 AGGREGATE. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' so that you have one number and deselect ' + str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1])+ ' so that you have one AGGREGATE.'  )
                elif field_str=='2011' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You can only select 1 NUMBER option. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' to graph one of them with '+ str(self.field_arr['character'][0]) + '.' )
                elif field_str=='2011' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 NUMBER option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' to graph one of them with '+str(self.field_arr['character'][0]) +'.' )
                elif field_str=='2012' and self.is_user_package()=='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('This is the FREE version of VizPick! Your graph selection is not supported. You have 2 NUMBER selections but can only have 1. You also have 2 AGGREGATE selections and can only have 1. Either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro Package, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' so that you only have 1 NUMBER and deselect '+  str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' so that you only have 1 AGGREGATE.' )
                elif field_str=='2012' and self.is_user_package()!='FREE':
                    collect_data('Generate Graphs',field_str,self)
                    self.setScrollValue(0)
                    show_error_message('Your graph selection is only supported by our Pro Version because there is more than 1 NUMBER option and more than 1 CHARACTER option. You can either 1) ' + '<a href="https://vizpick.com/pricing/">Upgrade</a>' + ' to the Pro where all graph types are available, or 2) deselect '+ str(self.field_arr['number'][0])+ ' or ' + str(self.field_arr['number'][1]) + ' so that you only have 1 NUMBER and deselect '+  str(self.field_arr['aggregate'][0])+ ' or ' + str(self.field_arr['aggregate'][1]) + ' so that you only have 1 AGGREGATE.' )
                else:
                    self.app_tabs.append(field_str)
                    self.openGraphScreen.emit(self.field_arr,field_str,self.app_tabs,self.db_name)
                    collect_data('Generate Graphs',field_str,self)
            except Exception as e:
                print(e)
                collect_data('Generate Graphs',field_str,self)
                show_error_message('Something is wrong and VizPick cannot make these graphs... please try again')



                         
    def add_to_field_arr(self,data_type,button,label):
        # set the pass button reference button in the list
        if data_type == "DATE" and label != None and self.num_checbox.isChecked():
            self.char_checbox.hide()
        self.button_arr[data_type.lower()].append(button)
        # change the color of the button
        button.setStyleSheet("background-color : #6e98e0;color:white")
        # set the label in the field array
        self.field_arr[data_type.lower()].append(label)

        if data_type == 'NUMBER':
            if self.num_checbox.isChecked():
                if len(self.field_arr['number']) == 2:
                    self.setScrollValue(self.create_dict['number'])
            else:
                self.setScrollValue(self.create_dict['number'])
                print(self.create_dict,"self.create_dict")
        elif data_type == 'CHARACTER':
            if self.char_checbox.isChecked():
                if len(self.field_arr['character']) == 2:
                    self.setScrollValue(self.create_dict['character'])
                    # pass
                    # self.setScrollValue(100)
            else:
                self.setScrollValue(self.create_dict['character'])
                # self.setScrollValue(1300)
 
    def dynamic_top_label_function(self):
        print(self.field_arr,"this one is prionted")
        self.dynamicLabel.setText("")
        self.top_label_text1 = ""
        for items,values in self.field_arr.items():
            print(items,values,len(values))
            if(len(values)==1 and values[0]!="None"):
                self.top_label_text1 = self.top_label_text1+" "+items.capitalize()+": "+ values[0].capitalize()+"    "
                self.dynamicLabel.setText(self.top_label_text1)
            
            elif(len(values)==2 and "None" not in values):
                self.top_label_text1 = self.top_label_text1+" "+items.capitalize()+": "+ values[0].capitalize() +","+ values[1].capitalize()+"    "
                self.dynamicLabel.setText(self.top_label_text1)

            elif(len(values)==2 and "None" in values):
                for check_none in values:
                    if check_none != "None":
                        self.top_label_text1 = self.top_label_text1+" "+items.capitalize()+": "+ check_none.capitalize()+"    "
                        self.dynamicLabel.setText(self.top_label_text1)






    def save_selected(self,button,label,index,data_type):
        '''
            This function change the colors of the button when on clicked
            and maintain the selected fields
        '''
        if button in self.button_arr[data_type.lower()]:
            # if the value is not zero it means the value is changed
            # change the color of the previous button
            if label == 'Count' and 'Record_Count' in self.field_arr['number']:
                show_error_message('Cannot remove Count Record_Count selected in Number')
            elif label == 'Record_Count':
                btn = self.pushButton['aggregate']['Count']
                btn.setStyleSheet("background-color : #DFDFDF;color:black")
                button.setStyleSheet("background-color : #DFDFDF;color:black")
                self.button_arr[data_type.lower()].remove(button)
                self.field_arr[data_type.lower()].remove(label)
                self.button_arr['aggregate'].remove(btn)
                if 'Count' in  self.field_arr['aggregate']:
                    self.field_arr['aggregate'].remove('Count')
                
            else:
                for i in range(len(self.button_arr[data_type.lower()])):
                    if button == self.button_arr[data_type.lower()][i]:
                        button.setStyleSheet("background-color : #DFDFDF;color:black")
                        del self.field_arr[data_type.lower()][i]
                        del self.button_arr[data_type.lower()][i]
                        self.dynamic_top_label_function()
                        break
        else:
                if button not in self.button_arr[data_type.lower()]:
                    if data_type.lower() in ['date','date_level'] and len(self.field_arr[data_type.lower()]) == 0:
                        if data_type == 'DATE': 
                            if label == 'None':
                                date_level_1 = self.pushButton['date_level']['None']
                                date_level_1.setStyleSheet("background-color : #6e98e0;color:white")
                                self.button_arr['date_level'].append(date_level_1)
                                self.field_arr['date_level'].append('None')
                                self.setScrollValue(self.create_dict['date_level'])
                            else:
                               self.setScrollValue(self.create_dict['date']) 
                        
            
                        self.add_to_field_arr(data_type,button,label)
                        self.dynamic_top_label_function()
                        if data_type == 'date_level':
                            self.setScrollValue(self.create_dict['date_level'])
                    elif data_type.lower() in ['number','character','aggregate']:
                        
                        if label == 'Record_Count':
                            print(self.pushButton['aggregate'])
                            count_btn = self.pushButton['aggregate']['Count']
                            count_btn.setStyleSheet("background-color : #6e98e0;color:white")
                            self.button_arr['aggregate'].append(count_btn)
                            self.field_arr['aggregate'].append('Count')
                            self.dynamic_top_label_function()

                        if self.bool_fields[data_type] and len(self.field_arr[data_type.lower()]) < 2:
                            if data_type == 'CHARACTER':
                                self.agg_checbox.hide()

                            self.add_to_field_arr(data_type,button,label)
                            self.dynamic_top_label_function()
                        
                        elif len(self.field_arr[data_type.lower()]) == 0 :
                             self.add_to_field_arr(data_type,button,label)
                             self.dynamic_top_label_function()
                        else:
                            show_error_message('Maximum fields selected')
                    else:
                        show_error_message('You can select only one option')
        print(self.field_arr)

    def generate_buttons(self,y_axis,x_axis,button_text,index,data_type):
        '''
            This function creates dynamic buttons
        '''

        def create_label(label):
            num = 0
            cr_label = ""
            for x in label:
                if(num==16):
                    cr_label+="\n"
                    num = 0
                cr_label = cr_label + x
                num = num + 1
            return cr_label 
        if(self.countbutton >= 4):
            self.countbutton = 0
            self.pushbuttonhbox = QHBoxLayout()
            self.pushbuttonhbox.setAlignment(Qt.AlignLeft)
            self.pushbuttonvbox.addLayout(self.pushbuttonhbox)

        # self.pushbuttonhbox=QHBoxLayout()
        self.insidebuttonframe = QFrame()
        self.insidebuttonframe.setStyleSheet("background-color:#F7F7F7")
        self.insidebuttonframe.setFrameShape(QFrame.NoFrame)
        self.insidebuttonframe.setLineWidth(0)

        self.pushButton[data_type.lower()][button_text] = QtWidgets.QPushButton()
        self.pushButton[data_type.lower()][button_text].move(6+x_axis, 1+y_axis)

        if(button_text=="None" or button_text=="Record_Count"):
            self.pushButton[data_type.lower()][button_text].setStyleSheet('''
            QPushButton
            {
                padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                border-radius: 5px;
                color: black;
                background-color: #A4A4A4;
            }

            QPushButton::disabled
            {
                color: #acacac;
            }

            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }

            QPushButton:pressed
            {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            background: #6e98e0;
                color: white;

            }
            QPushButton:checked
            {
            padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
    background: #6e98e0;
                color: white;
            }
                ''')
        else:
            self.pushButton[data_type.lower()][button_text].setStyleSheet('''
            QPushButton
            {
                padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
            }

            QPushButton::disabled
            {
                color: #acacac;
            }

            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }

            QPushButton:pressed
            {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            background: #6e98e0;
                color: white;

            }
            QPushButton:checked
            {
            padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
    background: #6e98e0;
                color: white;
            }
                ''')

        self.pushButton[data_type.lower()][button_text].setObjectName("pushButton")
        check_label = create_label(button_text)
        self.pushButton[data_type.lower()][button_text].setText(check_label)
        self.pushButton[data_type.lower()][button_text].setFixedSize(200,80)
        font = QFont('Arial')
        # font.setBold(enable)
        font.setPixelSize(17)
        self.pushButton[data_type.lower()][button_text].setFont(font)
        self.pushButton[data_type.lower()][button_text].clicked.connect(lambda state ,button = self.pushButton[data_type.lower()][button_text],text=button_text,ind = index,data_type=data_type:self.save_selected(button,text,ind,data_type))
        self.insidebuttonhbox = QHBoxLayout()
            # object4 = QLabel("TextLabel here it is no onesaddsa ",self.widget4)
        # self.insidebuttonhbox.addStretch(stretch =1)
        self.insidebuttonhbox.addWidget(self.pushButton[data_type.lower()][button_text])
        # self.insidebuttonhbox.addStretch(stretch =1)
        self.insidebuttonframe.setLayout(self.insidebuttonhbox)
        self.insidebuttonframe.setFixedSize(220,100)
        # self.insidebuttonframe.setMinimumWidth(190)
        # self.insidebuttonframe.setMaximumWidth(190)
        #         self.insidebuttonframe.setMinimumWidth(190)
        # self.insidebuttonframe.setMaximumWidth(190)
        # self.pushbuttonhbox.addStretch(1)
        self.pushbuttonhbox.setAlignment(Qt.AlignLeft)
        self.pushbuttonhbox.addWidget(self.insidebuttonframe)

        # self.pushbuttonhbox.addStretch(1)
        # self.vboxinsidescrollarea.addWidget(self.pushButton[data_type.lower()][button_text])
        # this connection to move the scrollBar to next question 
        #self.pushButton[data_type.lower()][button_text].clicked.connect(lambda state ,value = 200 + y_axis :self.setScrollValue(value))

        # check if it is the last row of button and las button of the row then add a generate graph button
        if index == 4 and button_text == 'Count':
            self.y_axis += 150
            self.tempforheight = QWidget()
            self.tempforheight.setFixedHeight(430)
            self.tempLayout = QVBoxLayout()
            self.tempLayout.setAlignment(Qt.AlignTop)

            self.tempforheight.setLayout(self.tempLayout)
            self.pushButton1 = QtWidgets.QPushButton(self.buttonscontainingwidget)
            self.pushButton1.setFont(font)
            self.pushButton1.setFixedSize(220,90)
            self.pushButton1.setGeometry(QtCore.QRect(300, 120+self.y_axis, 125, 31))
            self.pushButton1.setObjectName("pushButton")
            self.pushButton1.setText('Generate Graph')
            self.effect = QGraphicsDropShadowEffect(self.pushButton1)
            self.effect.setOffset(0, 0)
            self.effect.setColor(QColor(0,255,0))
            self.effect.setBlurRadius(15)
            self.pushButton1.setGraphicsEffect(self.effect)
            font = QFont('Arial')
            font.setPixelSize(18)
            font.setLetterSpacing(QFont.PercentageSpacing,120)
            self.pushButton1.setFont(font)
            self.pushButton1.setStyleSheet(
                '''
            QPushButton
            {
                color: white;
                background-color:#05B31C;
                border: 1.5px solid #05B31C;
                padding-top:15px;
                padding-bottom:15px;
                padding-right:10px;
                padding-left:10px;

            }
            QPushButton:hover
            {
                background: #05B31C;
                color: white;
                
            }'''
                
                )
            # self.pushButton1.setStyleSheet("background-color : #6e98e0;color:white")
            self.pushButton1.clicked.connect(self.open_graphs)
            self.tempLayout.addWidget(self.pushButton1)
            self.countbuttonhbox.addWidget( self.tempforheight)
            # self.vboxinsidescrollarea.addWidget(self.pushButton1)
        
    def generate_widgets(self,header,fields,index,data_type,flag=False):
        '''
            This function creates a dynamic UI like container and set headings
        '''
        # none in the field so the firtst buttin is always None
        if(data_type.lower()=="aggregate"):
            fields = fields
            #     self.countbutton=0
        else:
            fields = ['None'] + (fields)
        print(type(fields),fields,data_type,"fields")
        self.countbutton = 0
        # set a Q frame widget
        self.frame = QWidget(self.widgetinsidescrollarea)
        self.frame.setStyleSheet("background:#6e98e0;border-radius:5px")
        # self.frame.setGraphicsEffect(self.effect)
        # self.frame.setWindowState(Qt.WindowFullScreen);
        self.frame.setFixedSize(1000,130)
        
        self.buttonscontainingwidget = QWidget(self.widgetinsidescrollarea)
        # self.buttonscontainingwidget.setStyleSheet("background:pink;")
        # self.buttonscontainingwidget.setFixedSize(950,160)
        
        
        # set the position dynamically
        # set the position of the frame
        # self.frame.setGeometry(QtCore.QRect(60, 30+self.y_axis, 671, 80))
        # # set the frame shape of the frame 
        # self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        # set he object name
        # self.frame.setObjectName("frame")
        self.pushbuttonvbox = QVBoxLayout()
        self.countbuttonvbox = QVBoxLayout()
        self.countbuttonhbox = QHBoxLayout()
        self.countbuttonhbox.setAlignment(Qt.AlignCenter)
        self.countbuttonvbox.addLayout(self.countbuttonhbox)
        # self.pushbuttonvbox.setAlignment(Qt.AlignLeft)
        self.pushbuttonhbox=QHBoxLayout()
        self.pushbuttonvbox.addLayout(self.pushbuttonhbox)

        self.labelframelayout=QHBoxLayout()
        self.labelframelayout.setAlignment(Qt.AlignCenter)


        self.labelframe = QWidget()
        # self.labelframe.setStyleSheet("background-color:red")
        self.labelframe.setFixedSize(880,110)
        self.labelframelayout.addWidget(self.labelframe)


        self.labellayout = QHBoxLayout()
        self.labellayout.setAlignment(Qt.AlignCenter)
        # self.labellayout.addLayout(self.labelframelayout)

        self.label = QtWidgets.QLabel(self.labelframe)
        self.label.setWordWrap(True)
        self.label.setFixedSize(870,100)
        self.label.setAlignment(Qt.AlignCenter)
        font = QFont('Arial')
        font.setPixelSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label.setText(header)
        self.labellayout.addWidget(self.label)
        
        self.labelframe.setLayout(self.labellayout)
        self.frame.setLayout(self.labelframelayout)
        

        # self.labelframe.setMaximumWidth(500)
        # self.labelframe.setMinimumWidth(500)


        # create a label

        # self.label.setMaximumWidth(500)
        # self.label.setMinimumWidth(500)
        # self.frame.setMaximumHeight(20)
        # self.frame.setMaximumHeight(20)
        self.labellayout.addWidget(self.labelframe)
        self.create_dict[data_type.lower()] = self.frame.height()

        
        # self.label.setLayout()
        self.frame.setLayout(self.labellayout)
        # set the position of label
        # self.label.setGeometry(QtCore.QRect(140, 20, 460, 31))
        # self.label.setMaximumHeight(40)
        # self.label.setMinimumHeight(40)
        # self.label.setStyleSheet("padding:100px")

        x_axis = 0
        count = 0
        self.y_axis=0
        # check the flag if it date
        if flag:
            #increase the y axis for dynamic widgets
                self.y_axis += 50
        # run a for loop in fields
        self.checkboxlayout=QHBoxLayout()
        self.checkboxlayout.addStretch(1)
        if index == 0:
            self.num_checbox = QtWidgets.QCheckBox('Select 2 numbers',self.widgetinsidescrollarea)
            self.num_checbox.setGeometry(QtCore.QRect(570, 120+self.y_axis, 200, 31))
            self.num_checbox.stateChanged.connect(lambda state:self.update_check_box_status(data_type,self.num_checbox))
            self.checkboxlayout.addWidget(self.num_checbox)
        if index == 3:
            self.char_checbox = QtWidgets.QCheckBox('Select 2 character',self.widgetinsidescrollarea)
            self.char_checbox.setGeometry(QtCore.QRect(570, 120+self.y_axis, 200, 31))
            self.char_checbox.stateChanged.connect(lambda state:self.update_check_box_status(data_type,self.char_checbox))
            self.checkboxlayout.addWidget(self.char_checbox)
        if index == 4:
            self.agg_checbox = QtWidgets.QCheckBox('Select 2 aggregate',self.widgetinsidescrollarea)
            self.agg_checbox.setGeometry(QtCore.QRect(570, 120+self.y_axis, 200, 31))
            self.agg_checbox.stateChanged.connect(lambda state:self.update_check_box_status(data_type,self.agg_checbox))
            self.checkboxlayout.addWidget(self.agg_checbox)

        self.vboxinsidescrollarea.addWidget(self.frame)
        self.vboxinsidescrollarea.addLayout(self.checkboxlayout)
        temp_list=[]

        for field in fields:
            
            # check if the count is divisible by means five buttons are added increase ya xis
            if count % 5 == 0:
                # increas the y axis by 50
                self.y_axis += 50
                # set x axis to zero
                x_axis = 0
            self.generate_buttons(self.y_axis,x_axis,field,index,data_type)
            temp_list.append(field)
            self.store_button[data_type]=temp_list
            print(field,index,data_type,"this is printed")
            # increase x axis by 135
            if field != 'Count':
                x_axis+=135
            # increase count by 1
                count+=1
                self.countbutton+=1

        self.vboxinsidescrollarea.addWidget(self.buttonscontainingwidget)
        self.buttonscontainingwidget.setLayout(self.pushbuttonvbox)
        self.vboxinsidescrollarea.addLayout(self.countbuttonvbox)
        self.vboxinsidescrollarea.setSizeConstraint(QLayout.SetFixedSize)
        print(self.vboxinsidescrollarea.minimumSize().height(),"printed",pprint.pprint(vars(self.vboxinsidescrollarea.minimumSize())))
        self.create_dict[data_type.lower()] = self.vboxinsidescrollarea.minimumSize().height()
        #self.create_dict['top']

        # self.y_axis+=20
    
    def update_check_box_status(self,data_type,checkbox):
        self.bool_fields[data_type] = checkbox.isChecked()
        if not self.bool_fields[data_type]:
            for i in range(len(self.button_arr[data_type.lower()])):
                self.button_arr[data_type.lower()][i].setStyleSheet("background-color : #DFDFDF;color:black")
            self.field_arr[data_type.lower()].clear()
            self.button_arr[data_type.lower()].clear()
            self.dynamic_top_label_function()
                    
        if data_type == 'NUMBER':  
            if checkbox.isChecked():
                self.char_checbox.hide()
            else:
                self.char_checbox.show()

        elif data_type == 'CHARACTER':            
            if checkbox.isChecked():
                self.num_checbox.hide()
                self.agg_checbox.hide()
            else:
                self.num_checbox.show()
                self.agg_checbox.show()
        print(self.bool_fields)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = DataSelection()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
                                        
                                              