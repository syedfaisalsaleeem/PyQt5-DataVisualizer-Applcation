# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

## username ##
# testingsizemore37@gmail.com

##password##
#HelloWorld

from PyQt5 import QtCore, QtGui, QtWidgets
import re
from helper import (
    show_error_message,
    web_url,
    api_key,
    engine,
    run_query,
    MySplashScreen,
    LoadThread,
    BASE_DIR,
    LoadThread,
    logout_user_from_db,
    beta_register_api)
import requests 
import json
import pandas as pd 
from mainPage import Ui_MainWindow
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import * 
# from getmac import get_mac_address as gma
from datetime import datetime
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'


from waitingspinnerwidget import QtWaitingSpinner


class Login(object):
    Beta_Testing=False



    def setupUi(self, MainWindow):
        self.default = True
        self.main_window = MainWindow
        self.main_window.setStyleSheet("background:white")
        MainWindow.setObjectName("MainWindow")
        # MainWindow.setWindowFlags(Qt.WindowStaysOnTopHint)
        MainWindow.setFixedSize(350, 590)
        MainWindow.setWindowTitle("VizPick")
        MainWindow.setWindowIcon(QtGui.QIcon(BASE_DIR + '/system/logo1.png'))
        # MainWindow.resize(337, 543)

        self.widget1 = QWidget()
        self.widget1.setStyleSheet("background:white")

        self.widget2 = QWidget()
        self.widget2.setStyleSheet("background:white")

        self.widget2_1 = QWidget()
        self.widget2_1.setStyleSheet("background:white")

        self.widget2_2 = QWidget()
        self.widget2_2.setStyleSheet("background:white")

        self.widget2_3 = QWidget()
        self.widget2_3.setStyleSheet("background:white")

        self.widget2_4 = QWidget()
        self.widget2_4.setStyleSheet("background:white")

        self.widget2_5 = QWidget()
        self.widget2_5.setStyleSheet("background:white")

        self.widget3 = QWidget()
        self.widget3.setStyleSheet("background:white")

        self.mlayout = QGridLayout()

        self.mlayout.setContentsMargins(0,0,0,0)
        self.mlayout.setSpacing(0)
        self.mlayout.setColumnStretch(0, 1)
        self.mlayout.setColumnStretch(1, 10)
        self.mlayout.setColumnStretch(2, 1)

        self.mlayout.setRowStretch(0, 3)
        self.mlayout.setRowStretch(1, 2)
        self.mlayout.setRowStretch(2, 2)
        self.mlayout.setRowStretch(3, 2)
        self.mlayout.setRowStretch(4, 3)
        self.mlayout.setRowStretch(5, 1)

        self.mlayout.addWidget(self.widget1,0,0,0,1) #1st row 1st column expand to 2nd row 2nd column  ##if we place 0 in expand it will expand full
        self.mlayout.addWidget(self.widget2,0,1)
        self.mlayout.addWidget(self.widget2_1,1,1)
        self.mlayout.addWidget(self.widget2_2,2,1)
        self.mlayout.addWidget(self.widget2_3,3,1)
        self.mlayout.addWidget(self.widget2_4,4,1)
        self.mlayout.addWidget(self.widget2_5,5,1)
        self.mlayout.addWidget(self.widget3,0,2,0,1)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setLayout(self.mlayout)

        self.hbox1 = QHBoxLayout()
        self.hbox1.setAlignment(Qt.AlignCenter) 
        self.logo = QLabel()
        # self.logo.setPixmap(QPixmap(BASE_DIR + '/system/logo2.png')) this should be uncommented
        self.hbox1.addWidget(self.logo)
        self.widget2.setLayout(self.hbox1)

        self.vbox1 = QVBoxLayout()
        self.vbox1.setAlignment(Qt.AlignLeft) 
        self.hboxtemp = QHBoxLayout()
        self.hboxtemp.setAlignment(Qt.AlignLeft) 


        self.email = QtWidgets.QLineEdit()
        self.email.setFixedHeight(30)
        self.email.setPlaceholderText("Enter your Email Address")
        self.email.setStyleSheet("padding:5px;")
        self.label = QtWidgets.QLabel()
        font = QFont('Arial')
        font.setPixelSize(16)
        self.label.setFont(font)
        self.label.setText("Email")
        self.label.setStyleSheet("color:black")
        self.hboxtemp.addWidget(self.label)
        self.hboxtemp.addStretch(1)
        self.vbox1.addLayout(self.hboxtemp)
        self.vbox1.addWidget(self.email)
        self.vbox1.addStretch(1)
        self.widget2_1.setLayout(self.vbox1)

        self.vbox1 = QVBoxLayout()
        self.vbox1.setAlignment(Qt.AlignLeft) 
        self.hboxtemp = QHBoxLayout()
        self.hboxtemp.setAlignment(Qt.AlignLeft) 

        self.paidButtonvlayout = QVBoxLayout()
        self.paidButtonvlayout.setAlignment(Qt.AlignCenter)

        self.paidButton = QPushButton()
        self.paidButton.setText("I am a paid user")
        self.paidButton.setStyleSheet('''
        QPushButton
        {
            color:black;
            border:0;

        }
        QPushButton:hover
        {
            color: #4A76FD;
            
        }
        ''')
        f = QFont('Arial')
        f.setPixelSize(15)
        f.setUnderline(True)
        self.paidButton.setFont(f)
        self.paidButton.clicked.connect(self.checkForm)
        self.paidButtonvlayout.addWidget(self.paidButton)
        self.widget2_5.setLayout(self.paidButtonvlayout)

        self.defaultForm()

        self.password = QtWidgets.QLineEdit(self.centralwidget)
        self.password.setStyleSheet("padding:5px")
        self.password.setPlaceholderText("Leave Blank For Free Users")
        self.password.setFixedHeight(30)
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.label = QtWidgets.QLabel()
        self.label.setText("Password")
        font = QFont('Arial')
        font.setPixelSize(16)
        self.label.setFont(font)
        self.label.setStyleSheet("color:black")
        self.hboxtemp.addWidget(self.label)
        self.hboxtemp.addStretch(1)
        self.vbox1.addLayout(self.hboxtemp)
        self.vbox1.addWidget(self.password)
        self.vbox1.addStretch(1)
        self.widget2_2.setLayout(self.vbox1)
        # self.widget2_2.setVisible(False)


        self.vbox1 = QVBoxLayout()
        self.vbox1.setAlignment(Qt.AlignLeft) 
        self.hboxtemp = QHBoxLayout()
        self.hboxtemp.setAlignment(Qt.AlignLeft) 


        #self.key = QtWidgets.QLineEdit(self.centralwidget)
        #self.key.setStyleSheet("padding:5px")
        #self.key.setFixedHeight(30)
        #self.key.setPlaceholderText("Leave Blank For Free Users")
        #self.label = QtWidgets.QLabel()
        #self.label.setText("Product Key")
        font = QFont('Arial')
        font.setPixelSize(16)
        #self.label.setFont(font)
        #self.label.setStyleSheet("color:black")
        #self.hboxtemp.addWidget(self.label)
        #self.hboxtemp.addStretch(1)
        #self.vbox1.addLayout(self.hboxtemp)
        #self.vbox1.addWidget(self.key)
        #self.vbox1.addStretch(1)
        #self.widget2_3.setLayout(self.vbox1)


        self.vbox1 = QVBoxLayout()
        # self.vbox1.setAlignment(Qt.AlignLeft) 
        self.hboxtemp = QHBoxLayout()
        self.hboxtemp.setAlignment(Qt.AlignLeft)
        self.hboxtemp1 = QHBoxLayout()
        self.hboxtemp1.setAlignment(Qt.AlignCenter)  


        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setFixedSize(250, 35)
        font = QFont('Arial')
        font.setPixelSize(16)
        font.setLetterSpacing(QFont.PercentageSpacing,110)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet('''
        QPushButton
        {  
            color: white;
            background-color:#05B31C;
            border: 1.5px solid #05B31C;
            border-radius: 6px;

        }
        QPushButton:hover
        {
            background: #05B31C;
            color: white;
            
        }''')
        self.pushButton.setText("Login")
        self.pushButton.clicked.connect(self.do_login)
        self.forgotPassword = QtWidgets.QPushButton()
        font = QFont('Arial')
        font.setPixelSize(16)
        self.forgotPassword.setFont(font)
        #self.forgotPassword.setText("Forgot your Password ?")
        self.forgotPassword.setStyleSheet("color:black;border:none")
        
        self.hboxtemp1.addWidget(self.pushButton)

        self.hboxtemp.addWidget(self.forgotPassword)
        self.vbox1.addLayout(self.hboxtemp)
        # self.vbox1.addStretch(1)
        self.vbox1.addLayout(self.hboxtemp1)
        self.vbox1.addStretch(1)
        self.widget2_4.setLayout(self.vbox1)
        self.token = None
        self.vboxmain = QVBoxLayout()
        self.vboxmain.setAlignment(Qt.AlignTop)
        self.vboxmain.addWidget(self.centralwidget)
        self.main_window.setLayout(self.vboxmain)
        # self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.spinner = QtWaitingSpinner(self.centralwidget)
        
    def checkForm(self):
        if(self.default == True):
            self.default = False
            self.defaultForm()
        else:
            self.default = True
            self.mainForm()
    
    def defaultForm(self):    
        self.mlayout.setRowStretch(2, 0)
        self.mlayout.setRowStretch(3, 0)
        self.mlayout.setRowStretch(4, 1)
        self.widget2_2.setVisible(False)

    def mainForm(self):
        self.mlayout.setRowStretch(2, 2)
        self.mlayout.setRowStretch(3, 2)
        self.mlayout.setRowStretch(4, 3)
        self.mlayout.setRowStretch(5, 1)
        self.widget2_2.setVisible(True)

    def check_session(self,MainWindow,app):
        self.app = app
        self.main_window = MainWindow
        # self.splash = MySplashScreen(QtGui.QPixmap(BASE_DIR +'/system/logo1.png')) this should be uncommented
        # self.splash.show() this should be uncommented
        self.thread = LoadThread()
        #df.to_sql('user_info',engine,if_exists='replace',index=False)
        if self.Beta_Testing==True:
            # compaddress=gma()
            # email=str(compaddress)+'@gmail.com'
            email='betatesting@gmail.com'
            lead_source='beta_tester'
            package='free'
            register_df = pd.DataFrame({'email': email, 'lead_source': lead_source, 'package': package}, index=[0])
            beta_register_api(register_df)
            
            #print('hereismacaddress')
            #print(compaddress)
            package='free'
            end_date=datetime.now()
            key='none'
            token='1234567'
            df = pd.DataFrame({'email': email, 'package': package, 'end_date': end_date, 'key': key, 'token': token}, index=[0])
            df.to_sql('user_info',engine,if_exists='replace',index=False)
            self.open_main_screen()
            self.main_window.hide()

        else:
            self.thread.signal.connect(self.get_session_info)
            self.thread.start()

    def get_session_info(self):
        flag,data=self.check_user_info()
        if flag:
            package = data['package'][0]
            self.bring_user_info(data['token'][0])
            flag,data = self.check_user_info()
            if data['package'][0] == package:
                self.open_main_screen()
                self.main_window.hide()
            else:
                show_error_message('Looks like your package was updated')
                # self.splash.close() this should be uncommented
                logout_user_from_db()
                self.main_window.show()
                self.setupUi(self.main_window)
        else:
            # self.splash.close() this should be uncommented
            self.main_window.show()
            self.setupUi(self.main_window)

    def do_login(self):
        self.spinner.start()
        self.thread= LoadThread()
        self.thread.signal.connect(self.process_login)
        self.thread.start()

    def process_login(self):
        email = self.email.text().replace(' ','')
        #password = self.password.text()
        password=''
        #key= self.key.text()
        key=''
        if key == '':
            key = 'none'
        if password == '':
            password = 'za123456789'
        if re.search(regex,email):
            if self.check_authentication(email,password):
                if self.check_for_key(email,key):
                    if self.bring_user_info(self.token):
                        self.spinner.stop()
                        self.open_main_screen()
                    else:
                        self.spinner.stop()
                        show_error_message('An error occured maybe your internet is not working')
                else:
                    self.spinner.stop()
                    show_error_message('Product key is invalid')
            else:
                self.spinner.stop()
                show_error_message('Email Password incorrect')
        else:
            self.spinner.stop()
            show_error_message('Invalid Email Address')

    def check_for_key(self,email='',key=''):
        try:
            data = {'email':email,'key':key}
            headers={'Content-Type': 'application/json' ,'Www-Authorization':str(api_key)}
            r = requests.post(web_url+'/vizpick/check-key/', data=json.dumps(data), headers=headers)
            if r.status_code == 202:
                return True
            else:
                return False ##this needed to be false
        except Exception as e:
            print(e)
            return False

    
    def check_authentication(self,email,password):
        try:
            data = {'email':email,'password':password}
            headers={'Content-Type': 'application/json' ,'Www-Authorization':str(api_key)}
            r = requests.post(web_url+'/rest-auth/login/', data=json.dumps(data), headers=headers)
            self.token = json.loads(r.text)['key']
            if r.status_code == 200:
                return True
            else:
                return False
        except Exception as e:
            print(e)
            return False

    def bring_user_info(self,token):
        try:
            data = {'key':token}
            headers={'Content-Type': 'application/json' ,'Www-Authorization':str(api_key)}
            r = requests.post(web_url+'/vizpick/get-user/', data=json.dumps(data), headers=headers)                                             
            self.user = json.loads(r.text)
            print(self.user)
            if r.status_code == 202:
                df = pd.DataFrame(self.user,index=[0])
                df.to_sql('user_info',engine,if_exists='replace',index=False)
                return True
            else:
                return False
        except Exception as e:
            print(e)
            return False

    def check_user_info(self):
        try:
            sql_query = f'''
                select * from user_info
            '''
            data = run_query(sql_query)
            if data.empty:
                return False,None
            else:
                return True,data
        except Exception as e:
            print(e)
            return False,None
            

    def open_main_screen(self):
        self.main_window.hide()
        screen = self.app.primaryScreen()
        self.Select = QtWidgets.QMainWindow()
        self.ui= Ui_MainWindow()
        self.ui.setupUi(self.Select,screen,self.app,self.splash)
        self.Select.show()
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        # MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Email"))
        #self.label_2.setText(_translate("MainWindow", "Password"))
        #self.pushButton.setText(_translate("MainWindow", "Login"))
        #self.label_3.setText(_translate("MainWindow", "Forgot Password"))


if __name__ == "__main__":
    import sys
    QApplication.setAttribute(QtCore.Qt.AA_DisableHighDpiScaling, True)
    QApplication.setAttribute(Qt.AA_Use96Dpi)
    app = QtWidgets.QApplication(sys.argv)

    # app.setAttribute(Qt.AA_DisableHighDpiScaling)
    MainWindow = QtWidgets.QWidget()
    ui = Login()
    MainWindow.setWindowFlags(Qt.WindowCloseButtonHint | Qt.WindowMinimizeButtonHint)
    ui.check_session(MainWindow,app)
    sys.exit(app.exec_())
