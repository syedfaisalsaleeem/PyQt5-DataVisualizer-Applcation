# -*- coding: utf-8 -*-

#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QSystemTrayIcon, QMenu 
from graph import Graph
from datasource  import WelcomePage
from PyQt5.QtCore import pyqtSignal , QFile ,QIODevice 
from PyQt5.QtCore import pyqtSlot
from PyQt5 import QtCore, QtGui, QtWidgets 
from load_data import Ui_Select
from data_selection import DataSelection
from helper import show_error_message,run_query,pd,engine,api_key,BASE_DIR
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import * 
from helper import run_query,DataCollectionThread


class popup1(QDialog):
    def __init__(self,index=None,tabwidget=None,screen=None):
        super().__init__()
        self.title = "App"
        self.index=index
        self.tabwidget=tabwidget
        self.text=""
        #self.tablefirsttime=0
        self.screen = screen
        self.InitUI()

    def InitUI(self):
            screen = self.screen
            size = screen.size()
            self.resize(int(size.width()*25/100),int(size.height()*18/100))
            self.setWindowModality(Qt.ApplicationModal)
            self.setWindowFlags(Qt.WindowStaysOnTopHint)
            self.setWindowIcon(QtGui.QIcon(BASE_DIR +'/system/logo1.png'))
            self.setStyleSheet('background-color:#F7F7F7;')
            self.setWindowTitle('Change tab name')
            
            label1 = QLabel('Change tab name',self)
            font = QFont('Arial')
            font.setPixelSize(24)
            label1.setFont(font)
            hbox = QHBoxLayout()
            hbox.addStretch(1)
            hbox.addWidget(label1)
            hbox.addStretch(1)
            
            label2 = QLabel("You want to rename the tab ?",self)
            font = QFont('Arial')
            font.setPixelSize(16)
            label2.setFont(font)
            hbox2 = QHBoxLayout()
            hbox2.addStretch(1)
            hbox2.addWidget(label2)
            hbox2.addStretch(1)
            
            label3 = QLabel("New name:",self)
            font = QFont('Arial')
            font.setPixelSize(16)
            label3.setFont(font)
            self.plainTextEdit = QtWidgets.QLineEdit(self)
            self.plainTextEdit.textChanged.connect(self.textchanged)
            # self.plainTextEdit.setFixedSize(200, 20)
            
            hbox3 = QHBoxLayout()
            hbox3.addStretch(1)
            hbox3.addWidget(label3)
            hbox3.addWidget(self.plainTextEdit)
            hbox3.addStretch(1)

            okButton = QPushButton("Yes")
            okButton.setFixedSize(120, 40)
            font = QFont('Arial')
            font.setPixelSize(15)
            okButton.setFont(font)
            okButton.setStyleSheet('background-color:#103F91;color:white')
            okButton.clicked.connect(self.call_yes)

            cancelButton = QPushButton("No")
            cancelButton.setFixedSize(120, 40)
            font = QFont('Arial')
            font.setPixelSize(15)
            cancelButton.setFont(font)
            cancelButton.setStyleSheet('background-color:#F22323;color:white')
            cancelButton.clicked.connect(self.call_no)
            
            hbox4 = QHBoxLayout()
            hbox4.addStretch(1)
            hbox4.addWidget(okButton)
            hbox4.addWidget(cancelButton)
            
            vbox = QVBoxLayout()
            # vbox.addStretch(1)
            vbox.addLayout(hbox)
            vbox.addStretch(1)
            vbox.addLayout(hbox2)
            vbox.addStretch(2)
            vbox.addLayout(hbox3)
            vbox.addStretch(2)
            vbox.addLayout(hbox4)
            self.setLayout(vbox)

 
    def textchanged(self,text):
        self.text=text

    def call_yes(self):
        self.tabwidget.setTabText(self.index,self.text)
        self.close()

    def call_no(self):
        self.close()

class Ui_MainWindow(QWidget):


    def setupUi(self, MainWindow,screen,app,splash):
        self.app = app
        self.screen = screen#screen.name()
        # To get screen size
        size = screen.size()
        # set the object name 
        MainWindow.setObjectName("MainWindow")
        #size of the window
        '''
        This is the commented code
        '''
        MainWindow.resize(size.width()*10/100, size.height()*10/100)
        # MainWindow.resize(size.width()*80/100, size.height()*80/100)
        # MainWindow.setMinimumSize(1360, 768)
        # MainWindow.resize(1024, 768)
        # accessible name 
        MainWindow.setAccessibleName("")
        # automatically fill if there is a color set
        MainWindow.setAutoFillBackground(True)
        # set the same tootlbar in mac
        MainWindow.setUnifiedTitleAndToolBarOnMac(True)
        MainWindow.setStyleSheet(open(BASE_DIR +"/system/Style/StyleSheet.css", "r").read())
        # set Title
        MainWindow.setWindowTitle( "VizPick")
        MainWindow.setWindowIcon(QtGui.QIcon(BASE_DIR +'/system/logo1.png'))
        # MainWindow.setWindowTitle("Make Data Graphs")
        # add tab widget
        self.tabWidget = QtWidgets.QTabWidget(MainWindow)
        # set tab widget size
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        # tabWidget->setStyleSheet("QTabBar::tab { height: 40px; width: 100px; }");
        # self.tabWidget.setFixedHeight(20)
        self.tabWidget.setStyleSheet('''QTabWidget::pane {border: 0px solid black;
    background: red;
} 


''')
        #closable true for widget
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.setMovable(True)
        self.tabWidget.tabCloseRequested.connect(lambda index: self.demofunction(index)) 
        self.tabWidget.tabBarDoubleClicked.connect(lambda index: self.rename_tab(index,screen))
        # set tab widget in mainwindow
        MainWindow.setCentralWidget(self.tabWidget)
        # create new tab for first screen
        self.firstPage = QtWidgets.QWidget(self.tabWidget)
        self.firstPage.setGeometry(QtCore.QRect(0, 0, self.tabWidget.width(), self.tabWidget.height()))
        self.tabWidget.addTab(self.firstPage, 'Data selection')
        # # create first page
        self.welcomePage = WelcomePage(self.firstPage,MainWindow,self.app) #DataSelection()
        # set first page inside Widget 
        self.welcomePage.setupUi(self.firstPage)
        # 
        self.welcomePage.openSelectionScreen.connect(self.onOpenSelectionScreen)
        self.tabWidget.currentChanged.connect(self.onCurrentTabChanged)
        self.isSecondPageAdded = False
        self.isThirdPageAdded = False
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.South)
        # MainWindow.layout().addWidget(self.stackwidget)
        self.thread = DataCollectionThread()
        self.thread.start()
        splash.close()
        self.db = None

    def rename_tab(self,index,screen):
        self.x=popup1(index,self.tabWidget,screen=self.screen)
        self.x.show()
        print("pass",index)

    def demofunction(self,index):
        self.tabWidget.removeTab(index);
        # delete tabWidget_->widget(index);
        # self.tab_widget.setTabText(index,"faisal")
        # print("pass",index)  
    
    @pyqtSlot(int)
    def onCurrentTabChanged(self,index):
        # print('current index ',index)
        for i in range(0,self.tabWidget.count()):
            # print(i)
            if(i > index):
                print('current disabled ',i)
                # self.tabWidget.setTabEnabled(i,False)
                # self.tabWidget.removeTab()

    @pyqtSlot(str)
    def onOpenSelectionScreen(self,data):
        self.db = data
        print(data,"here is data")
        # if(self.isSecondPageAdded):
        #     self.tabWidget.setCurrentWidget(self.secondPage)
        #     self.tabWidget.setTabEnabled(self.tabWidget.currentIndex(),True)
        # else:        
            # create second page
        self.dataSelection = DataSelection(data)
        # add connection 
        self.dataSelection.openGraphScreen.connect(self.onOpenThirdScreen)
        # create widget for second page
        self.secondPage = QtWidgets.QWidget(self.tabWidget)
        # set second page inside Widget 
        self.dataSelection.setupUi(self.secondPage)
        # add second page  Widget to tab widget
        self.tabWidget.addTab(self.secondPage, data)
        # select this page 
        self.tabWidget.setCurrentWidget(self.secondPage)
        self.isSecondPageAdded = True
        # self.tabWidget.widget(self.tabWidget.currentIndex).setEnabled(True)
        

    @pyqtSlot(dict,str,list,str)
    def onOpenThirdScreen(self,field_arr,field_str,app_tabs,db_name):
        print(field_arr,field_str,app_tabs,"opened")
        # if(False):#self.isThirdPageAdded):
        #     self.tabWidget.setCurrentWidget(self.ThirdPage)
        #     self.tabWidget.setTabEnabled(self.tabWidget.currentIndex(),True)
        # else:   
            # create widget for Third page
        self.ThirdPage = QtWidgets.QWidget(self.tabWidget)
        # print the field_arr
        print(field_arr,"checking for tab name",self.dataSelection.db_name)
        # create Third page
        self.GraphPage = Graph(field_arr,self.tabWidget,db_name,field_str,app_tabs) 
        # set Third page inside Widget 
        self.ThirdPage.setGeometry(0,0,self.tabWidget.width(),self.tabWidget.height())
        # add Third page  Widget to tab widget
        
        self.tabWidget.addTab(self.ThirdPage, 'Third page')
        # select this page 
        self.GraphPage.setupUi(self.ThirdPage)
        self.isThirdPageAdded = True
            # self.tabWidget.widget(self.tabWidget.currentIndex).setEnabled(True)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())