# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graph.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from helper import (
    ExtendedTextBox,
    BoxStyle,
    run_query,
    where_function
    ,MySplashScreen,
    ClickLabel,
    LoadThread,BASE_DIR,home,platform)
from helper import show_error_message
import matplotlib as mpl
import shutil
from filter import FilterWindow
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import PIL
from PIL import Image
# from waitingspinnerwidget import QtWaitingSpinner
BoxStyle._style_list["ext"] = ExtendedTextBox



class SuperGraph(object):
    # constructor to intialize the variablesz
    def __init__(self):
        self.range_character = {}
        self.range_number = {}
        self.range_date = {}
        self.selection_characters = {}
        self.selection_numbers = {}
        self.selection_dates = {}
        self.data = None
        self.data_types =["CHARACTER","NUMBER","DATE",]
        self.character_dict = {}
        self.number_dict = {}
        self.date_dict = {}
        self.y_axis_stop = 0
        self.lbl = {}
        self.category = None
        self.splash = MySplashScreen(QtGui.QPixmap(BASE_DIR +'/system/loaders/l_build.jpg'))
        self.filter_flag = False



    def create_area(self,tab,width,height,layout,topwidget,layoutfixedwidgettop,filterbutton,smallwidgetinsidefixedwidgettop):
        self.smallwidgetinsidefixedwidgettop = smallwidgetinsidefixedwidgettop
        self.topwidget = topwidget
        self.layoutfixedwidgettop = layoutfixedwidgettop
        self.layout = layout
        self.filterbutton = filterbutton
        # self.vbox = QVBoxLayout()
        # self.tab = tab
        # tab.setLayout(self.vbox)
        

        self.scrollArea = QtWidgets.QScrollArea()
        self.scrollArea.setAutoFillBackground(True)
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, width, height))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        # set central widget on main window
        # tab.layout().addWidget(self.scrollArea)

        # main widget inside scroll area
        self.scrollAreaWidgetContents = QtWidgets.QWidget(self.scrollArea)
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0,  width, height))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        
        self.scrollArea.setStyleSheet("QTabWidget>QWidget>QWidget {background: #blue;}\n" 
                "QFrame {background: #fff}\n"
                "QPushButton {background:#85bb65}\n"
                "QPushButton {color:#fff}")

        self.hbox = QHBoxLayout()
        self.hbox.setAlignment(Qt.AlignTop)
        # horizontal center widget for large screens
        self.widgetinsidescrollarea = QWidget(self.scrollAreaWidgetContents)
        self.widgetinsidescrollarea.setMinimumWidth(1300) 
        self.widgetinsidescrollarea.setMaximumWidth(1300)
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.widgetinsidescrollarea) 
        self.hbox.addStretch(1)
        self.scrollAreaWidgetContents.setLayout(self.hbox)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.layout.addWidget(self.scrollArea)
        self.main_window.setStyleSheet("background-color:#fff;")

    def run_spinner(self,flag=False):
        self.splash.show()        
        self.thread = LoadThread()
        if flag:
            self.thread.signal.connect(lambda:self.generate_graph(self.fields,self.y_axis,self.field_str,where_func=where_function(self),category=self.category))
        else:
            self.thread.signal.connect(lambda:self.generate_graph(self.fields,self.y_axis,self.field_str))
        self.thread.start()

    def generate_top_text(self):
        self.hboxwidgetinsiderow1 = QHBoxLayout()
        self.hboxwidgetinsiderow1.setAlignment(Qt.AlignCenter)
        self.label1 = QWidget(self.smallwidgetinsidefixedwidgettop)
        self.label1.setFixedWidth(1250)
        self.layoutfixedwidgettop.addWidget(self.label1)
        self.label1.setLayout(self.hboxwidgetinsiderow1)
        self.label_top = QtWidgets.QLabel(self.label1)
        self.label_top.setGeometry(QtCore.QRect(500, 0, 450, 30))
        self.label_top.setObjectName("label")
        font = QFont('Arial')
        font.setPixelSize(20)
        self.label_top.setFont(font)

        text = f'''{self.fields['aggregate'][0]} of {self.fields['number'][0]}'''

        if(self.fields['character'][0] != 'None' and self.fields['date'][0] != 'None'):
            text += ' by ' +  str(self.fields['character'][0]) + ' and ' +  str(self.fields['date'][0]) 

        elif self.fields['character'][0] != 'None' :
            text += ' by ' +  str(self.fields['character'][0])

        elif self.fields['date'][0] != 'None':
            text += ' by ' +  str(self.fields['date'][0]) 


        self.label_top.setText(text)
        self.generate_top_filter_text()
        self.hboxwidgetinsiderow1.addWidget(self.label_top)
        self.hboxwidgetinsidesecondrow = QHBoxLayout()
        self.hboxwidgetinsidesecondrow.setAlignment(Qt.AlignCenter)
        self.secondlabel = QWidget(self.smallwidgetinsidefixedwidgettop)
        self.secondlabel.setFixedWidth(1250)
        self.layoutfixedwidgettop.addWidget(self.secondlabel)
        self.secondlabel.setLayout(self.hboxwidgetinsidesecondrow)
        self.label_filter = QtWidgets.QLabel(self.secondlabel)
        self.label_filter.setFixedHeight(0)
        font = QFont('Arial')
        font.setPixelSize(18)
        self.label_filter.setFont(font)
        self.hboxwidgetinsidesecondrow.addWidget(self.label_filter)

    def generate_top_filter_text(self):

        if  len(self.selection_characters) != 0 or  len(self.selection_numbers) != 0 or  len(self.selection_dates) != 0:
            
            # self.label_filter.setGeometry(QtCore.QRect(200, 35, 800, 30))
            self.label_filter.setObjectName("label")
            text = 'Filter By (hover for details):'
            tool_tip = ''
            if len(self.selection_characters) != 0:
                for key,value in self.selection_characters.items():
                    text += ' '
                    text+=key
                    text += ','
                    tool_tip += key
                    tool_tip = tool_tip +' ' +str(value) 
            if len(self.selection_numbers) != 0 :
                for key,value in self.selection_numbers.items():
                    if int(self.selection_numbers[key][0]) != int(float(self.range_number[key][0])) or int(self.selection_numbers[key][1]) != int(float(self.range_number[key][1])):
                        text += ' '
                        text+=key
                        text += ','
                        tool_tip += key
                        tool_tip = tool_tip +' ' +str(self.selection_numbers[key]) 
            if len(self.selection_dates) != 0 : 
                for key,value in self.selection_dates.items():
                    if self.selection_dates[key] != self.range_date[key]: 
                        text += ' '
                        text+=key
                        text +=','
                        tool_tip += key
                        tool_tip = tool_tip +' ' +str(self.selection_dates[key]) 
            if(text[-1]==","):
                x_text = text[:-1]
            else:
                x_text = text

            self.label_filter.setText(x_text)
            self.label_filter.setToolTip(tool_tip)  
            self.label_filter.show()
            self.label_filter.setFixedHeight(35)
        

    def generate_category_button(self):
        self.hboxwidgetinsidefourthrow = QHBoxLayout()
        self.hboxwidgetinsidefourthrow.setAlignment(Qt.AlignLeft)
        self.fourthrowbutton = QWidget(self.smallwidgetinsidefixedwidgettop)
        self.fourthrowbutton.setFixedWidth(1250)
        self.layoutfixedwidgettop.addWidget(self.fourthrowbutton)
        self.fourthrowbutton.setLayout(self.hboxwidgetinsidefourthrow)
        sql_query = f'''select distinct b.Category 
             from Graph_Types_List a INNER JOIN graph_category b on a.graph_function = b.graph_function
              WHERE a.graph_type='{self.field_str}' ;
            '''
        categories = run_query(sql_query)['Category'].tolist()
        print('################ CATEGORIES #######################')
        print(categories)
        x_axis = 0
        count = 0
        self.y_axis = 70
        for category in categories:
            if count == 6:
                self.hboxwidgetinsidefourthrow = QHBoxLayout()
                self.hboxwidgetinsidefourthrow.setAlignment(Qt.AlignLeft)

                self.fourthrowbutton = QWidget(self.smallwidgetinsidefixedwidgettop)
                self.fourthrowbutton.setFixedWidth(1250)
                self.layoutfixedwidgettop.addWidget(self.fourthrowbutton)

                self.fourthrowbutton.setLayout(self.hboxwidgetinsidefourthrow)
            # if count % 6 == 0 and count != 0:
            #     x_axis = 0
            #     self.y_axis+=50
            self.cat_btn = QtWidgets.QPushButton(self.fourthrowbutton) 
            self.cat_btn.setStyleSheet('''
            QPushButton
            {
                padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
                margin-right:15px;
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
            }

            QPushButton::disabled
            {
                color: #acacac;
            }

            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }

            QPushButton:pressed
            {padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
            margin-right:15px;
            background: #6e98e0;
                color: white;

            }
            QPushButton:checked
            {margin-right:15px;
            padding-top:10px;padding-bottom:10px;padding-left:30px;padding-right:30px;
    background: #6e98e0;
                color: white;
            }
                ''')
            # self.cat_btn.setGeometry(QtCore.QRect(10+x_axis, 10+self.y_axis, 175, 31))
            self.cat_btn.setFixedSize(215, 37)
            self.cat_btn.setObjectName("pushButton")
            self.cat_btn.setText(category)
            self.cat_btn.clicked.connect(lambda state ,cat=category:self.update_graph(cat))
            self.hboxwidgetinsidefourthrow.addWidget(self.cat_btn)
            x_axis += 215
            count += 1
        self.y_axis += 10
        self.y_axis_stop = self.y_axis

    def update_graph(self,category=None):
        self.y_axis = self.y_axis_stop
        for key,value in self.lbl.items():
            value.hide() 
        self.lbl.clear()
        if category != None:
            self.category = category
        self.generate_top_filter_text()         
        self.run_spinner(flag=True)

    def get_data_from_table(self):
        '''
            This function is responsible to get the data fields from meta tabel
        '''
        sql_query = f'''
                select * from meta_data where dbname='{self.db_name}'
        '''
        # run the sql query
        self.data = run_query(sql_query)
        # replace nan with 0
        self.data = self.data.fillna(0)
        # itereate over the data
        for index, row in self.data.iterrows():
            # check if it,s character
            if row['data_type'] == 'CHARACTER':
                # fill the character field with all the character field datra
                self.range_character[row['field']] = sorted(row['unique_data'].split('###'))
            elif row['data_type'] == 'NUMBER':
                # fill the number range with number field data
                self.range_number[row['field']] = row['unique_data'].split(',')
            elif row['data_type'] == 'DATE':
                # fill the date range field with date field data
                self.range_date[row['field']] = row['unique_data'].split(',')

    def open_filter(self):
        if not self.filter_flag:
            self.Select = QtWidgets.QMainWindow()
            self.filter_window = FilterWindow(self.selection_characters,self.selection_numbers,
                                self.selection_dates,self.db_name,self.update_graph,
                                self.range_character,self.range_number,self.range_date,self.data)
            
            self.filter_window.setupUi(self.Select)
            self.Select.show()
            self.filter_flag = True
        else:
            self.Select.show()

    def generate_graph(self,fields,y_axis,field_str,where_func=None,category=None):
        y_axis=0
        x_axis = 0
        count = 0
        
        if where_func != None:
            sql_data = self.create_sql_queries(flag=True,where_func=where_func)
        else:
            sql_data = self.create_sql_queries()
        
        
        df_length=len(sql_data[0])
        if category != None:
            sql_query = f'''
            select distinct a.graph_type,a.chart_type,a.graph_name, a.graph_function,a.sql_function,b.Category
            from Graph_Types_List a INNER JOIN graph_category b on a.graph_function = b.graph_function
            WHERE a.graph_type='{self.field_str}' and b.Category = '{category}' and a.Aggregate='{self.fields['aggregate'][0]}'
            and a.min_length<={df_length};
            '''
        else:
            sql_query = f'''
                select * from Graph_Types_List a where graph_type = '{field_str}' and Aggregate='{self.fields['aggregate'][0]}'
                and {df_length}>=a.min_length
            '''
        print('hereisquery')
        print(sql_query)
        data = run_query(sql_query)
        
        print(len(sql_data[0]))
        data_points=len(sql_data[0])
        try:
            if data_points>100:
                self.splash.close()
                self.open_filter()
                show_error_message('These graphs contain '+ str(data_points)+' data points. Filter the data to show a more appropriate graph image.')
                return
            elif data_points>50:
                
                #self.splash.close()
                #self.open_filter()
                show_error_message('These graphs contain '+ str(data_points)+' data points and could take several minutes to create. You may want to filter the data on the next screen to get the image you want. The filter button is in the upper left hand corner.')
                
                

        except:
            pass
        # self.thread = DataToExcelThread(self.tab)
        # self.thread.start()
        temp_i=0
        for i, row in data.iterrows():
            print(i)
            try:
                func = getattr(self, str(row['sql_function']))
                if where_func != None:
                    parameters = func(sql_data)
                else:   
                    parameters = func(sql_data)
                if count % 3 == 0 and i != 0:
                    #y_axis+=500
                    y_axis+=420
                    x_axis = 0
                    self.widgetinsidescrollarea.setFixedHeight(y_axis)
                if(temp_i==0):
                    func_graph = getattr(self, str(row['graph_function']))
                    ax,fig = func_graph(parameters,row['chart_type'],fields)
                    self.open_images(ax,x_axis,0,parameters,row['chart_type'],fields,count,func,func_graph,sql_data)
                    temp_i=1
                else:
                    func_graph = getattr(self, str(row['graph_function']))
                    ax,fig = func_graph(parameters,row['chart_type'],fields)
                    self.open_images(ax,x_axis,y_axis,parameters,row['chart_type'],fields,count,func,func_graph,sql_data)
                # set title text and background color and font color
            except Exception as e:
                print('########################ERROR##########################')
                print(e)
                continue
            x_axis += 430
            count +=1
        y_axis += 550
        #y_axis += 250
        self.widgetinsidescrollarea.setFixedHeight(y_axis)
        self.splash.close()


                 
    
              
    def open_images(self,ax,x_axis,y_axis,parameters,kind,fields,count,sql_func,graph_func,sql_data):
        #from customization import Customization 
        #Customization.create_graph(self)
        if platform != 'darwin':
            ax.get_figure().savefig(str(count)+'.png',bbox_inches="tight", dpi=100)
            pixmap = QtGui.QPixmap(str(count)+'.png')
        else:
            ax.get_figure().savefig(home+"/"+str(count)+'.png',bbox_inches="tight", dpi=100)
            pixmap = QtGui.QPixmap(home+"/"+str(count)+'.png')
        self.lbl[graph_func.__name__] = ClickLabel(self.widgetinsidescrollarea)
        self.lbl[graph_func.__name__].setPixmap(pixmap)
        self.lbl[graph_func.__name__].setScaledContents(True)
            #self.lbl[graph_func.__name__].setGeometry(QtCore.QRect(10+x_axis, 100+y_axis, 400, 400))
        self.lbl[graph_func.__name__].setGeometry(QtCore.QRect(10+x_axis, 10+y_axis, 400, 400))
        self.lbl[graph_func.__name__].clicked.connect(lambda:self.graph_class.create_filter_tab('Graph'+str(count),parameters['dataframe'],
                                        self.db_name,fields,kind,parameters['title'],sql_func,graph_func,sql_data))
        self.lbl[graph_func.__name__].show()
        try:
            if platform != 'darwin':
                os.remove(str(count)+'.png')
            else:
                os.remove(home+"/"+str(count)+'.png')
        except:
            print('picture no found')

