# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'datasource.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QSystemTrayIcon, QMenu
from PyQt5.QtCore import  pyqtSignal
from PyQt5.QtCore import pyqtSlot
from PyQt5 import QtCore, QtGui, QtWidgets
from load_data import Ui_Select
from load_data1 import Ui_Select1
from data_selection import DataSelection
from helper import show_error_message,run_query,pd,engine,delete_datasource,BASE_DIR, collect_data
import numpy as np
from helper import show_error_message,run_query,pd,engine,delete_datasource,logout_user_from_db
# from login import Login

import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QGroupBox, QDialog, QVBoxLayout, QGridLayout
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import sip
from file_popup import PopupFile
#     openSelectionScreen = pyqtSignal(str)
#     def setupUi(self, MainWindow):
#         # set the object name 
#         self.main_window = MainWindow

class WelcomePage(QWidget):
    openSelectionScreen = pyqtSignal(str)
    def __init__(self,MainWindow,mmainwindow,screen):
        super().__init__()
        self.title = 'PyQt5 layout - pythonspot.com'
        self.left = 10
        self.top = 10
        self.width = 1024
        self.height = 768
        self.temp_list = []
        self.store_value = ""
        self.main_window = MainWindow
        self.mmainwindow = mmainwindow
        self.screen = screen
        self.already_selected = False
        # self.initUI()
        
    def setupUi(self,MainWindow):
        # self.main_window = MainWindow
        # self.setWindowTitle(self.title)
        # self.setMinimumSize(1024, 768)
        # self.showMaximized()
        # self.setGeometry(self.left, self.top, self.width, self.height)

        self.centralwidget = MainWindow
        self.centralwidget.setAttribute(Qt.WA_AcceptTouchEvents, True)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        # set the position of the 
        self.comboBox.setGeometry(QtCore.QRect(220, 190, 181, 31))
        # set the object name
        self.comboBox.setObjectName("comboBox")
        # add an item in the dropdown
        self.comboBox.addItem('Chooose ...')
        # add the default option in dropdown
        self.comboBox.setCurrentText('Chooose ...')
        self.get_all_database()
        self.createGridLayout()
        
        windowLayout = QVBoxLayout()
        windowLayout.setContentsMargins(0,0,0,0)
        # windowLayout.setSpacing(0)
        windowLayout.addWidget(self.horizontalGroupBox)
        self.main_window.setLayout(windowLayout)
        
        
        # self.show()

    def _deleteDatasource(self,label,button):
        print(label.text(),button,self.temp_list)
        db_name = label.text()
        db_name = db_name.lower().replace("\n","")
        delete_datasource(db_name)
        sip.delete(self.widget2_1)
        sip.delete(self.widget2_3)

        # self.mlayout.setRowStretch(0, 1)
        # self.mlayout.setRowStretch(1, 3)
        # self.mlayout.setRowStretch(2, 1)
        # self.mlayout.setRowStretch(3, 7)

        self.widget2_1 = QWidget()
        self.widget2_1.setStyleSheet("background:#F8F8F8")
        self.widget2_1.setVisible(True)
        self.mlayout.addWidget(self.widget2_1,1,1)
        
        

        self.widget2_3 = QWidget()
        self.widget2_3.setStyleSheet("background:#F8F8F8")
        self.widget2_3.setVisible(True)
        self.mlayout.addWidget(self.widget2_3,3,1)

        self.get_all_database()
        self.show_databases_clicked()
        # get_all_database(self)
        # self.temp_list

    
    def createGridLayout(self):
        self.horizontalGroupBox = QFrame()
        self.horizontalGroupBox.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.widget1 = QWidget()
        self.widget1.setStyleSheet("background:blue")

        self.widget2 = QWidget()
        self.widget2.setStyleSheet("background:#F8F8F8")

        self.widget2_1 = QWidget()
        self.widget2_1.setStyleSheet("background:#F8F8F8")

        self.widget2_2 = QWidget()
        self.widget2_2.setStyleSheet("background:#F8F8F8")

        self.widget2_3 = QWidget()
        self.widget2_3.setStyleSheet("background:#F8F8F8")
        self.widget2_3.setVisible(True)



        widget2_4 = QWidget()
        widget2_4.setStyleSheet("background:black")

        self.widget3 = QWidget()
        self.widget3.setStyleSheet("background:yellow")
        
        self.mlayout = QGridLayout()
        self.mlayout.setContentsMargins(0,0,0,0)
        self.mlayout.setSpacing(0)
        self.mlayout.setColumnStretch(0, 1)
        self.mlayout.setColumnStretch(1, 4)
        self.mlayout.setColumnStretch(2, 1)
        
        self.mlayout.setRowStretch(0, 1)
        self.mlayout.setRowStretch(1, 3)
        self.mlayout.setRowStretch(2, 1)
        self.mlayout.setRowStretch(3, 7)
        # layout.setRowStretch(1, 2)
        # layout.setRowStretch(2, 1)
        
        self.mlayout.addWidget(self.widget1,0,0,0,1) #1st row 1st column expand to 2nd row 2nd column  ##if we place 0 in expand it will expand full
        self.mlayout.addWidget(self.widget2,0,1)
        self.mlayout.addWidget(self.widget2_1,1,1)
        self.mlayout.addWidget(self.widget2_2,2,1)
        self.mlayout.addWidget(self.widget2_3,3,1)
        self.mlayout.addWidget(self.widget3,0,2,0,1)

        
        self.create_update()
        self.load_data_layout()
        self.main_top()
        self.discover_layout()

        self.horizontalGroupBox.setLayout(self.mlayout)
        self.show_databases_clicked()

    def show_databases_clicked(self):
        def create_label(label):
            num = 0
            cr_label = ""
            for x in label:
                if(num==13):
                    cr_label+="\n"
                    num = 0
                cr_label = cr_label + x
                num = num + 1
            return cr_label
        # print(self.temp_list,"self.temp_list")

        self.scroll = QScrollArea(self.centralwidget)
        self.scroll.setFixedHeight(200)
        # self.scroll.setGeometry(0,0,100,100)

        self.frame = QWidget()
        # QScroller::grabGesture(scrollArea, QScroller::LeftMouseButtonGesture);
        # self.scroll.setHorizontalScrollMode(QAbstractItemView.ScrollPerPixel)
        
        ### can be removed ###
        # QScroller.grabGesture(self.scroll,  QScroller.LeftMouseButtonGesture)
        ### can be removed ###

        # self.frame.setStyleSheet("background:white")
        # self.frame.setMinimumSize(1000,668)
        # self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        # self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.frame)

        self.hbox_main = QHBoxLayout()

        self.vbox_buttons = QVBoxLayout()
        
        self.hbox_main.addStretch(1)
        self.hbox_main.addLayout(self.vbox_buttons)
        self.hbox_main.addStretch(1)
        
        self.vbox_buttons.setAlignment(Qt.AlignLeft)
        
        self.hbox_buttons = QHBoxLayout()
        # self.hbox_buttons.setAlignment(Qt.AlignLeft)

        self.vbox_buttons.addLayout(self.hbox_buttons)

        self.frame.setLayout(self.hbox_main)

        self.vboxsdc = QVBoxLayout()
        self.vboxsdc.setAlignment(Qt.AlignLeft)
        self.widget2_1.setLayout(self.vboxsdc)
        self.vboxsdc.addWidget(self.scroll)
        count = 0
        self.button_list = {'number':{}}
        self.label = {'number':{}}
        self.button = {'number':{}}

        print("self.temp_list checking", self.temp_list)
        ## making the label widget to show that there is no data or temp_list is empty
        if(len(self.temp_list)==0):
            self.showstartlabel = QLabel("Pick A File Type On The Left To Begin")
            self.showstartlabel.setAlignment(Qt.AlignCenter)
            yfont = QFont('Arial')
            yfont.setPixelSize(16)
            yfont.setBold(True)
            self.showstartlabel.setFont(yfont)

            ## Setting the Text Widget at Center in HBOX scroll Area
            self.hbox_buttons.addWidget(self.showstartlabel)

        else:
            # self.button_list['number'] = self.temp_list
            for items,values in enumerate(self.temp_list):
                if(count==4):
                    count = 0

                    # self.hbox_buttons = QHBoxLayout()
                    # self.hbox_buttons.setAlignment(Qt.AlignLeft)
                    # # self.hbox_buttons.addStretch(stretch=1)
                    # self.vbox_buttons.addLayout(self.hbox_buttons)

                    

                count = count+1
                self.outside_buttons = QWidget()
                self.outside_buttons.setStyleSheet('margin-right:10px;margin-left:10px')
                self.outside_buttons.setFixedWidth(173)

                self.outside_hbox = QHBoxLayout()

                self.outside_buttons.setLayout(self.outside_hbox)

                self.button_list['number'][values] = QPushButton()
                # x_height = self.button_list['number'][values].height()
                # print(x_height)
                # self.button_list['number'][values].setFixedWidth(160)
                self.label['number'][values] = QLabel(self.button_list['number'][values])
                vv = create_label(values)
                # print(len(values))
                self.label['number'][values].setText(vv)
                self.label['number'][values].setAutoFillBackground(True)
                self.label['number'][values].setStyleSheet("background-color:transparent;")
                # self.label.setStyleSheet(
                #     '''
                # QLabel
                # {  
                #     color: black;
                #     background-color: #DFDFDF;
                # }
                # QLabel:hover
                # {
                #     background: #6e98e0;
                #     color: white;
                    
                # }''')
                font = QFont('Arial')
                font.setPixelSize(16)
                self.label['number'][values].setFont(font)

                self.widget_temp1 = QWidget()
                self.widget_temp1.setStyleSheet("background:#D2D2D2")
                self.widget_temp1.setFixedHeight(20)

                temp_layout1 = QHBoxLayout()
                temp_layout1.setContentsMargins(0,0,10,0) 
                temp_layout1.setAlignment(Qt.AlignRight)

                self.widget_temp1.setLayout(temp_layout1)
                self.button['number'][values] = QPushButton("x")
                self.button['number'][values].clicked.connect(lambda state,button=self.button_list['number'][values],label=self.label['number'][values]:self._deleteDatasource(label=label,button=button))
                self.button['number'][values].setStyleSheet("background-color:transparent;padding:0px")
                temp_layout1.addWidget(self.button['number'][values])

                yfont = QFont('Arial')
                yfont.setPixelSize(15)

                # self.button['number'][values].setFont(QFont('Arial', 12,True))
                yfont.setBold(True)
                self.button['number'][values].setFont(yfont)
                # self.button['number'][values].setFixedSize(50,20)
                self.button['number'][values].setFixedHeight(10)
                # self.button['number'][values].setAlignment(Qt.AlignRight)
                layout = QVBoxLayout(self.button_list['number'][values]);
                layout.setContentsMargins(0,0,0,0) 
                # layout.addStretch(1)
                layout.addWidget(self.widget_temp1,0,Qt.AlignTop);
                layout.addWidget(self.label['number'][values],1,Qt.AlignHCenter);
                # layout.addStretch(1)

                font = QFont('Arial')
                font.setPixelSize(16)
                self.button_list['number'][values].setFont(font)
                # self.button_list['number'][values].setFixedWidth(200)
                self.button_list['number'][values].setStyleSheet('''
                QPushButton
                {  
                    padding-top:50px;
                    padding-bottom:60px;

                    color: black;
                    background-color: #DFDFDF;
                }
                QPushButton:hover
                { 
                    background: #6e98e0;
                    color: white;
                    
                }

                ''')
                r = self.button_list['number'][values].hasFocus()
                # print(r)
                # print(self.button_list['number'][values],"dsaasd")
                effect = QGraphicsDropShadowEffect(self.button_list['number'][values])
                effect.setOffset(0, 0)
                effect.setColor(QColor(0,0,0))
                effect.setBlurRadius(10)
                self.button_list['number'][values].setGraphicsEffect(effect)
                self.button_list['number'][values].clicked.connect(lambda state,button=self.button_list['number'][values],label=self.label['number'][values]:self.open_selection_screen(label=label,button=button))
                self.outside_hbox.addWidget(self.button_list['number'][values])
                self.hbox_buttons.addWidget(self.outside_buttons)
            # self.hbox_buttons.addWidget(self.button_list['number'][values])
        
            
            # open_selection_screen(self,text)
            # self.vbox_buttons.addWidget(self.button)

    def show_databases_clicked1(self,widget,passvalue):
        self.passvalue = passvalue
        # print("passvalue",self.passvalue)
        def create_label(label):
            num = 0
            cr_label = ""
            for x in label:
                if(num==14):
                    cr_label+="\n"
                    num = 0
                cr_label = cr_label + x
                num = num + 1
            return cr_label
        self.widget2_1 = widget
        # print(self.temp_list,"self.temp_list")
        self.scroll = QScrollArea(self.centralwidget)
        QScroller.grabGesture(self.scroll,  QScroller.LeftMouseButtonGesture)
        # self.scroll.setGeometry(0,0,100,100)
        self.frame = QWidget()
        # self.frame.setStyleSheet("background:pink")
        # self.frame.setMinimumSize(1000,668)
        # self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        # self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.frame)

        self.hbox_main = QHBoxLayout()

        self.vbox_buttons = QVBoxLayout()
        
        self.hbox_main.addStretch(1)
        self.hbox_main.addLayout(self.vbox_buttons)
        self.hbox_main.addStretch(1)
        
        self.vbox_buttons.setAlignment(Qt.AlignLeft)
        
        self.hbox_buttons = QHBoxLayout()
        # self.hbox_buttons.setAlignment(Qt.AlignLeft)

        self.vbox_buttons.addLayout(self.hbox_buttons)

        self.frame.setLayout(self.hbox_main)

        self.vboxsdc = QVBoxLayout()
        self.vboxsdc.setAlignment(Qt.AlignLeft)
        self.widget2_1.setLayout(self.vboxsdc)
        self.vboxsdc.addWidget(self.scroll)
        count = 0
        self.button_list = {'number':{}}
        self.label = {'number':{}}
        # self.button_list['number'] = self.temp_list
        for items,values in enumerate(self.temp_list):
            if(count==4):
                count = 0

                # self.hbox_buttons = QHBoxLayout()
                # self.hbox_buttons.setAlignment(Qt.AlignLeft)
                # # self.hbox_buttons.addStretch(stretch=1)
                # self.vbox_buttons.addLayout(self.hbox_buttons)

                

            count = count+1
            self.outside_buttons = QWidget()
            self.outside_buttons.setStyleSheet('margin-right:10px;margin-left:10px')
            self.outside_buttons.setFixedWidth(173)

            self.outside_hbox = QHBoxLayout()

            self.outside_buttons.setLayout(self.outside_hbox)
            self.button_list['number'][values] = QPushButton()

            # x_height = self.button_list['number'][values].height()
            # print(x_height)
            # self.button_list['number'][values].setFixedWidth(160)
            self.label['number'][values] = QLabel(self.button_list['number'][values])
            vv = create_label(values)
            # print(len(values))
            self.label['number'][values].setText(vv)
            self.label['number'][values].setAutoFillBackground(True)
            self.label['number'][values].setStyleSheet("background-color:transparent;")
            font = QFont('Arial')
            font.setPixelSize(16)
            self.label['number'][values].setFont(font)
            # self.label.setReadOnly(True)
            # self.label.setWordWrap(True)
            # self.label.setFixedWidth(140)
            # self.label.setFixedHeight(x_height/2)
            # self.label.setAlignment(Qt.AlignCenter)
               # label->setWordWrap(true);
            self.widget_temp1 = QWidget()
            self.widget_temp1.setStyleSheet("background:#D2D2D2")
            self.widget_temp1.setFixedHeight(20)

            temp_layout1 = QHBoxLayout()
            temp_layout1.setContentsMargins(0,0,10,0) 
            temp_layout1.setAlignment(Qt.AlignRight)

            self.widget_temp1.setLayout(temp_layout1)
            ## These are cross buttons at the top to delete datasource
            self.button['number'][values] = QPushButton("x")
            self.button['number'][values].clicked.connect(lambda state,button=self.button_list['number'][values],label=self.label['number'][values]:self._deleteDatasource(label=label,button=button))

            self.button['number'][values].setStyleSheet("background-color:transparent;padding:0px")
            temp_layout1.addWidget(self.button['number'][values])


            yfont = QFont('Arial')
            yfont.setPixelSize(15)
            # self.button['number'][values].setFont(QFont('Arial', 12,True))
            yfont.setBold(True)
            self.button['number'][values].setFont(yfont)
            # self.button['number'][values].setFixedSize(50,20)
            self.button['number'][values].setFixedHeight(10)
            # self.button['number'][values].setAlignment(Qt.AlignRight)
            layout = QVBoxLayout(self.button_list['number'][values]);
            layout.setContentsMargins(0,0,0,0) 
            # layout.addStretch(1)
            layout.addWidget(self.widget_temp1,0,Qt.AlignTop);
            layout.addWidget(self.label['number'][values],1,Qt.AlignHCenter);
            # layout.addStretch(1)

            font = QFont('Arial')
            font.setPixelSize(16)
            self.button_list['number'][values].setFont(font)
            # self.button_list['number'][values].setFixedWidth(200)
            if(self.label['number'][values].text().replace("\n","")==self.passvalue):
                self.open_selection_screen(label=self.label['number'][values],button=self.button_list['number'][values])
                self.create_graphs_function()

            else:
                self.button_list['number'][values].setStyleSheet('''
            QPushButton
            {  
                padding-top:50px;
                padding-bottom:60px;

                color: black;
                background-color: #DFDFDF;
            }
            QPushButton:hover
            { 
                background: #6e98e0;
                color: white;
                
            }

            ''')
            r = self.button_list['number'][values].hasFocus()
            # print(r)
            # print(self.button_list['number'][values],"dsaasd")
            effect = QGraphicsDropShadowEffect(self.button_list['number'][values])
            effect.setOffset(0, 0)
            effect.setColor(QColor(0,0,0))
            effect.setBlurRadius(10)
            self.button_list['number'][values].setGraphicsEffect(effect)

            self.button_list['number'][values].clicked.connect(lambda state,button=self.button_list['number'][values],label=self.label['number'][values]:self.open_selection_screen(label=label,button=button))
            self.outside_hbox.addWidget(self.button_list['number'][values])
            self.hbox_buttons.addWidget(self.outside_buttons)


            # self.hbox_buttons.addWidget(self.button_list['number'][values])
        
            
            # open_selection_screen(self,text)
            # self.vbox_buttons.addWidget(self.button)

    def create_graphs_function(self):
        if self.store_value != '':
            # emit signal to open datasource window
            self.openSelectionScreen.emit(self.store_value) 
            collect_data('Create Graphs Button','Success',self)          
        else:
            # create a dialogue box showing the message
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            collect_data('Create Graphs Button','No Data Selected',self)
            msg.setText("click on a datasource above")
            msg.setWindowTitle("VizPick")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()
            # show_error_message('click on a datasource above')

    def create_update(self):
        self.hbox = QHBoxLayout()
        self.create_graphs = QPushButton("Use Data Source")
        # self.create_graphs.setVisible(False)
        self.mlayout.setRowStretch(2, 0)
        # self.mlayout.addWidget(self.widget2_2,2,1)
        self.effect = QGraphicsDropShadowEffect(self.create_graphs)
        self.effect.setOffset(0, 0)
        self.effect.setColor(QColor(0,255,0))
        self.effect.setBlurRadius(15)
        
        self.create_graphs.setGraphicsEffect(self.effect)
        self.animation = QPropertyAnimation(self.effect,b'color')
        self.animation.setDuration(1500)

        
        self.animation.setLoopCount(-1)
        self.animation.setStartValue(QColor(100,100,100));
        self.animation.setEndValue(QColor(0,255,0));
        # self.animation.setStartValue(self.button_stop.default_color)
        # self.animation.setEndValue(self.button_stop.default_color)
        # self.animation.setStartValue(0);
        # self.animation.setEndValue(1000);
        self.animation.setEasingCurve(QEasingCurve.InOutCubic);
        # self.animation.setStartValue(QColor(0,255,0))
        # self.animation.setEndValue(QColor(0,200,0))
        self.animation.setKeyValueAt(0.1, QColor(0,255,0))
        self.animation.setKeyValueAt(0.15,QColor(0,200,0))
        self.animation.setKeyValueAt(0.3, QColor(0,215,0))
        self.animation.setKeyValueAt(0.5, QColor(0,225,0))
        self.animation.setKeyValueAt(0.75,QColor(0,245,0))
        self.animation.setKeyValueAt(1,QColor(255,255,255))
        
        self.animation.start()

        self.animation1 = QPropertyAnimation(self.effect,b'blurRadius')
        self.animation1.setDuration(1500)

        
        self.animation1.setLoopCount(-1)
        self.animation1.setStartValue(10);
        self.animation1.setEndValue(30);
        self.animation1.setEasingCurve(QEasingCurve.InOutCubic);
        self.animation1.start()
        
        self.create_graphs.setFixedSize(200, 52)
        
        font = QFont('Arial')
        font.setPixelSize(18)
        font.setLetterSpacing(QFont.PercentageSpacing,120)
        self.create_graphs.setFont(font)
        self.create_graphs.setStyleSheet(
            '''
        QPushButton
        {
            color: white;
            background-color:#05B31C;
            border: 1.5px solid #05B31C;
            padding-top:15px;
            padding-bottom:15px;
            padding-right:10px;
            padding-left:10px;

        }
        QPushButton:hover
        {
            background: #05B31C;
            color: white;
            
        }'''
            
            )

        # self.button_start.clicked.connect(self.animation.start)

        self.create_graphs.clicked.connect(self.create_graphs_function)

        # self.update_data = QPushButton("Update Data")
        # self.update_data.setFixedSize(150, 32)
        # self.update_data.setStyleSheet('''
        # QPushButton
        # {   margin-left:10px;
        #     color: black;
        #     background-color: #DFDFDF;
        # }
        # QPushButton:hover
        # {
        #     background: #6e98e0;
        #     color: white;
            
        # }''')
        self.hbox.addStretch(1)
        self.hbox.addWidget(self.create_graphs)
        # self.hbox.addWidget(self.update_data)
        
        self.widget2_2.setLayout(self.hbox)

    def discover_layout(self):
        self.discover_grid_layout = QGridLayout()
        self.discover_grid_layout.setContentsMargins(0,0,0,0)
        self.discover_grid_layout.setSpacing(0)
        self.widget3.setLayout(self.discover_grid_layout)
        
        # backgorund-color:#EBEBEB
        self.discover_widget1 = QFrame()
        self.discover_widget1.setStyleSheet("background:#EBEBEB")
        self.discover_widget2 = QFrame()
        self.discover_widget2.setStyleSheet("background:#EBEBEB")
        self.discover_widget3 = QFrame()
        self.discover_widget3.setStyleSheet("background:#EBEBEB")

        self.discover_grid_layout.setColumnStretch(0, 1)
        
        self.discover_grid_layout.setRowStretch(0, 1)
        self.discover_grid_layout.setRowStretch(1, 2)
        self.discover_grid_layout.setRowStretch(2, 8)
        ##logout button
        self.discover_grid_layout.addWidget(self.discover_widget1)
        self.discover_grid_layout.addWidget(self.discover_widget2)
        self.discover_grid_layout.addWidget(self.discover_widget3)

        self.logout()
        self.discover()
        check_user = self.is_paid_user()
        if(check_user==False):
            self.upgradeVizPick()

    def is_paid_user(self):
        try:
            sql_query = f'''
                select * from user_info
            '''
            data = run_query(sql_query)
            if(data['package'][0] != "free" and data['package'][0] != "Free"):
                return True
            else:
                return False
        except:
            return False

    def upgradeVizPick(self):
        # pass
        self.hboxupgradevizpick = QVBoxLayout()
        self.hboxupgradevizpick.setAlignment(Qt.AlignLeft)
        self.upgradevizpickbutton = QPushButton("Upgrade VizPick")
        self.upgradevizpickbutton.setStyleSheet('''
        QPushButton
        {
            color:black;
            border:0;

        }
        QPushButton:hover
        {
            color: #4A76FD;
            
        }'''
            )
        self.upgradevizpickbutton.clicked.connect(self.open_url)
        f = QFont('Arial')
        f.setPixelSize(16)
        f.setUnderline(True)
        self.upgradevizpickbutton.setFont(f)
        self.hboxupgradevizpick.addWidget(self.upgradevizpickbutton)
        self.hboxupgradevizpick.addStretch(1)
        self.discover_widget3.setLayout(self.hboxupgradevizpick)

    def loggingout(self):
        from login import Login
        try:
            self.mmainwindow.close()
            logout_user_from_db()

            self.MainWindow = QtWidgets.QWidget()
            # self.label1 = QLabel("sdad",self.MainWindow)
            # self.label1.show()
            self.ui = Login()
            self.MainWindow.setWindowFlags(Qt.WindowCloseButtonHint | Qt.WindowMinimizeButtonHint)
            # self.ui.setupUi(self.MainWindow)
            self.ui.check_session(self.MainWindow,self.screen)

        except Exception as e:
            print(e)
            return False
    
    def logout(self):

        self.hboxlogout = QVBoxLayout()
        self.hboxlogout.setAlignment(Qt.AlignRight)
        self.logoutbutton = QPushButton("Log Out")
        self.logoutbutton.setFixedSize(120, 40)
        self.logoutbutton.setStyleSheet('''
        QPushButton
        {
            color:black;
            background:#DFDFDF;
            border: 1px solid black;

        }
        QPushButton:hover
        {
            color: #4A76FD;
            
        }'''
            )
        self.logoutbutton.clicked.connect(self.loggingout)
        f = QFont('Arial')
        f.setPixelSize(16)
        # f.setUnderline(True)
        self.logoutbutton.setFont(f)
        self.hboxlogout.addWidget(self.logoutbutton)
        self.discover_widget1.setLayout(self.hboxlogout)

    def discover(self):
        self.vbox = QVBoxLayout()
        self.discover_label = QLabel("Video Resources")
        self.discover_label.setStyleSheet('color:#6A6A6A;margin-bottom:8px')
        font = QFont('Arial')
        font.setPixelSize(24)
        self.discover_label.setFont(font)
#u'\u25BC
        self.hbox = QHBoxLayout()
        self.drop_down = QPushButton(u'\u25BC')
        self.drop_down.setFixedSize(30,30)
        font = QFont('Arial')
        font.setPixelSize(16)
        self.drop_down.setFont(font)
        self.drop_down.setStyleSheet('''
background-color:#EBEBEB;border: none;border-style: outset;
border-width: 1px;
border-radius: 15px;
border-color: black;
color: #6A6A6A  
            ''')
        self.drop_down.clicked.connect(self.fun3)

        self.training = QLabel("Training")
        self.training.setStyleSheet("color: #6A6A6A")
        font = QFont('Arial')
        font.setPixelSize(19)
        self.training.setFont(font)
        self.hbox.addWidget(self.drop_down)
        self.hbox.addWidget(self.training)

        self.widget_video = QWidget()
        # self.widget_video.setStyleSheet("background:white")
        self.widget_video.setFixedHeight(250)

        self.vbox2_video = QVBoxLayout()
        self.wvideo1 = QPushButton("Upload Data (1 minute)")
        font = QFont('Arial')
        font.setPixelSize(17)
        self.wvideo1.setFont(font)
        self.wvideo1.setFixedHeight(60)
        self.wvideo1.setStyleSheet('''
            QPushButton{
            padding-left:10px;
            background-color:#EBEBEB;
            border: none;
            border-radius: 4px;
            color: #6A6A6A;
            Text-align:left
            }
            QPushButton:hover{
            background-color:#DADADA;
            color: #6A6A6A;
            }

        ''')
        self.wvideo1.clicked.connect(self.open_url)

        self.wvideo2 = QPushButton("Data Field Selection (2 minutes)")
        font = QFont('Arial')
        font.setPixelSize(17)
        self.wvideo2.setFont(font)
        self.wvideo2.setFixedHeight(60)
        self.wvideo2.setStyleSheet('''
            QPushButton{
            padding-left:10px;
            background-color:#EBEBEB;
            border: none;
            border-radius: 4px;
            color: #6A6A6A;
            Text-align:left
            }
            QPushButton:hover{
            background-color:#DADADA;
            color: #6A6A6A;
            }

        ''')
        self.wvideo2.clicked.connect(self.open_url)

        self.wvideo3 = QPushButton('Exploring Graphs (2 minutes)')
        font = QFont('Arial')
        font.setPixelSize(17)
        self.wvideo3.setFont(font)
        self.wvideo3.setFixedHeight(60)
        self.wvideo3.setStyleSheet('''
            QPushButton{
            padding-left:10px;
            background-color:#EBEBEB;
            border: none;
            border-radius: 4px;
            color: #6A6A6A;
            Text-align:left
            }
            QPushButton:hover{
            background-color:#DADADA;
            color: #6A6A6A;
            }

        ''')
        self.wvideo3.clicked.connect(self.open_url)

        self.wvideo4 = QPushButton('Customizing Graphs (2 minutes)')
        self.wvideo4.setFont(font)
        self.wvideo4.setFixedHeight(60)
        self.wvideo4.setStyleSheet('''
            QPushButton{
            padding-left:10px;
            background-color:#EBEBEB;
            border: none;
            border-radius: 4px;
            color: #6A6A6A;
            Text-align:left
            }
            QPushButton:hover{
            background-color:#DADADA;
            color: #6A6A6A;
            }

        ''')
        self.wvideo4.clicked.connect(self.open_url)

        self.vbox2_video.addWidget(self.wvideo1)
        self.vbox2_video.addWidget(self.wvideo2)
        self.vbox2_video.addWidget(self.wvideo3)
        self.vbox2_video.addWidget(self.wvideo4)
        self.vbox2_video.addStretch(stretch=1)

        self.widget_video.setLayout(self.vbox2_video)
        self.vbox.addWidget(self.discover_label)
        self.vbox.addLayout(self.hbox)
        self.vbox.addWidget(self.widget_video)
        self.vbox.addStretch(1)
        self.discover_widget2.setLayout(self.vbox)
    
    def fun3(self):
        if(self.drop_down.text()==u'\u25BC'):
            font = QFont('Arial')
            font.setPixelSize(21)
            self.drop_down.setFont(font)
            self.drop_down.setText(u'\u25B6')
            self.widget_video.setFixedHeight(0)
        else:
            font = QFont('Arial')
            font.setPixelSize(15)
            self.drop_down.setFont(font)
            self.drop_down.setText(u'\u25BC')
            self.widget_video.setFixedHeight(400)
    
    def load_data_layout(self):
        self.load_data_grid_layout = QGridLayout()
        self.load_data_grid_layout.setContentsMargins(0,0,0,0)
        self.load_data_grid_layout.setSpacing(0)
        self.widget1.setLayout(self.load_data_grid_layout)


        self.load_widget1 = QWidget()
        self.load_widget1.setStyleSheet("background:white")
        self.load_widget11 = QWidget()
        self.load_widget11.setStyleSheet("background:#486DC8")
        self.load_widget2 = QFrame()
        self.load_widget2.setStyleSheet("background:#486DC8")
        self.load_widget3 = QFrame()
        self.load_widget3.setStyleSheet("background:#486DC8")
        self.load_widget4 = QFrame()
        self.load_widget4.setStyleSheet("background:#486DC8")
        self.load_widget5 = QFrame()
        self.load_widget5.setStyleSheet("background:#486DC8")

        self.load_data_grid_layout.setColumnStretch(0, 1)
        # self.load_data_grid_layout.setColumnStretch(1, 6)

        self.load_data_grid_layout.setRowStretch(0, 1)
        self.load_data_grid_layout.setRowStretch(1, 2)
        self.load_data_grid_layout.setRowStretch(2, 5)
        self.load_data_grid_layout.setRowStretch(3, 5)
        self.load_data_grid_layout.setRowStretch(4, 5)
        self.load_data_grid_layout.setRowStretch(5, 10)
        
        
        self.load_data_grid_layout.addWidget(self.load_widget1)
        self.load_data_grid_layout.addWidget(self.load_widget11)
        self.load_data_grid_layout.addWidget(self.load_widget2)
        self.load_data_grid_layout.addWidget(self.load_widget3)
        self.load_data_grid_layout.addWidget(self.load_widget4)
        self.load_data_grid_layout.addWidget(self.load_widget5)
        

        self.logo_place()
        self.search_for_data()
        self.to_a_file()
        self.to_a_server()
        # pass
    def logo_place(self):

        self.hbox = QHBoxLayout()
        self.logo = QLabel()
        self.logo.setPixmap(QPixmap(BASE_DIR + '/system/logo3.png'))
        # self.logo.setFixedSize(30,30)
        self.hbox.addWidget(self.logo)
        self.load_widget1.setLayout(self.hbox)
    def search_for_data(self):

        self.vbox = QVBoxLayout()
        # self.vbox.setAlignment(Qt.AlignCenter)
        self.connect_label = QLabel("Connect")
        self.connect_label.setStyleSheet('color:white;')
        font = QFont('Arial')
        font.setPixelSize(22)
        self.connect_label.setFont(font)
        # font = QFont()
        # font.setPointSize(18)
        # self.connect_label.setFont(font)
        self.search_for_data = QLabel("To A DataSource")
        self.search_for_data.setStyleSheet('color:#DCDCDC;')
        font = QFont('Arial')
        font.setPixelSize(17)
        self.search_for_data.setFont(font)
        # self.search_for_data.setFont(font)
        self.vizpick_server = QLabel("")
        self.vizpick_server.setStyleSheet('color:white;margin-left:8px')
        font = QFont('Arial')
        font.setPixelSize(15)
        self.vizpick_server.setFont(font)

        
        self.vbox.addWidget(self.connect_label)
        self.vbox.addWidget(self.search_for_data)
        self.vbox.addWidget(self.vizpick_server)
        self.vbox.addStretch(1)
        self.load_widget2.setLayout(self.vbox)

        # pass

    def to_a_file(self):

        self.vbox = QVBoxLayout()
        self.vbox.setAlignment(Qt.AlignTop)
        self.to_a_file = QLabel("To a File")
        self.to_a_file.setStyleSheet('color:#DCDCDC;margin-bottom:4px')
        font = QFont('Arial')
        font.setPixelSize(17)
        self.to_a_file.setFont(font)

        self.m_excel = QPushButton("Microsoft Excel")
        self.m_excel.clicked.connect(self.load_data_from_excel)
        self.m_excel.setStyleSheet('''
        QPushButton
        {
            color:white;padding-left:10px;border:0;Text-align:left;
            padding-top:10px;
            padding-bottom:10px;
        }
        QPushButton:hover
        {
            background: #6e98e0;
            color: white;
            
        }'''
        )
        font = QFont('Arial')
        font.setPixelSize(15)
        self.m_excel.setFont(font)
        
        self.csv_file = QPushButton("CSV File")
        self.csv_file.setStyleSheet('''
        QPushButton
        {
            color:white;padding-left:10px;border:0;Text-align:left;
            padding-top:10px;
            padding-bottom:10px;
        }
        QPushButton:hover
        {
            background: #6e98e0;
            color: white;
            
        }'''
        )
        self.csv_file.setFont(font)
        self.csv_file.clicked.connect(self.load_data_from_csv)
        
        #self.txt_file = QPushButton("Text File")
        #self.txt_file.clicked.connect(self.load_data_from_text)
        #self.txt_file.setStyleSheet('''
        #QPushButton
        #{
        #    color:white;padding-left:10px;border:0;Text-align:left;
        #    padding-top:10px;
        #    padding-bottom:10px;
        #}
        #QPushButton:hover
        #{
        #    background: #6e98e0;
        #    color: white;
            
        #}'''
        #)
        #self.txt_file.setFont(font)

        self.vbox.addWidget(self.to_a_file)
        self.vbox.addWidget(self.m_excel)
        self.vbox.addWidget(self.csv_file)
        #self.vbox.addWidget(self.txt_file)
        self.vbox.addStretch(1)
        self.load_widget3.setLayout(self.vbox)

    # This opens url when clicks on upgrade
    def open_url(self):
        import webbrowser
        webbrowser.open('https://vizpick.com/videos/')
    def open_pricing(self):
        import webbrowser
        webbrowser.open('https://vizpick.com/pricing/')

    def to_a_server(self):

        self.vbox = QVBoxLayout()
        
        self.to_a_server = QLabel("To a Database")
        self.to_a_server.setStyleSheet('color:#DCDCDC;margin-bottom:4px')
        font = QFont('Arial')
        font.setPixelSize(17)
        self.to_a_server.setFont(font)

        self.upgrade = QPushButton("Upgrade")
        self.upgrade.setStyleSheet('''
        QPushButton
        {
            margin-bottom:4px;border:0;padding:0;border:0;Text-align:left;
            padding-top:10px;
            padding-bottom:10px;
            padding-left:10px;
            color:white;

        }
        QPushButton:hover
        {
            background: #6e98e0;
            color: white;
            
        }''''')
        font = QFont('Arial')
        font.setPixelSize(15)
        self.upgrade.setFont(font)
        self.upgrade.clicked.connect(self.open_pricing)
        
        self.vbox.addWidget(self.to_a_server)
        self.vbox.addWidget(self.upgrade)
        self.vbox.addStretch(1)
        self.load_widget4.setLayout(self.vbox)

    def main_top(self):
        self.vbox = QVBoxLayout()
        self.vbox.setAlignment(Qt.AlignCenter)
        self.c_d_s = QLabel("Current Data Sources")
        self.c_d_s.setStyleSheet('color:black')
        font = QFont('Arial')
        font.setPixelSize(24)
        self.c_d_s.setFont(font)
        
        # self.vbox.addStretch(1)
        self.vbox.addWidget(self.c_d_s)
        # self.vbox.addStretch(1)
        self.widget2.setLayout(self.vbox)



    def open_selection_screen(self,label,button):
        '''
            This function opens the data selection field and pass the dataset name to 
            the other screen
        '''
        # print(self.button_list['number'])

        for items,values in self.button_list['number'].items():
            # print(values)

            values.setStyleSheet('''
            QPushButton
            {  
                padding-top:50px;
                padding-bottom:60px;

                color: black;
                background-color: #DFDFDF;
            }
            QPushButton:hover
            { 
                background: #6e98e0;
                color: white;
                
            }

            ''')
        # print(text,"texting")
        # get the dataset name form the dropdown menu 
        db_name = str(label.text())
        db_name = db_name.lower().replace("\n","")
        self.store_value = db_name
        
        # self.create_graphs.setStyleSheet(
        #     '''
        # QPushButton
        # {
        #     color: white;
        #     background-color:#327EFF;
        #     border: 1.5px solid #327EFF;

        # }
        # QPushButton:hover
        # {
        #     background: #6e98e0;
        #     color: white;
            
        # }'''
            
        #     )
        button.setStyleSheet('''
            QPushButton
            {  
                padding-top:50px;
                padding-bottom:60px;
                background: #6e98e0;
                color: white;

            }
            QPushButton:hover
            { 
                background: #6e98e0;
                color: white;
                
            }
            ''')
        # limit 10;
#         self.columnsName = ''
# self.columnsName +=" , " 
# sql_query = f'''select {self.columnsName} from "{self.db_name}" limit 10;'''
        # from helper import run_query
        # sql_query = f'''select * from meta_data where dbname = "{db_name}"'''
        # data = run_query(sql_query)
        # print(data,"data")
        # print(data['field'])
        # for i in data['field']:
        #     print(i)
        # # for items,values in data.items():
        # #     print(values["field"])
        #     # print(data[""])
        # self.columnsName = ''
        # iterator = 1
        # for i in (data['field']):
        #     self.columnsName += i
        #     if(iterator<len(data['field'])):
        #         self.columnsName +=" , "
        #         iterator += 1 

        # print(self.columnsName)
            # if((fields.index(i)+1)!=len(fields)):
                # self.columnsName +=" , " 

        sql_query = f'''select * from "{db_name}" limit 20;'''
        # sql_query = f'''select {self.columnsName} from "{db_name}" limit 20;'''
        
        #run query and save the result in data
        from helper import run_query
        data = run_query(sql_query)
        # print(data)

        # self.mlayout.removeWidget(self.widget2_3)
        # self.widget2_3.deleteLater()
        self.create_graphs.setVisible(True)
        self.mlayout.setRowStretch(2, 1)
        sip.delete(self.widget2_3)
        self.widget2_3 = QWidget()
        self.widget2_3.setStyleSheet("background:#F8F8F8")
        self.widget2_3.setVisible(True)
        self.mlayout.addWidget(self.widget2_3,3,1)
        ## this is the table when data source is selected
        self.already_selected = True
        self.ui = Ui_Select1(data,self.comboBox,self.get_all_database,self.widget2_1,self.mlayout,self.show_databases_clicked1,self.create_graphs_function,db_name)
        self.ui.setupUi(self.widget2_3)
        self.ui.fill_table()

        ### This is for opening the new tab in new page
        # #see if the database is properly selected
        # if db_name != 'Chooose ...':
        #     # emit signal to open datasource window
        #     self.openSelectionScreen.emit(db_name)           
        # else:
        #     # create a dialogue box showing the message
        #     show_error_message('Please select a datasource or add a new datasource')

    def load_text_file(self,seperator,fileName):
        use_seperator=seperator
        if use_seperator=='space':
            use_seperator='\t'
        else:
             use_seperator=use_seperator
        try:
            print('#tryingtoseperate')
            data = pd.read_csv(fileName, sep=use_seperator)
            print('#sererated')
            data = data.replace(np.nan, '', regex=True)
        except Exception as e:
            print('seperationerror')
            print(e)
            show_error_message('Error on seperator please select a seperator according to your text file.')

    def load_data_from_text(self):
        '''
            This function is reponsible to load file dialogue 
            and import csv file path
        '''
        # these lines opens the dialogue to select the csv file
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        #fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None,"QFileDialog.getOpenFileName()", "","Text Files (*.txt)", options=options)
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None,"VizPick", "","Text Files (*.txt)", options=options)
        ##check if file name is not NOne then open in pandas
        if fileName:
            limiter = [';','space',',']
            self.Select = QtWidgets.QMainWindow()
            self.ui = PopupFile(limiter,'Select a delimiter',self.load_text_file,fileName)
            self.ui.setupUi(self.Select)
            self.Select.show()


    def load_data_from_csv(self):
        '''
            This function is reponsible to load file dialogue 
            and import csv file path
        '''
        # these lines opens the dialogue to select the csv file
        collect_data('Load Data','CSV',self)
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None,"VizPick", "","CSV Files (*.csv)", options=options)
        ##check if file name is not NOne then open in pandas
        if fileName:
            print(fileName)
            self.file_ = fileName.split('/')
            self.file_ = self.file_[len(self.file_)-1].split('.')[0]
            try:
                data = pd.read_csv(fileName)
            except:
                try:
                    data = pd.read_csv(fileName, encoding = "utf-8")
                except:
                    data = pd.read_csv(fileName, encoding = "ISO-8859-1")#
            data = data.replace(np.nan, '', regex=True)
            self.load_data_screen(data)

    def load_excel(self,sheet,fileName):
        excel_data = pd.ExcelFile(fileName)
        data = excel_data.parse(sheet)
        print('###############GEEGE')
        print(type(data))
        data = data.replace(np.nan, '', regex=True)
        self.load_data_screen(data)

    def load_data_from_excel(self):
        '''
            This function is reponsible to load file dialogue 
            and import csv file path
        '''
        # these lines opens the dialogue to select the csv file
        collect_data('Load Data','Excel',self)
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None,"VizPick", "","Micrsoft Excel Files (*.xlsx *.xls)", options=options)
        ##check if file name is not NOne then open in pandas
        if fileName:
            self.file_ = fileName.split('/')
            self.file_ = self.file_[len(self.file_)-1].split('.')[0]
            excel_data = pd.ExcelFile(fileName)
            sheets =  excel_data.sheet_names
            self.Select = QtWidgets.QMainWindow()
            self.ui = PopupFile(sheets,'Select a sheet',self.load_excel,fileName)
            self.ui.setupUi(self.Select)
            self.Select.show()
        

    
    def load_data_screen(self,data):
        ''' 
            Open the load data screen
        '''
        # layout.removeWidget(child)
        # self.Select = QWidget()
        
        # self.temp = QWidget(self.widget2_3)
        # self.temp_vbox = QVBoxLayout()
        # self.temp_vbox.addWidget(self.temp)
        # self.widget2_3.setLayout(self.temp_vbox)
        self.create_graphs.setVisible(False)
        self.mlayout.setRowStretch(2, 0)
        sip.delete(self.widget2_3)
        self.widget2_3 = QWidget()
        self.widget2_3.setStyleSheet("background:#F8F8F8")
        self.widget2_3.setVisible(True)
        self.mlayout.addWidget(self.widget2_3,3,1)
        self.ui = Ui_Select(data,self.comboBox,self.get_all_database,self.widget2_1,self.mlayout,self.show_databases_clicked1,self.create_graphs_function,self.already_selected)
        self.ui.setupUi(self.widget2_3,self.file_)
        self.ui.fill_table()
        
        # self.Select.show()  
    

    def get_all_database(self):

        '''
            This function is repsonsible for getting all the databases
            and fill the dropdown menu
        '''
        # query to bring all the table from database
        self.temp_list = []
        sql_query = "SELECT name FROM sqlite_master WHERE type='table';"
        # run query from the function imported from helper function
        self.data = run_query(sql_query)
        # check if the table is empty than hide the next button
        # if data.empty:
        #     self.pushButton.hide()
        # else:
        #     self.pushButton.show()
        #setting text in dropdown
        # available_list = [self.comboBox.itemText(i) for i in range(self.comboBox.count())]
        #remove the meta data table from the data
        self.data = self.data[self.data['name'] != 'meta_data']
        self.data = self.data[self.data['name'] != 'Graph_Types_List']
        self.data = self.data[self.data['name'] != 'customizations_table']
        self.data = self.data[self.data['name'] != 'graph_category']
        self.data = self.data[self.data['name'] != 'customization_options']
        self.data = self.data[self.data['name'] != 'customization_order']
        self.data = self.data[self.data['name'] != 'date_dimension']
        self.data = self.data[self.data['name'] != 'function_customization']
        self.data = self.data[self.data['name'] != 'user_info']
        self.data = self.data[self.data['name'] != 'data_collection']
        # set the data in dropdown
        for i in self.data['name'].values:
            # if i not in available_list:
                # print(i,"this is printed")
                
                ## user_info should not be show on table
                if(i!="user_info"):
                    self.temp_list.append(i)
                    self.comboBox.addItem(i)
        self.temp_list.sort()
        self.load_function_excel()
        
    def load_function_excel(self):
        try:
            #data = pd.read_excel(BASE_DIR + '/system/function.xlsx')
            #data.to_sql('Graph_Types_List',engine,if_exists='replace')
            #data = pd.read_excel(BASE_DIR +'/system/customizations_table.xlsx')
            #data.to_sql('customizations_table',engine,if_exists='replace')
            #data = pd.read_excel(BASE_DIR +'/system/graph_category.xlsx')
            #data.to_sql('graph_category',engine,if_exists='replace')
            #data = pd.read_excel(BASE_DIR +'/system/customization_options.xlsx')
            #data.to_sql('customization_options',engine,if_exists='replace')
            #data = pd.read_excel(BASE_DIR +'/system/customization_order.xlsx')
            #data.to_sql('customization_order',engine,if_exists='replace')
            #data = pd.read_excel(BASE_DIR +'/system/date_dimension.xlsx')
            #data.to_sql('date_dimension',engine,if_exists='replace')
            #data = pd.read_excel(BASE_DIR +'/system/function_customization.xlsx')
            #data.to_sql('function_customization',engine,if_exists='replace')
            #1=1
            print(data)
        except Exception as e:
            print(e)
            #show_error_message('System file is missing or deleted please reinstall the software. The software will not work correctly')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = WelcomePage()
    sys.exit(app.exec_())
# class WelcomePage(QWidget):
#     openSelectionScreen = pyqtSignal(str)
#     def setupUi(self, MainWindow):
#         # set the object name 
#         self.main_window = MainWindow
#         MainWindow.setObjectName("MainWindow")
#         # accessible name 
#         MainWindow.setAccessibleName("")
#         # automatically fill if there is a color set
#         MainWindow.setAutoFillBackground(True)
#         # creaea  centeal widget 
#         self.centralwidget = MainWindow#QtWidgets.QWidget(MainWindow)
#         # set the object name
#         self.centralwidget.setObjectName("centralwidget")
#         # create a tab widget 
#         # self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
#         # set the position of tab widget
#         # self.tabWidget.setGeometry(QtCore.QRect(0, 0, 641, 441))
#         # set the object name
#         # self.tabWidget.setObjectName("tabWidget")
#         # create a tab 
#         # self.tab = QtWidgets.QWidget()
#         # access name 
#         # self.tab.setAccessibleName("")
#         # set the object name of tab
#         # self.tab.setObjectName("tab")
#         # create a push button widget
#         self.pushButton = QtWidgets.QPushButton(self.centralwidget)
#         # set the position of the button
#         self.pushButton.setGeometry(QtCore.QRect(20, 350, 111, 31))
#         # set the object name of the button
#         self.pushButton.setObjectName("pushButton")
#         # set the event of the button when pressed
#         self.pushButton.clicked.connect(self.open_selection_screen)
#         # create a label widget
#         self.label = QtWidgets.QLabel(self.centralwidget)
#         # set the position of the label 
#         self.label.setGeometry(QtCore.QRect(210, 20, 221, 41))
#         # create a font object
#         font = QtGui.QFont()
#         # set the font size
#         font.setPointSize(19)
#         #set the font in the label
#         self.label.setFont(font)
#         #set the object name
#         self.label.setObjectName("label")
#         # create a 2nd button and same process as button1
#         self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
#         self.pushButton_2.setGeometry(QtCore.QRect(510, 350, 111, 31))
#         self.pushButton_2.setObjectName("pushButton_2")
#         self.pushButton_2.clicked.connect(self.load_data_from_csv)
#         # create a dropdown as combobox
#         self.comboBox = QtWidgets.QComboBox(self.centralwidget)
#         # set the position of the 
#         self.comboBox.setGeometry(QtCore.QRect(220, 190, 181, 31))
#         # set the object name
#         self.comboBox.setObjectName("comboBox")
#         # add an item in the dropdown
#         self.comboBox.addItem('Chooose ...')
#         # add the default option in dropdown
#         self.comboBox.setCurrentText('Chooose ...')
#         # add a tab in the tab widget
#         # self.tabWidget.addTab(self.tab, "")
#         # add central widget in the main window
#         self.vbox = QtWidgets.QVBoxLayout()
#         MainWindow.setLayout(self.vbox)
#         self.vbox.addWidget(self.centralwidget)
#         # read functions
#         self.load_function_excel()
#         self.retranslateUi(MainWindow)
#         # self.tabWidget.setCurrentIndex(0)
#         QtCore.QMetaObject.connectSlotsByName(MainWindow)
#         self.get_all_database()

#     def get_all_database(self):
#         '''
#             This function is repsonsible for getting all the databases
#             and fill the dropdown menu
#         '''
#         # query to bring all the table from database
#         sql_query = "SELECT name FROM sqlite_master WHERE type='table';"
#         # run query from the function imported from helper function
#         data = run_query(sql_query)
#         # check if the table is empty than hide the next button
#         if data.empty:
#             self.pushButton.hide()
#         else:
#             self.pushButton.show()
#             #setting text in dropdown
#             available_list = [self.comboBox.itemText(i) for i in range(self.comboBox.count())]
#             #remove the meta data table from the data
#             data = data[data['name'] != 'meta_data']
#             data = data[data['name'] != 'Graph_Types_List']
#             data = data[data['name'] != 'customizations_table']
#             data = data[data['name'] != 'graph_category']
#             data = data[data['name'] != 'customization_options']
#             data = data[data['name'] != 'customization_order']
#             data = data[data['name'] != 'date_dimension']
#             data = data[data['name'] != 'function_customization']
#             # set the data in dropdown
#             for i in data['name'].values:
#                 if i not in available_list:
#                     self.comboBox.addItem(i)

#     def load_data_from_csv(self):
#         '''
#             This function is reponsible to load file dialogue 
#             and import csv file path
#         '''
#         # these lines opens the dialogue to select the csv file
#         options = QtWidgets.QFileDialog.Options()
#         options |= QtWidgets.QFileDialog.DontUseNativeDialog
#         fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None,"QFileDialog.getOpenFileName()", "","CSV Files (*.csv)", options=options)
#         ##check if file name is not NOne then open in pandas
#         if fileName:
#             data = pd.read_csv(fileName)
#             print(data)
#             # send the data on the function
#             self.load_data_screen(data)     
    
#     def open_selection_screen(self):
#         '''
#             This function opens the data selection field and pass the dataset name to 
#             the other screen
#         '''
#         # get the dataset name form the dropdown menu 
#         db_name = str(self.comboBox.currentText())
#         #see if the database is properly selected
#         if db_name != 'Chooose ...':
#             # emit signal to open datasource window
#             self.openSelectionScreen.emit(db_name)           
#         else:
#             # create a dialogue box showing the message
#             show_error_message('Please select a datasource or add a new datasource')

#     def load_data_screen(self,data):
#         ''' 
#             Open the load data screen
#         '''
#         self.Select = QtWidgets.QMainWindow()
#         self.ui = Ui_Select(data,self.comboBox,self.get_all_database)
#         self.ui.setupUi(self.Select)
#         self.ui.fill_table()
#         self.Select.show()
    
#     def load_function_excel(self):
#         try:
#             data = pd.read_excel('system/function.xlsx')
#             data.to_sql('Graph_Types_List',engine,if_exists='replace')
#             data = pd.read_excel('system/customizations_table.xlsx')
#             data.to_sql('customizations_table',engine,if_exists='replace')
#             data = pd.read_excel('system/graph_category.xlsx')
#             data.to_sql('graph_category',engine,if_exists='replace')
#             data = pd.read_excel('system/customization_options.xlsx')
#             data.to_sql('customization_options',engine,if_exists='replace')
#             data = pd.read_excel('system/customization_order.xlsx')
#             data.to_sql('customization_order',engine,if_exists='replace')
#             data = pd.read_excel('system/date_dimension.xlsx')
#             data.to_sql('date_dimension',engine,if_exists='replace')
#             data = pd.read_excel('system/function_customization.xlsx')
#             data.to_sql('function_customization',engine,if_exists='replace')
#             print(data)
#         except Exception as e:
#             print(e)
#             show_error_message('System file is missing or deleted please reinstall the software. The software will not work correctly')

#     def retranslateUi(self, MainWindow):
#         '''
#             this function only sets the title of the window and widgets
#         '''
#         _translate = QtCore.QCoreApplication.translate
#         # MainWindow.setWindowTitle(_translate("MainWindow", "Make Data Graphs"))
#         self.pushButton.setText(_translate("MainWindow", "Next"))
#         self.label.setText(_translate("MainWindow", "Select Datasource"))
#         self.pushButton_2.setText(_translate("MainWindow", "Load Data"))
#         # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Data Sources"))


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QWidget()
#     ui = WelcomePage()
#     ui.setupUi(MainWindow)
#     ui.get_all_database()
#     MainWindow.show()
#     sys.exit(app.exec_())
