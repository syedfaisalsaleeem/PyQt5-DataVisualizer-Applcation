# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from helper import where_function,ExtendedTextBox,BoxStyle,collect_data,run_query,platform,home, show_error_message
from super_graph import ClickLabel
from helper import MySplashScreen
import os
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from TopBar import TopLearningSection
BoxStyle._style_list["ext"] = ExtendedTextBox

font = QFont('Arial')
font.setPixelSize(23)




class GraphWidget(object):
    def __init__(self,parent_window,db_name,splash,sql_data,customization,text,key,graph_func,sql_func,kind,fields,
                selected_character,selected_dates,selected_number,
                range_character,range_number,range_date,
                customization_option,update_func,customization_features,
                customization_functions):
        
        super().__init__()
        self.label_text = text
        self.key = key
        self.graph_func = graph_func
        self.sql_func = sql_func
        self.customization = customization
        self.kind = kind
        self.fields = fields
        self.selection_characters = selected_character
        self.selection_dates = selected_dates
        self.selection_numbers = selected_number
        self.range_character = range_character
        self.range_number = range_number
        self.range_date = range_date
        self.options = customization_option
        self.update_func = update_func
        self.inner_customization = {}
        self.lbl = {}
        self.customization_features = customization_features
        self.customization_functions = customization_functions
        self.sql_data = sql_data
        self.t1=False
        self.check=0
        self.check1=0
        self.splash = splash
        self.db_name = db_name
        self.paid_color = False
        self.parent_window = parent_window
        

    def setupUi(self, MainWindow):
        self.main_window = MainWindow
        self.main_window.resize(1258, 902)
        # self.main_window.showMaximized() 
        self.main_window.setStyleSheet("background:white")
        self.centralwidget = QtWidgets.QWidget(self.main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("background:white")
        self.centralwidget.resize(1200, 902)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        self.scrollArea.setStyleSheet("QScrollArea {background: #555}\n" 
        "QFrame {background: #fff}\n"
        "QPushButton {background:#85bb65}\n"
        "QPushButton {color:#fff}") 
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget(self.centralwidget)
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 0, 725))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.frame = QtWidgets.QWidget(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(40, 40, 1024, 800))
        self.frame.setStyleSheet("background:white")
        # self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.scrollArea.setWidget(self.frame)
        self.label = QtWidgets.QLabel(self.frame)
        # self.label.setGeometry(QtCore.QRect(450, 20, 500, 100))
        # self.label.setFixedSize(500, 100)
        self.label.setObjectName("label")
        self.label.setText(self.label_text)
        self.label.setStyleSheet("padding-bottom:30px")
        self.label.setFont(font)
        self.label.show()
        # self.button=QPushButton(self.centralwidget)
        # self.button.setText("1234")

        self.layout_scrollarea_h1=QHBoxLayout()
        self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)


        self.layout_scrollarea_h3=QHBoxLayout()
        self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)

        self.layout_scrollarea_h2=QHBoxLayout()
        self.layout_scrollarea_h2.setAlignment(Qt.AlignTop)
        self.layout_scrollarea_h0=QHBoxLayout()
        self.layout_scrollarea_h0.setAlignment(Qt.AlignTop)
        self.layout_scrollarea_v=QVBoxLayout(self.frame)
        # self.layout_scrollarea_v.SetMaximumSize(200,200)
        # self.layout_scrollarea_v.setContentsMargins(0)
        self.layout_scrollarea_v.setAlignment(Qt.AlignTop)
        # self.layout_scrollarea_v.setSpacing(-1)
        # self.layout_scrollarea_v.setContentsMargins(0, 0, 0, 0)
        # self.layout_scrollarea_v.addStretch(0)
        self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h0)
        self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
        self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
        self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h2)


        self.hbox = QHBoxLayout()
        self.hbox1 = QHBoxLayout()
        self.hbox1.setAlignment(Qt.AlignCenter)
        # self.hbox1.addStretch(1)
        self.hbox1.addWidget(self.label)
        # self.hbox1.addStretch(1)
        self.vbox = QVBoxLayout()
        self.temp_x = TopLearningSection()
        self.temp_x.setup(self.vbox)
        # vbox.addStretch(1)
        # self.vbox.addWidget(self.scrollAreaWidgetContents)
        # self.vbox.addWidget(self.scrollArea)
        # self.vbox.addWidget()
        # self.vbox.addStretch(1)
        # self.vbox.addWidget(self.button)

        self.vbox.addLayout(self.hbox1)
        # self.vbox.addStretch(1)
        self.vbox.addLayout(self.hbox)
        self.main_window.setLayout(self.vbox)

        # MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def update_gradient_paid_color(self):
        
        # print(self.customization)
        paid_color_list = [
            'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r',
             'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys',
              'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 
              'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r',
               'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy',
                'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1',
                 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn',
                  'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn',
                   'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r',
                    'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r',
                     'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r',
                      'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 
                      'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'inferno', 'inferno_r', 'jet', 'jet_r',
                       'magma', 'magma_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r',
                        'prism', 'prism_r', 'rainbow', 'rainbow_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10',
                         'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r',
                          'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'winter', 'winter_r'
        ]
        parameter = self.sql_func(self.sql_data,customizations=self.customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        
        self.widgettext = QWidget()
        self.widgettext.setFixedSize(560,60)
            # self.widget1.setMinimumWidth(100)
        self.widgettext.setStyleSheet("background:white")

        self.combo = QtWidgets.QComboBox(self.widgettext)
        self.combo.addItem("Choose ...")
        self.combo.addItems(paid_color_list)
        self.combo.setFixedSize(500,31)
        # self.textEdit.setGeometry(QtCore.QRect(200, 130, 611, 31))
        self.combo.setObjectName("textEdit")

        self.htext=QHBoxLayout()
        # self.object = QLabel("",self.widget1)
        self.htext.addStretch(stretch =1)
        self.htext.addWidget(self.combo)
        self.htext.addStretch(stretch =1)
        self.widgettext.setLayout(self.htext)
        
        self.widget0_1=QWidget()
        self.widget0_1.setFixedSize(350,60)
            # self.widget1.setMinimumWidth(100)
        self.widget0_1.setStyleSheet("background:white")
        
        self.go_btn = QtWidgets.QPushButton(self.widget0_1)
        # self.go_btn.setGeometry(QtCore.QRect(830,130, 175, 31))
        self.go_btn.setText("Show me")
        self.go_btn.setFixedSize(205, 31)
        f = QFont('Arial')
        f.setPixelSize(14)
        self.go_btn.setFont(f)

        self.go_btn.setStyleSheet(
        '''QPushButton
        {
            border-radius: 5px;
            color: black;
            background-color: #DFDFDF;
          
        }
        QPushButton:hover
        {
            background: #6e98e0;
            color: white;
            
        }''')
        self.go_btn.clicked.connect(lambda:self.apply_gradient_paid_color(self.combo))
        
        self.h0=QHBoxLayout()
        # self.object = QLabel("",self.widget1)
        # self.h0.addStretch(stretch =1)
        self.h0.addWidget(self.go_btn)
        self.h0.addStretch(stretch =1)
        self.widget0_1.setLayout(self.h0)

        self.layout_scrollarea_h0.addStretch(stretch =1)
        self.layout_scrollarea_h0.addWidget(self.widgettext)
        # self.layout_scrollarea_h0.addStretch(stretch =1)
        self.layout_scrollarea_h0.addWidget(self.widget0_1)
        self.layout_scrollarea_h0.addStretch(stretch =1)

        self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])
        self.generate_buttons(700)
        #self.layout_scrollarea_v.addStretch(1)
        self.vbox.addWidget(self.scrollArea)
        self.splash.close()
        self.color_counter = 0

    def generate_date_format(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            date_dict = {}
            date_dict['Exact Date'] =  ['short date','date','median date','long date']
            date_dict['Week'] = ['week','short date','date']
            date_dict['Month'] = ['month', 'month day', 'short date', 'date']
            date_dict['Quater'] = ['year', 'short date', 'date']
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            for value in date_dict[self.fields['date_level'][0]]:
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QFrame()
                self.widget1.setFrameShape(QFrame.NoFrame)
                self.widget1.setLineWidth(0)
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(value)
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QFrame()
                self.widget3.setFrameShape(QFrame.NoFrame)
                self.widget3.setLineWidth(0)
                if(None==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText('')



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                self.inner_customization[key_counter] = value
                customization = self.customization.copy()
                customization[self.key] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            self.vbox.addWidget(self.scrollArea)
            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')


    def apply_gradient_paid_color(self,combo):
        
        color = combo.currentText()
        self.inner_customization[0] = color
        customization = self.customization.copy()
        customization[self.key] = self.inner_customization[0]
        parameter = self.sql_func(self.sql_data,customizations=customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        self.check=2
        self.widget4.hide()
        self.generate_customize_graphs(0,300,100,ax1,fig)
        self.paid_color = True

    def showColorDialog(self,event,frame):
        col = QColorDialog.getColor()

        if col.isValid():
            frame.setStyleSheet('QWidget { background-color: %s }' % col.name())

    def apply_above_color_paid_color(self):
        ab_color = self.frame1.palette().color(QtGui.QPalette.Base).name() + ',' + self.frame2.palette().color(QtGui.QPalette.Base).name()
        print(ab_color)
        self.inner_customization[0] = ab_color
        colors = self.inner_customization[0].split(',')
        customization = self.customization.copy()
        customization['above_color'] = colors[0].replace(' ','')
        customization['below_color'] = colors[1].replace(' ','')
        parameter = self.sql_func(self.sql_data,customizations=customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        self.check=2
        self.widget4.hide()
        self.generate_customize_graphs(0,300,100,ax1,fig)
        self.paid_color = True

    def apply_single_paid_color(self):
        ab_color = self.frame1.palette().color(QtGui.QPalette.Base).name()
        self.inner_customization[0] = ab_color
        customization = self.customization.copy()
        customization['single_color'] = ab_color
        parameter = self.sql_func(self.sql_data,customizations=customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        self.check=2
        self.widget4.hide()
        self.generate_customize_graphs(0,300,100,ax1,fig)
        self.paid_color = True


    def update_single_paid_color(self):
        try:
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            
            self.widgettext = QWidget()
            self.widgettext.setFixedSize(560,60)
                # self.widget1.setMinimumWidth(100)
            self.widgettext.setStyleSheet("background:white")

            self.frame1 = QtWidgets.QFrame(self.widgettext)
            self.frame1.setFixedSize(200,150)
            self.frame1.setStyleSheet("border: 4px solid #4F98FE;background-color:{}".format(parameter['single_color']))
            self.frame1.mousePressEvent = lambda event,frame=self.frame1:self.showColorDialog(event,frame)
            self.htext=QHBoxLayout()
            
            # self.object = QLabel("",self.widget1)
            self.htext.addStretch(stretch =1)
            self.htext.addWidget(self.frame1)
            self.htext.addStretch(stretch =1)
            self.widgettext.setLayout(self.htext)
            
            self.widget0_1=QWidget()
            self.widget0_1.setFixedSize(350,60)
                # self.widget1.setMinimumWidth(100)
            self.widget0_1.setStyleSheet("background:white")
            
            self.go_btn = QtWidgets.QPushButton(self.widget0_1)
            # self.go_btn.setGeometry(QtCore.QRect(830,130, 175, 31))
            self.go_btn.setText("Show me")
            self.go_btn.setFixedSize(205, 31)
            f = QFont('Arial')
            f.setPixelSize(14)
            self.go_btn.setFont(f)
            self.go_btn.setStyleSheet(
            '''QPushButton
            {
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
              
            }
            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }''')
            self.go_btn.clicked.connect(self.apply_single_paid_color)
            
            self.h0=QHBoxLayout()
            # self.object = QLabel("",self.widget1)
            # self.h0.addStretch(stretch =1)
            self.h0.addWidget(self.go_btn)
            self.h0.addStretch(stretch =1)
            self.widget0_1.setLayout(self.h0)

            self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widgettext)
            # self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widget0_1)
            self.layout_scrollarea_h0.addStretch(stretch =1)

            self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])
            self.generate_buttons(700)
            self.vbox.addWidget(self.scrollArea)
            self.splash.close()
            self.color_counter = 1
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')

    def update_above_color_paid_color(self):
        try:
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            
            self.widgettext = QWidget()
            self.widgettext.setFixedSize(560,60)
            self.widgettext.setStyleSheet("background:white")

            self.frame1 = QtWidgets.QFrame(self.widgettext)
            self.frame1.setFixedSize(200,150)
            self.frame1.setStyleSheet("border: 4px solid #4F98FE;background-color:{}".format(parameter['above_color']))
            self.frame1.mousePressEvent = lambda event,frame=self.frame1:self.showColorDialog(event,frame)
            self.frame2 = QtWidgets.QFrame(self.widgettext)
            self.frame2.setFixedSize(200,150)
            self.frame2.setStyleSheet("border: 4px solid #4F98FE;background-color:{}".format(parameter['below_color']))
            self.frame2.mousePressEvent = lambda event,frame=self.frame2:self.showColorDialog(event,frame)
            self.htext=QHBoxLayout()
            
            # self.object = QLabel("",self.widget1)
            self.htext.addStretch(stretch =1)
            self.htext.addWidget(self.frame1)
            self.htext.addStretch(stretch =1)
            self.htext.addWidget(self.frame2)
            self.htext.addStretch(stretch =1)
            self.widgettext.setLayout(self.htext)
            
            self.widget0_1=QWidget()
            self.widget0_1.setFixedSize(350,60)
                # self.widget1.setMinimumWidth(100)
            self.widget0_1.setStyleSheet("background:white")
            
            self.go_btn = QtWidgets.QPushButton(self.widget0_1)
            # self.go_btn.setGeometry(QtCore.QRect(830,130, 175, 31))
            self.go_btn.setText("Show me")
            self.go_btn.setFixedSize(205, 31)
            f = QFont('Arial')
            f.setPixelSize(14)
            self.go_btn.setFont(f)
            self.go_btn.setStyleSheet(
            '''QPushButton
            {
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
              
            }
            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }''')
            self.go_btn.clicked.connect(self.apply_above_color_paid_color)
            
            self.h0=QHBoxLayout()
            # self.object = QLabel("",self.widget1)
            # self.h0.addStretch(stretch =1)
            self.h0.addWidget(self.go_btn)
            self.h0.addStretch(stretch =1)
            self.widget0_1.setLayout(self.h0)

            self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widgettext)
            # self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widget0_1)
            self.layout_scrollarea_h0.addStretch(stretch =1)

            self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])
            self.generate_buttons(700)
            self.vbox.addWidget(self.scrollArea)
            self.splash.close()
            self.color_counter = 1
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')

  

    def showColorDialogTitle(self,event,frame):
        col = QColorDialog.getColor()

        if col.isValid():
            frame.setStyleSheet('QWidget { background-color: %s }' % col.name())

    def apply_paid_title_color(self):
        color = self.frame1.palette().color(QtGui.QPalette.Base).name() + ',' + self.frame2.palette().color(QtGui.QPalette.Base).name()
        self.inner_customization[0] = color
        customization = self.customization.copy()
        customization['title_background'] = color.split(',')[0]
        customization['title_text_color'] = color.split(',')[1]
        parameter = self.sql_func(self.sql_data,customizations=self.customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        self.check=2
        self.widget4.hide()
        self.generate_customize_graphs(0,300,100,ax1,fig,color_flag=True,title=parameter['title'])
        self.paid_color = True

    def update_title_color_paid(self):
        try:
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            
            self.widgettext = QWidget()
            self.widgettext.setFixedSize(560,60)
                # self.widget1.setMinimumWidth(100)
            self.widgettext.setStyleSheet("background:white")

            self.frame1 = QtWidgets.QFrame(self.widgettext)
            self.frame1.setFixedSize(200,150)
            print(dir(ax1.title))
            self.frame1.setStyleSheet("background-color:{}".format(parameter['title_background']))
            self.frame1.mousePressEvent = lambda event,frame=self.frame1:self.showColorDialog(event,frame)
            self.frame2 = QtWidgets.QFrame(self.widgettext)
            self.frame2.setFixedSize(200,150)
            self.frame2.setStyleSheet("background-color:{}".format(parameter['title_text_color']))
            self.frame2.setStyleSheet("border: 4px solid #4F98FE;")
            self.frame2.mousePressEvent = lambda event,frame=self.frame2:self.showColorDialog(event,frame)
            self.htext=QHBoxLayout()
            
            # self.object = QLabel("",self.widget1)
            self.htext.addStretch(stretch =1)
            self.htext.addWidget(self.frame1)
            self.htext.addStretch(stretch =1)
            self.htext.addWidget(self.frame2)
            self.htext.addStretch(stretch =1)
            self.widgettext.setLayout(self.htext)
            
            self.widget0_1=QWidget()
            self.widget0_1.setFixedSize(350,60)
                # self.widget1.setMinimumWidth(100)
            self.widget0_1.setStyleSheet("background:white")
            
            self.go_btn = QtWidgets.QPushButton(self.widget0_1)
            # self.go_btn.setGeometry(QtCore.QRect(830,130, 175, 31))
            self.go_btn.setText("Show me")
            self.go_btn.setFixedSize(205, 31)
            f = QFont('Arial')
            f.setPixelSize(18)
            self.go_btn.setFont(f)
            self.go_btn.setStyleSheet(
            '''QPushButton
            {
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
              
            }
            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }''')
            self.go_btn.clicked.connect(self.apply_paid_title_color)
            
            self.h0=QHBoxLayout()
            # self.object = QLabel("",self.widget1)
            # self.h0.addStretch(stretch =1)
            self.h0.addWidget(self.go_btn)
            self.h0.addStretch(stretch =1)
            self.widget0_1.setLayout(self.h0)

            self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widgettext)
            # self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widget0_1)
            self.layout_scrollarea_h0.addStretch(stretch =1)

            self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])
            self.generate_buttons(700)
            self.layout_scrollarea_v.addStretch(1)
            self.vbox.addWidget(self.scrollArea)
            self.splash.close()
            self.color_counter = 1
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')

    def showColorDialogPallete(self,event,frame,index):
        col = QColorDialog.getColor()

        if col.isValid():
            frame.setStyleSheet('QWidget { background-color: %s }' % col.name())
            self.color_values[index] = col.name()
            self.pallet_check=True

    def apply_color_pallete(self):
        pallet_c = self.combo.currentText()
        if  pallet_c == 'Choose ...' or self.pallet_check: 
            self.inner_customization[0] = self.color_values 
            customization = self.customization.copy()
            print('################PALETTE#############')
            print(self.inner_customization[0])
            print(len(self.inner_customization[0]))
            customization['color_palette'] = self.inner_customization[0] * 5
                   
        else:
            self.inner_customization[0] = self.paid_color_dict[pallet_c].replace(" ","").split(',')
            customization = self.customization.copy()
            customization['color_palette'] = self.inner_customization[0] * 5    
        parameter = self.sql_func(self.sql_data,customizations=customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        self.check=2
        self.widget4.hide()
        self.generate_customize_graphs(0,300,100,ax1,fig)
        # try:
        #     if self.fields['character'][0] == 'None':
        #         self.data_values = parameter['dataframe'][self.fields['date'][0]].unique()
        #     else:
        #         self.data_values = parameter['dataframe'][self.fields['character'][0]].unique()
        # except:
        #     self.data_values = list(parameter['dataframe'].index.levels[1])
        self.color_values = parameter['color_palette']
        if not self.pallet_check:
            while len(self.color_values) <= len(self.data_values):
                self.color_values += self.color_values
            self.color_values[:len(self.data_values)] 
            for i in range(len(self.data_values)):
                self.frame1[self.data_values[i]].setStyleSheet("background-color:{}".format(self.color_values[i]))
        if self.pallet_check:
            self.pallet_check = False 
        self.paid_color = True

    def update_color_pallete_paid(self):
        try:
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            self.pallet_check = False
            self.widgettext = QWidget()
            self.widgettext.setFixedSize(560,60)
            self.widgettext.setStyleSheet("background:white")
            self.frame1 = {}
            print('*******************************************')
            print(parameter['dataframe'])
            print(parameter['dataframe'].columns)
            try:
                print(parameter['dataframe'])
                if self.fields['character'][0] == 'None':
                    self.data_values = parameter['dataframe'][self.fields['date'][0]].unique()
                else:
                    self.data_values = parameter['dataframe'][self.fields['character'][0]].unique()
            except Exception as e:
                print("#####################ERERERER")
                print(e)
                print(parameter['dataframe'].index.levels[1])
                self.data_values = list(parameter['dataframe'].index.levels[1])
            self.color_values = parameter['color_palette']
            self.htext=QHBoxLayout()
            self.hdropdown=QHBoxLayout()
            self.dropdown = QWidget()
            self.dropdown.setFixedSize(560,60)
            self.combo = QtWidgets.QComboBox(self.dropdown)
            self.combo.setFixedSize(250,30)
            self.combo.addItem("Choose ...")
            self.hdropdown.addStretch(stretch =2)
            self.hdropdown.addWidget(self.combo)
            self.hdropdown.addStretch(stretch =2)
            self.dropdown.setLayout(self.hdropdown)
            
            self.paid_color_dict ={}
            self.paid_color_dict['Basic 10'] = '#4E79A7, #F28E2B, #E15759, #76B7B2, #59A14F, #EDC948,#B07AA1,#FF9DA7,#9C755F,#BAB0AC'
            self.paid_color_dict['Basic 20'] = '#4E79A7, #A0CBE8, #F28E2B, #FFBE7D, #59A14F, #8CD17D, #B6992D, #F1CE63, #499894, #86BCB6, #E15759, #FF9D9A, #79706E, #BAB0AC, #D37295, #FABFD2, #B07AA1, #D4A6C8, #9D7660, #D7B5A6'
            self.paid_color_dict['Color Blind']= '#1170aa, #fc7d0b, #a3acb9, #57606c, #5fa2ce, #c85200, #7b848f, #a3cce9, #ffbc79, #c8d0d9'
            self.paid_color_dict['Grays']= '#767f8b, #b3b7b8, #5c6068, #d3d3d3, #989ca3'
            self.paid_color_dict['Traffic Lights'] = '#b60a1c, #e39802, #309143, #e03531, #f0bd27, #51b364, #ff684c, #ffda66, #8ace7e'
            self.paid_color_dict['Stone']= '#4f6980, #849db1, #a2ceaa, #638b66, #bfbb60, #f47942, #fbb04e, #b66353, #d7ce9f, #b9aa97, #7e756d'
            self.paid_color_dict['Stone 2']= '#6388b4, #ffae34, #ef6f6a, #8cc2ca, #55ad89, #c3bc3f, #bb7693, #baa094, #a9b5ae, #767676'
            self.paid_color_dict['Stone 3']= '#8175aa, #6fb899, #31a1b3, #ccb22b, #a39fc9, #94d0c0, #959c9e, #027b8e, #9f8f12'
            self.paid_color_dict['Jewel']= '#eb1e2c, #fd6f30, #f9a729, #f9d23c, #5fbb68, #64cdcc, #91dcea, #a4a4d5, #bbc9e5'
            self.paid_color_dict['Summer']= '#bfb202, #b9ca5d, #cf3e53, #f1788d, #00a2b3, #97cfd0, #f3a546, #f7c480'
            self.paid_color_dict['Winter']= '#90728f, #b9a0b4, #9d983d, #cecb76, #e15759, #ff9888, #6b6b6b, #bab2ae, #aa8780, #dab6af'
            self.paid_color_dict['Green-Orange-Teal']= '#4e9f50, #87d180, #ef8a0c, #fcc66d, #3ca8bc, #98d934, #94a323, #c3ce3d, #a08400, #f7d42a, #26897e, #8dbfa8'
            self.paid_color_dict['Red-Blue-Brown']='#466f9d, #91b3d7, #ed444a, #feb5a2, #9d7660, #d7b5a6, #3896c4, #a0d4ee, #ba7e45, #39b87f, #c8133b, #ea8783'
            self.paid_color_dict['Purple-Pink-Gray']='#8074a8, #c6c1f0, #c46487, #ffbed1, # 9c9290, #c5bfbe, #9b93c9, #ddb5d5, #7c7270, #f498b6, #b173a0, #c799bc'
            self.paid_color_dict['Hue Circle']='#1ba3c6, #2cb5c0, #30bcad, #21B087, #33a65c, #57a337, #a2b627, #d5bb21, #f8b620, #f89217, #f06719, #e03426, #f64971, #fc719e, #eb73b3, #ce69be, #a26dc2, #7873c0, #4f7cba'
            self.paid_color_dict['Basic 10 - 1']= '#1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf'
            self.paid_color_dict['Basic 10 - 2']= '#729ece, #ff9e4a, #67bf5c, #ed665d, #ad8bc9, #a8786e, #ed97ca, #a2a2a2, #cdcc5d, #6dccda'
            self.paid_color_dict['Basic 10 - 3']= '#aec7e8, #ffbb78, #98df8a, #ff9896, #c5b0d5, #c49c94, #f7b6d2, #c7c7c7, #dbdb8d, #9edae5'
            self.paid_color_dict['Basic 20 - ']= '#1f77b4, #aec7e8, #ff7f0e, #ffbb78, #2ca02c, #98df8a, #d62728, #ff9896, #9467bd, #c5b0d5, #8c564b, #c49c49, #e377c2, #f7b6d2, #7f7f7f, #c7c7c7, #bcbd22, #dbdb8d, #17becf, #9edae5'
            self.paid_color_dict['Gray 5']= '#60636a, #a5acaf, #414451, #8f8782, #cfcfcf'
            for key in self.paid_color_dict.keys():
                self.combo.addItem(key)
            while len(self.color_values) <= len(self.data_values):
                self.color_values += self.color_values
            self.color_values[0:len(self.data_values)]
            for i in range(len(self.data_values)):
                self.frame1[self.data_values[i]] = QtWidgets.QFrame(self.widgettext)
                self.frame1[self.data_values[i]].setFixedSize(50,150)
                self.frame1[self.data_values[i]].setStyleSheet("background-color:{}".format(self.color_values[i]))
                self.frame1[self.data_values[i]].mousePressEvent = lambda event,frame=self.frame1[self.data_values[i]],index=i:self.showColorDialogPallete(event,
                frame,index)
                self.frame1[self.data_values[i]].setToolTip(self.data_values[i])
                self.htext.addStretch(stretch =1)
                self.htext.addWidget(self.frame1[self.data_values[i]])
                self.htext.addStretch(stretch =1)
                self.widgettext.setLayout(self.htext)
                
            self.widget0_1=QWidget()
            self.widget0_1.setFixedSize(350,60)
                # self.widget1.setMinimumWidth(100)
            self.widget0_1.setStyleSheet("background:white")
            
            self.go_btn = QtWidgets.QPushButton(self.widget0_1)
            # self.go_btn.setGeometry(QtCore.QRect(830,130, 175, 31))
            self.go_btn.setText("Show me")
            self.go_btn.setFixedSize(205, 31)
            f = QFont('Arial')
            f.setPixelSize(14)
            self.go_btn.setFont(f)
            self.go_btn.setStyleSheet(
            '''QPushButton
            {
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
              
            }
            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }''')
            self.go_btn.clicked.connect(self.apply_color_pallete)
            
            self.h0=QHBoxLayout()
            # self.object = QLabel("",self.widget1)
            # self.h0.addStretch(stretch =1)
            self.h0.addWidget(self.go_btn)
            self.h0.addStretch(stretch =1)
            self.widget0_1.setLayout(self.h0)

            self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widgettext)
            self.layout_scrollarea_h0.addWidget(self.dropdown)
            # self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widget0_1)
            self.layout_scrollarea_h0.addStretch(stretch =1)
            self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])
            self.generate_buttons(700)
            self.vbox.addWidget(self.scrollArea)
            self.splash.close()
            self.color_counter = 0
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')
            
    def generate_title_text(self):
        try:
            # print(self.customization)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            
            self.widgettext = QWidget()
            self.widgettext.setFixedSize(560,60)
                # self.widget1.setMinimumWidth(100)
            self.widgettext.setStyleSheet("background:white")

            self.textEdit = QPlainTextEdit(self.widgettext)
            self.textEdit.setFixedSize(500,31)
            f = QFont('Arial')
            f.setPixelSize(15)
            self.textEdit.setFont(f)
            # self.textEdit.setGeometry(QtCore.QRect(200, 130, 611, 31))
            self.textEdit.setObjectName("textEdit")
            self.textEdit.appendPlainText(parameter[self.key])

            self.htext=QHBoxLayout()
            # self.object = QLabel("",self.widget1)
            self.htext.addStretch(stretch =1)
            self.htext.addWidget(self.textEdit)
            self.htext.addStretch(stretch =1)
            self.widgettext.setLayout(self.htext)
            
            self.widget0_1=QWidget()
            self.widget0_1.setFixedSize(350,60)
                # self.widget1.setMinimumWidth(100)
            self.widget0_1.setStyleSheet("background:white")
            
            self.go_btn = QtWidgets.QPushButton(self.widget0_1)
            # self.go_btn.setGeometry(QtCore.QRect(830,130, 175, 31))
            self.go_btn.setText("Show me")
            self.go_btn.setFixedSize(205, 31)
            f = QFont('Arial')
            f.setPixelSize(14)
            self.go_btn.setFont(f)
            self.go_btn.setStyleSheet(
            '''QPushButton
            {
                border-radius: 5px;
                color: black;
                background-color: #DFDFDF;
              
            }
            QPushButton:hover
            {
                background: #6e98e0;
                color: white;
                
            }''')
            self.go_btn.clicked.connect(self.update_in_window_title)
            
            self.h0=QHBoxLayout()
            # self.object = QLabel("",self.widget1)
            # self.h0.addStretch(stretch =1)
            self.h0.addWidget(self.go_btn)
            self.h0.addStretch(stretch =1)
            self.widget0_1.setLayout(self.h0)

            self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widgettext)
            # self.layout_scrollarea_h0.addStretch(stretch =1)
            self.layout_scrollarea_h0.addWidget(self.widget0_1)
            self.layout_scrollarea_h0.addStretch(stretch =1)

            self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])
            self.generate_buttons(700)
            self.vbox.addWidget(self.scrollArea)
            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')
    
    def update_in_window_title(self):
        new_title = self.textEdit.toPlainText().replace('\n','')
        # print(new_title)
        self.customization[self.key] = new_title 
        parameter = self.sql_func(self.sql_data,customizations=self.customization)
        ax1,fig = self.graph_func(parameter,self.kind,self.fields)
        self.check=2
        self.widget4.hide()
        self.generate_customize_graphs(0,300,100,ax1,fig,title=parameter['title'])



    def generate_y_choices(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0

                self.widget1=QWidget()
                self.widget1.setFixedSize(500,40)
                # self.widget1.setMinimumWidth(100)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                # self.object = QLabel("",self.widget1)
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                # self.layout_scrollarea_h1.addStretch(stretch =1)
                # self.layout_scrollarea_h1.addWidget(self.y_label)
                # self.layout_scrollarea_h1.addStretch(stretch =1)
                # self.layout_scrollarea_h1.addWidget(object1)
                self.y_label.show()

                self.widget3=QWidget()
                self.widget3.setFixedSize(500,40)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)
                # self.layout_scrollarea_h2.addStretch(stretch =1)
                # self.layout_scrollarea_h2.addWidget(self.y_label_1)
                # self.layout_scrollarea_h2.addStretch(stretch =1)
                self.y_label_1.show()
                
                if row['option'] == '1':
                    self.inner_customization[key_counter] = True
                elif row['option'] ==  '0':
                    self.inner_customization[key_counter] = False
                else:
                    self.inner_customization[key_counter] = row['option']
                customization = self.customization.copy()
                customization[self.key] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            self.layout_scrollarea_v.addStretch(1)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')
    
    def generate_legend(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QWidget()
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QWidget()
                if(row['sub_description']==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                if row['option'] == '1':
                    self.inner_customization[key_counter] = True
                elif row['option'] ==  '0':
                    self.inner_customization[key_counter] = False
                else:
                    self.inner_customization[key_counter] = row['option']
                customization = self.customization.copy()
                customization[self.key] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')

    def generate_data_label_format(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QFrame()
                self.widget1.setFrameShape(QFrame.NoFrame)
                self.widget1.setLineWidth(0)
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QFrame()
                self.widget3.setFrameShape(QFrame.NoFrame)
                self.widget3.setLineWidth(0)
                if(row['sub_description']==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                # self.y_label = QtWidgets.QLabel(self.frame)
                # self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                # self.y_label.setObjectName("label")
                # self.y_label.setText(row['description'])
                # self.y_label.setFont(font)
                # self.y_label.show()
                # self.y_label_1 = QtWidgets.QLabel(self.frame)
                # self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                # self.y_label_1.setObjectName("label")
                # self.y_label_1.setText(row['sub_description'])
                # self.y_label_1.show()
                self.inner_customization[key_counter] = row['option']
                customization = self.customization.copy()
                customization[self.key] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            # self.layout_scrollarea_v.insertStretch( -1, 1 );
            # 
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')
    
    def generate_gradient(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QWidget()
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                # print("runned",row['sub_description'])
                self.widget3=QWidget()
                if(row['sub_description']==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                self.inner_customization[key_counter] = row['option']
                customization = self.customization.copy()
                customization[self.key] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')


    def generate_color_single(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QWidget()
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QWidget()
                if(row['sub_description']==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                self.inner_customization[key_counter] = row['option']
                customization = self.customization.copy()
                # print(self.inner_customization[key_counter])
                customization[self.key] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')


    def generate_color_pallete(self):
        try:
            self.color_dict ={}
            self.color_dict['Top 10'] = '#4E79A7, #F28E2B, #E15759, #76B7B2, #59A14F, #EDC948,#B07AA1,#FF9DA7,#9C755F,#BAB0AC'
            self.color_dict['Top 20'] = '#4E79A7, #A0CBE8, #F28E2B, #FFBE7D, #59A14F, #8CD17D, #B6992D, #F1CE63, #499894, #86BCB6, #E15759, #FF9D9A, #79706E, #BAB0AC, #D37295, #FABFD2, #B07AA1, #D4A6C8, #9D7660, #D7B5A6'
            self.color_dict['Color Blind']= '#1170aa, #fc7d0b, #a3acb9, #57606c, #5fa2ce, #c85200, #7b848f, #a3cce9, #ffbc79, #c8d0d9'
            self.color_dict['Grays']= '#767f8b, #b3b7b8, #5c6068, #d3d3d3, #989ca3'
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            ax1,fig = self.graph_func(parameter,self.kind,self.fields)
            #for index, row in self.options.iterrows():
            for key, value in self.color_dict.items():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QWidget()
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(key)
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QWidget()
                #if(row['sub_description']==None):
                #    self.widget3.setFixedSize(500,0)
                #else:
                #    self.widget3.setFixedSize(500,30)
                
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                #self.y_label_1.setText()



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                self.inner_customization[key_counter] = value.replace(" ","").split(',')*100
                print('#lookhereforlength')
                print(self.inner_customization[key_counter])
                customization = self.customization.copy()
                # print(self.inner_customization[key_counter])
                customization['color_palette'] = self.inner_customization[key_counter]
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')

    def generate_above_below_color(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QWidget()
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QWidget()
                if(row['sub_description']==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                self.inner_customization[key_counter] = row['option']
                colors = self.inner_customization[key_counter].split(',')
                customization = self.customization.copy()
                customization['above_color'] = colors[0].replace(' ','')
                customization['below_color'] = colors[1].replace(' ','')
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')
    
    def generate_arrow_colors(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            font.setPixelSize(20)
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            for index, row in self.options.iterrows():
                # print(self.options)
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.check1=self.check1+1
                if(self.check1==3):
                    self.check1=1
                    self.layout_scrollarea_h1=QHBoxLayout()
                    self.layout_scrollarea_h1.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_h3=QHBoxLayout()
                    self.layout_scrollarea_h3.setAlignment(Qt.AlignTop)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h1)
                    self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h3)
                self.widget1=QWidget()
                self.widget1.setFixedSize(500,45)
                self.widget1.setStyleSheet("background:white")
                self.y_label = QtWidgets.QLabel(self.widget1)
                self.y_label.setGeometry(QtCore.QRect(x_axis+130, 150+y_axis, 300, 50))
                self.y_label.setObjectName("label")
                self.y_label.setText(row['description'])
                self.y_label.setFont(font)


                self.h1=QHBoxLayout()
                self.h1.addStretch(stretch =1)
                self.h1.addWidget(self.y_label)
                self.h1.addStretch(stretch =1)
                self.widget1.setLayout(self.h1)

                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.layout_scrollarea_h1.addWidget(self.widget1)
                self.layout_scrollarea_h1.addStretch(stretch =1)
                self.y_label.show()
                # if(row['sub_description']!=None):
                #     print("runned",row['sub_description'])
                self.widget3=QWidget()
                if(row['sub_description']==None):
                    self.widget3.setFixedSize(500,0)
                else:
                    self.widget3.setFixedSize(500,30)
                self.widget3.setStyleSheet("background:white")

                self.y_label_1 = QtWidgets.QLabel(self.widget3)
                self.y_label_1.setGeometry(QtCore.QRect(x_axis+130, 190+y_axis, 500, 50))
                self.y_label_1.setObjectName("label")
                self.y_label_1.setText(row['sub_description'])



                self.h3=QHBoxLayout()
                self.h3.addStretch(stretch =1)
                self.h3.addWidget(self.y_label_1)
                self.h3.addStretch(stretch =1)
                self.widget3.setLayout(self.h3)

                self.layout_scrollarea_h3.addStretch(stretch =1)
                self.layout_scrollarea_h3.addWidget(self.widget3)
                self.layout_scrollarea_h3.addStretch(stretch =1)

                self.y_label_1.show()
                self.inner_customization[key_counter] = row['option']
                colors = self.inner_customization[key_counter].split(',')
                customization = self.customization.copy()
                customization['arrow_color_up'] = colors[0].replace(' ','')
                customization['arrow_color_down'] = colors[1].replace(' ','')
                parameter = self.sql_func(self.sql_data,customizations=customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis+150,ax1,fig)
                x_axis+=530
                count +=1
                key_counter +=1
            y_axis += 190
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.frame.setFixedHeight(y_axis+50)
            #
            self.vbox.addWidget(self.scrollArea)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')

    def generate_title_color(self):
        try:
            y_axis = 0
            x_axis=0
            count=0
            key_counter= 0
            parameter = self.sql_func(self.sql_data,customizations=self.customization)
            for index, row in self.options.iterrows():
                if count == 2:
                    y_axis+=630
                    x_axis=0
                    count = 0
                self.inner_customization[key_counter] = row['option']
                parameter = self.sql_func(self.sql_data,customizations=self.customization)
                ax1,fig = self.graph_func(parameter,self.kind,self.fields)
                self.generate_customize_graphs(key_counter,x_axis,y_axis,ax1,fig,color_flag=True,title=parameter['title'])
                x_axis+=530
                count +=1
                key_counter +=1
            if count <= 2:
                y_axis += 580
            self.generate_buttons(y_axis)
            self.vbox.addWidget(self.scrollArea)
            self.frame.setFixedHeight(y_axis+50)

            self.splash.close()
        except:
            collect_data('ERROR',self.key,self.parent_window)
            self.main_window.close()
            self.splash.close()
            show_error_message('Woops, we ran into an issue with this customization.')
        
    def generate_buttons(self,y_axis):
        try:
            index = self.customization_features.index(self.key)
            if self.key == 'y_label':
                if 'y_on' in self.customization: 
                    if not self.customization['y_on']:
                        self.customization_functions[index + 1]()
            # print(self.customization_features)
            # print(self.customization)
            # print(index)
            self.widgetpush1=QWidget()
            self.widgetpush1.setFixedSize(300,45)
            # self.widgetpush1.setStyleSheet("background:yellow")
            print(self.customization_features)
            print(self.customization)
            print(index)
            if index != 0:
                print('**************Previous Button**************')
                # print(self.customization_features[index - 1])

                self.prev_btn = QtWidgets.QPushButton(self.widgetpush1)
                self.prev_btn.setGeometry(QtCore.QRect(100,y_axis, 175, 31))
                self.prev_btn.setFixedSize(205, 35)
                self.prev_btn.setText('Previous Customization')
                f = QFont('Arial')
                f.setPixelSize(15)
                self.prev_btn.setFont(f)
                self.prev_btn.setStyleSheet(
                '''QPushButton
                {
                    border-radius: 5px;
                    color: black;
                    background-color: #DFDFDF;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }''')
                        # self.widget3=QWidget()
        # self.widget3.setFixedSize(300,40)
        # self.widget3.setStyleSheet("background:yellow")

                self.hpush1=QHBoxLayout()
                self.hpush1.addWidget(self.prev_btn)
                # self.hpush1.addStretch(stretch =1)
                self.widgetpush1.setLayout(self.hpush1)

                # self.hbox.addStretch(stretch =1)

                # self.hbox.addWidget(self.prev_btn)
                # self.hbox.addStretch(1)
                self.prev_btn.clicked.connect(lambda:self.update_on_button(self.customization_functions[index - 1]))
            if(self.t1==False):
                self.hbox.addWidget(self.widgetpush1)
                self.hbox.addStretch(stretch =1)

            self.widgetpush2=QWidget()
            self.widgetpush2.setFixedSize(300,45)
            self.back_cust_btn = QtWidgets.QPushButton(self.widgetpush2)
            self.back_cust_btn.setGeometry(QtCore.QRect(750, y_axis, 125, 31))
            self.back_cust_btn.setFixedSize(205, 35)
            f = QFont('Arial')
            f.setPixelSize(15)
            self.back_cust_btn.setFont(f)
            self.back_cust_btn.setText('Apply Changes')
            self.back_cust_btn.setStyleSheet(
                '''QPushButton
                {
                    border-radius: 5px;
                    color: black;
                    background-color: #DFDFDF;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }''')

            self.hpush2=QHBoxLayout()
            self.hpush2.addWidget(self.back_cust_btn)
            # self.hpush1.addStretch(stretch =1)
            self.widgetpush2.setLayout(self.hpush2)

            # self.hbox.addStretch(stretch =1)
            self.hbox.addWidget(self.widgetpush2)
            self.hbox.addStretch(stretch =1)

            # self.hbox.addWidget(self.back_cust_btn)
            self.back_cust_btn.clicked.connect(self.update_graph)

            self.widgetpush3=QWidget()
            self.widgetpush3.setFixedSize(300,45)
            # self.widgetpush3.setStyleSheet("background:yellow")
            
            if index != len(self.customization_features) -1:
                print('**************Next Button**************')
                # print(self.customization_features[index + 1])
                self.next_btn = QtWidgets.QPushButton(self.widgetpush3)
                self.next_btn.setGeometry(QtCore.QRect(900,y_axis, 175, 31))
                self.next_btn.setFixedSize(205, 35)
                self.next_btn.setText("Next Customization")
                f = QFont('Arial')
                f.setPixelSize(15)
                self.next_btn.setFont(f)
                self.hpush3=QHBoxLayout()
                self.hpush3.addWidget(self.next_btn)
                # self.hpush1.addStretch(stretch =1)
                self.widgetpush3.setLayout(self.hpush3)
                self.next_btn.setStyleSheet(
                '''QPushButton
                {
                    border-radius: 5px;
                    color: black;
                    background-color: #DFDFDF;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }''')
                print('#customization auto order')
                print(self.customization_functions)
                print(self.customization_features)
                self.next_btn.clicked.connect(lambda:self.update_on_button(self.customization_functions[index + 1]))
            self.hbox.addWidget(self.widgetpush3)
            # self.hbox.addStretch(stretch =1)
        except Exception as e:
            print('BUTTON ERROR')
            print(e)

    def update_on_button(self,func):
        self.main_window.hide()
        self.update_graph()
        func()
            


    def generate_customize_graphs(self,count,x_axis,y_axis,ax1,fig,color_flag=False,title=None):
            if color_flag:
                colors = self.inner_customization[count].replace(" ",'').split(',')
                fig.texts = []                
                title_ = ax1.set_title(title,
                                    backgroundcolor=colors[0],
                                    color=colors[1], weight='normal'
                                    , fontsize=18, va='top')
                bb = title_.get_bbox_patch()
                # use the axes' width as width of the text box
                bb.set_boxstyle("ext", pad=0.8, width=1000)
                fig.subplots_adjust(left=0.1, right=0.91,
                            bottom=0.2, top=0.9,
                            hspace=0.2, wspace=0.2)
                fig.texts.append(title_)

            
            if platform != 'darwin':
                ax1.get_figure().savefig(str(count)+'.png',bbox_inches="tight", dpi=100)
                pixmap = QtGui.QPixmap(str(count)+'.png')
            else:
                ax1.get_figure().savefig(home+"/"+str(count)+'.png',bbox_inches="tight", dpi=100)
                pixmap = QtGui.QPixmap(home+"/"+str(count)+'.png')
            self.check=self.check+1
            if(self.check==3):
                self.check=1
                self.layout_scrollarea_h2=QHBoxLayout()
                self.layout_scrollarea_h2.setAlignment(Qt.AlignTop)
                self.layout_scrollarea_v.addLayout(self.layout_scrollarea_h2)
            
            self.widget4=QFrame()
            self.widget4.setFrameShape(QFrame.NoFrame)
            self.widget4.setLineWidth(0)
            self.widget4.setMinimumSize(550,450)
            self.widget4.setMaximumSize(550,450)
            self.lbl[count] = ClickLabel(self.widget4)
            self.lbl[count].setPixmap(pixmap)
            self.lbl[count].setScaledContents(True)
            self.lbl[count].setGeometry(QtCore.QRect(50+x_axis, 90+y_axis, 500, 480))
            self.lbl[count].clicked.connect(lambda:self.selected_graph(count))

            
            self.h4=QHBoxLayout()
            self.h4.addStretch(stretch =1)
            self.h4.addWidget(self.lbl[count])

            self.h4.addStretch(stretch =1)
            self.widget4.setLayout(self.h4)
            self.layout_scrollarea_h2.addStretch(stretch =1)
            self.layout_scrollarea_h2.addWidget(self.widget4)
            self.layout_scrollarea_h2.addStretch(stretch =1)
            self.effect = QGraphicsDropShadowEffect(self.lbl[count])
            self.effect.setOffset(0, 0)
            self.effect.setBlurRadius(25)
            self.lbl[count].setGraphicsEffect(self.effect)
            self.lbl[count].show()
 

            if count == 0 and self.key != 'title':
                self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
            try:
                if platform != 'darwin':
                    os.remove('0.png')
                else:
                    os.remove(home + '/' + '0.png')
            except:
                print('picture no found')
            
    
    def selected_graph(self,count):
        if self.key == 'y_on' or self.key == 'legend' or self.key == 'orientation' \
        or self.key == 'legend_placement':
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        elif self.key == 'data_label_frequency' or self.key == 'data_label_format_percent'\
                or self.key == 'data_label_type_total' or self.key == 'data_label_frequency_total'\
                    or self.key == 'data_label_format_total' or self.key == 'data_label_decimal_total'\
                    or self.key == 'data_label_decimal_percent' or self.key == 'data_label_type_percent' \
                    or self.key == 'data_label_frequency_percent' or self.key == 'data_label_format_percent' or self.key =='data_label_format_axis'\
                    or self.key == 'data_label_decimal_axis' or self.key == 'data_label_type_axis' or self.key == 'data_label_frequency_axis' or self.key =='date_format':
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        elif self.key == 'data_label_format':
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        elif self.key == 'data_label_decimal':
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        elif self.key in ['data_label_type', 'data_label_degree','x_tick_degree']:
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        elif self.key in ['gradient','single_color','arrow_color_up']:
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        elif self.key == 'color_palette':
            self.customization[self.key] = self.inner_customization[count]
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
            try:
                for i in range(len(self.data_values)):
                    self.frame1[self.data_values[i]].setStyleSheet("background-color:{}".format(self.color_values[i]))
            except Exception as e:
                print(e)
        elif self.key == 'above_color':
            colors = self.inner_customization[count].split(',')
            self.customization['above_color'] = colors[0].replace(' ','')
            self.customization['below_color'] = colors[1].replace(' ','')
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")           
        elif self.key == 'title_background':
            colors = self.inner_customization[count].split(',')
            self.customization['title_background'] = colors[0].replace(' ','')
            self.customization['title_text_color'] = colors[1].replace(' ','')
            for key,value in self.lbl.items():
                value.setStyleSheet("border: none;")
            self.lbl[count].setStyleSheet("border: 4px solid #4F98FE;")
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle( "VizPick")
        MainWindow.setWindowIcon(QtGui.QIcon('logo1.png'))
        # self.back_btn.setText(_translate("MainWindow", "Back to Graph"))
        # self.next_cust_btn.setText(_translate("MainWindow", "Next Customization"))
        # self.vbox.addWidget(self.back_btn)
        # self.vbox.addWidget(self.next_cust_btn)
        

    def update_graph(self):
        if self.key in ['title','x_label','y_label']:
            new_title = self.textEdit.toPlainText().replace('\n','')
            self.customization[self.key] = new_title
        if self.paid_color:
            if self.key == 'above_color':
                colors = self.inner_customization[0].split(',')
                self.customization['above_color'] = colors[0].replace(' ','')
                self.customization['below_color'] = colors[1].replace(' ','')
            elif self.key == 'title_background':
                colors = self.inner_customization[0].split(',')
                self.customization['title_background'] = colors[0].replace(' ','')
                self.customization['title_text_color'] = colors[1].replace(' ','')
            elif self.key == 'color_palette':
                self.customization[self.key] = self.inner_customization[0]*5
            else:
                self.customization[self.key] = self.inner_customization[0]
        # print(self.customization)
        collect_data('Formatting',self.key,self.parent_window)
        self.update_func()
        self.main_window.hide()


